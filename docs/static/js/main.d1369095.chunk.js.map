{"version":3,"sources":["components/Intro.tsx","components/Homepage.tsx","components/StatsTable.tsx","components/StatBadge.tsx","components/AbilityList.tsx","components/PsychicPowerList.tsx","components/WeaponList.tsx","components/Phase.tsx","components/SpecialistIcon.tsx","components/CategoryIcon.tsx","components/Datasheet.tsx","components/Roster.tsx","BattlescribeParser.js","FileLoader.js","App.jsx","serviceWorker.js","index.tsx"],"names":["Intro","className","Alert","variant","href","Homepage","props","onDrop","onUpload","accept","getRootProps","getInputProps","style","textAlign","StatsTable","Table","striped","bordered","size","movement","weapon_skill","isNaN","ballistic_skill","strength","toughness","wounds","attacks","leadership","save","StatBadge","paddingTop","border","width","height","background","color","display","flexDirection","borderRadius","marginBottom","fontSize","lineHeight","name","fontWeight","value","_","require","AbilityList","abilities","phase","filter","x","phases","indexOf","length","sortBy","map","description","PsychicPowerList","powers","charge","WeaponList","weapons","type","range","armourPiercing","damage","Phase","textTransform","children","SpecialistIcon","marginRight","specialism","toLowerCase","CategoryIcon","category","Datasheet","pageBreakBefore","padding","justifyContent","Col","model","join","flexGrow","points","Badge","pill","faction","keywords","keyword","stats","Row","sm","psychicPowers","userStrength","Roster","models","key","hash","DOMParser","xpath","useNamespaces","roster","stat","nodes","parseInt","childNodes","nodeValue","weaponStat","weapon","numeric","costNode","sumBy","getAttribute","calculatePhases","test","push","parseForceRule","rule","parseAbility","ability","parseWargear","wargear","parsePsychicPower","power","warpChargeDescription","match","parseModel","closeCombatWeapon","forceRules","upgrades","concat","exec","parseWeapon","specialismSelection","specialistAbilities","remove","details","split","parseBattlescribeXML","xml","doc","parseFromString","categoryId","uniqBy","m","JSZip","parseFile","file","Promise","resolve","loadAsync","then","zip","async","unzip","loadFiles","files","a","reader","FileReader","reject","onerror","abort","DOMException","onloadend","result","readAsBinaryString","loadFile","App","state","handleUpload","acceptedFiles","setState","Container","this","React","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d1369095.chunk.js","sourcesContent":["import React from 'react';\nimport { Alert } from 'react-bootstrap'\n\nfunction Intro() {\n  return <>\n    <h1>\n      Scriptorum\n    </h1>\n    <p className='lead'>\n      Readable datasheets for Warhammer 40k Kill Team\n    </p>\n    <ul>\n      <li>Organises abilities and weapons by phase</li>\n      <li>Merges identical models</li>\n      <li>Prints out as one datasheet per page</li>\n      <li>Clear, readable layout</li>\n    </ul>\n    <Alert variant='danger'>\n      Scriptorum is a work in progress, but it should work,\n      so try it out! If you spot any problems, please create an\n      issue <a href='https://github.com/Floppy/scriptorum/issues'>on GitHub</a> and\n      include your roster file if possible.\n    </Alert>\n  </>\n}\n\nexport default Intro;\n","import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport Intro from './Intro'\nimport { Alert } from 'react-bootstrap'\n\ntype Props = {\n  onUpload: any,\n}\n\nfunction Homepage(props: Props) {\n  return <>\n    <Intro />\n    <Dropzone onDrop={props.onUpload} accept='.ros,.rosz'>\n      {({ getRootProps, getInputProps }) => (\n        <Alert variant='info' {...getRootProps()} style={{ textAlign: 'center' }}>\n          <input {...getInputProps()} />\n          <p>Drop a Battlescribe roster file here, or click to select one.</p>\n          <p><em>(*.rosz and *.ros accepted)</em></p>\n        </Alert>\n      )}\n    </Dropzone>\n    <footer>\n      Built with React and Bootstrap. Released as Open Source, code <a href='https://github.com/floppy/scriptorum'>on GitHub</a>.\n    </footer>\n  </>\n}\n\nexport default Homepage;\n","import React from 'react'\nimport { Table } from 'react-bootstrap'\n\ntype Props = {\n  movement: number,\n  weapon_skill: number,\n  ballistic_skill: number,\n  strength: number,\n  toughness: number,\n  wounds: number,\n  attacks: number,\n  leadership: number,\n  save: number,\n}\n\nfunction StatsTable (props: Props) {\n  return (\n    <Table striped bordered size=\"sm\">\n      <thead>\n        <tr>\n          <th>Movement</th>\n          <th>Weapon Skill</th>\n          <th>Ballistic Skill</th>\n          <th>Strength</th>\n          <th>Toughness</th>\n          <th>Wounds</th>\n          <th>Attacks</th>\n          <th>Leadership</th>\n          <th>Save</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{props.movement}&quot;</td>\n          <td>{props.weapon_skill}+</td>\n          <td>{isNaN(props.ballistic_skill) ? '-' : props.ballistic_skill+\"+\"}</td>\n          <td>{props.strength}</td>\n          <td>{props.toughness}</td>\n          <td>{props.wounds}</td>\n          <td>{props.attacks}</td>\n          <td>{props.leadership}</td>\n          <td>{props.save}+</td>\n        </tr>\n      </tbody>\n    </Table>\n  )\n}\n\nexport default StatsTable\n","import React from 'react'\nimport CSS from 'csstype'\n\ntype Props = {\n  name: string,\n  value: string\n}\n\nfunction StatBadge (props: Props) {\n  const badgeStyle: CSS.Properties = {\n    paddingTop: '.2vw',\n    border: '1px solid black',\n    width: '5vw',\n    height: '5vw',\n    background: 'black',\n    color: 'white',\n    display: 'flex',\n    flexDirection: 'column',\n    textAlign: 'center',\n    borderRadius: '50%',\n    marginBottom: '1vw',\n  };\n  const nameStyle: CSS.Properties = {\n    fontSize: '1vw',\n    lineHeight: '1vw',\n  };\n  const valueStyle: CSS.Properties = {\n    fontSize: '3vw',\n    lineHeight: '3vw',\n    fontWeight: 'bold'\n  }\n  return (\n    <div className='statbadge' style={badgeStyle}>\n      <div className='name' style={nameStyle}>{props.name}</div>\n      <div className='value' style={valueStyle}>{props.value}</div>\n    </div>\n  )\n}\n\nexport default StatBadge\n","import React from 'react';\nimport { Ability } from '../types';\nimport { Table } from 'react-bootstrap';\n\nconst _ = require('lodash')\n\ntype Props = {\n  abilities: Ability[],\n  phase: string,\n};\n\nfunction AbilityList(props: Props) {\n  const abilities = props.phase ?\n    props.abilities.filter((x) => (x.phases.indexOf(props.phase) >= 0)) :\n    props.abilities.filter((x) => (x.phases.length === 0))\n\n  return abilities.length === 0 ? <></> : (\n    <Table striped bordered size=\"sm\">\n      <thead>\n        <tr>\n          <th>Ability</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(abilities, ['name']).map((x: Ability) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AbilityList;\n","import React from 'react';\nimport { PsychicPower } from '../types';\nimport { Table } from 'react-bootstrap';\n\nconst _ = require('lodash')\n\ntype Props = {\n  powers: PsychicPower[],\n};\n\nfunction PsychicPowerList(props: Props) {\n  return props.powers.length === 0 ? <></> : (\n    <Table striped bordered size=\"sm\">\n      <thead>\n        <tr>\n          <th>Power</th>\n          <th>Warp Charge</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(props.powers, ['name']).map((x: PsychicPower) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.charge}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default PsychicPowerList;\n","import React from 'react';\nimport { Weapon } from '../types';\nimport { Table } from 'react-bootstrap';\n\nconst _ = require('lodash')\n\ntype Props = {\n  weapons: Weapon[],\n  phase: string,\n  userStrength: number,\n};\n\nfunction WeaponList(props: Props) {\n  const weapons = props.phase === 'shooting'\n    ? props.weapons.filter((x) => (x.type !== \"Melee\"))\n    : props.weapons.filter((x) => (x.type === \"Melee\"))\n\n  return weapons.length === 0 ? <></> : (\n    <Table striped bordered size=\"sm\">\n      <thead>\n        <tr>\n          <th>Weapon</th>\n          {props.phase === \"shooting\" && <th>Range</th>}\n          {props.phase === \"shooting\" && <th>Type</th>}\n          <th>S</th>\n          <th>AP</th>\n          <th>D</th>\n          <th>Abilities</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(weapons, ['name']).map((x: Weapon) => (\n          <tr>\n            <td style={{\"whiteSpace\": \"nowrap\"}}>{x.name}</td>\n            {props.phase === \"shooting\" && <td>{x.range}&quot;</td>}\n            {props.phase === \"shooting\" && <td style={{\"whiteSpace\": \"nowrap\"}}>{x.type}</td>}\n            <td>{x.strength}</td>\n            <td>{x.armourPiercing}</td>\n            <td>{x.damage}</td>\n            <td>{x.abilities}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default WeaponList;\n","import React from 'react';\n\ntype Props = {\n  name: string,\n  children: React.ReactNode,\n};\n\nfunction Phase(props: Props) {\n  return <>\n    <h2 style={{\n      textTransform: \"capitalize\"\n    }}>\n      {props.name}\n    </h2>\n    {props.children}\n  </>\n}\n\nexport default Phase;\n","import React from 'react';\n\ntype Props = {\n  specialism: string;\n};\n\nexport function SpecialistIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'combat': '🤜',\n    'comms': '📻',\n    'demolitions': '💣',\n    'ferocity': '🦖',\n    'fortitude': '🛡️',\n    'heavy': '💥',\n    'leadership': '💀',\n    'logistics': '🚚',\n    'medic': '⚕️',\n    'melee': '🤜',\n    'psyker': '🧠',\n    'scout': '🔦',\n    'shooting': '🔫',\n    'stealth': '👻',\n    'strategist': '🗺️',\n    'strength': '💪',\n    'sniper': '🎯',\n    'veteran': '⭐',\n    'zealot': '😤',\n    '': ''\n  };\n  return (<span className='specialism' style={{marginRight: '10px'}}>\n    {props.specialism ? icons[props.specialism.toLowerCase()] : ''}\n  </span>);\n}\n","import React from 'react';\n\ntype Props = {\n  category: string;\n};\n\nexport function CategoryIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'commander': '👑',\n    'leader': '💀',\n    'specialist': '',\n  };\n  return (<span className='category' style={{marginRight: '10px'}}>\n    {props.category ? icons[props.category.toLowerCase()] : ''}\n  </span>);\n}\n","import React from 'react';\nimport StatsTable from './StatsTable';\nimport StatBadge from './StatBadge';\nimport AbilityList from './AbilityList';\nimport PsychicPowerList from './PsychicPowerList';\nimport WeaponList from './WeaponList';\nimport Phase from './Phase';\nimport { SpecialistIcon } from './SpecialistIcon';\nimport { CategoryIcon } from './CategoryIcon';\nimport { Badge, Row, Col } from 'react-bootstrap'\n\nimport { Model } from '../types';\n\ntype Props = {\n  model: Model\n};\n\nfunction Datasheet(props: Props) {\n  const headingStyle = {\n    background: 'black',\n    color: 'white',\n    padding: '10px',\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-between',\n  }\n  return (\n    <div className=\"model\" style={{\n      pageBreakBefore: \"always\",\n    }}>\n      <h1 style={headingStyle}>\n        <Col>\n          {props.model.category === \"Specialist\" && <SpecialistIcon specialism={props.model.specialism} />}\n          {props.model.category && <CategoryIcon category={props.model.category} />}\n          <strong>{props.model.type}</strong>\n          {props.model.category &&\n            (props.model.category === \"Specialist\"\n              ? ` (${[props.model.specialism, props.model.category].join(' ')})`\n              : ` (${props.model.category})`)\n          }\n        </Col>\n        <Col style={{flexGrow: 0, textAlign: 'right'}}>\n          <small>{props.model.points}pts</small>\n        </Col>\n      </h1>\n      <div>\n        <Badge pill variant=\"danger\" style={{\n          textTransform: \"uppercase\",\n          marginRight: \"10px\",\n        }}>\n          {props.model.faction}\n        </Badge>\n        {props.model.keywords.map((keyword: string) => (\n          <Badge pill variant=\"primary\" style={{\n            textTransform: \"uppercase\",\n            marginRight: \"10px\",\n          }}>\n            {keyword}\n          </Badge>\n        ))}\n      </div>\n      {props.model.name && <div>Name: <strong>{props.model.name}</strong></div>}\n      {props.model.category === \"Commander\" && <div>Commander specialism: <strong>{props.model.specialism}</strong></div>}\n      <StatsTable {...props.model.stats}/>\n      <AbilityList abilities={props.model.abilities} phase=''/>\n      <Phase name=\"movement\">\n        <Row>\n          <Col sm='1'>\n            <StatBadge name=\"M\" value={`${props.model.stats.movement}\"`}/>\n          </Col>\n          <Col>\n            <AbilityList abilities={props.model.abilities} phase='movement'/>\n          </Col>\n        </Row>\n      </Phase>\n      { (props.model.psychicPowers.length > 0 || (props.model.abilities.filter((x) => (x.phases.indexOf(\"psychic\") >= 0))).length > 0) &&\n        <Phase name=\"psychic\">\n          <PsychicPowerList powers={props.model.psychicPowers}/>\n          <AbilityList abilities={props.model.abilities} phase='psychic'/>\n        </Phase>\n      }\n      { !isNaN(props.model.stats.ballistic_skill) &&\n      <Phase name=\"shooting\">\n        <Row>\n          <Col sm='1'>\n            <StatBadge name=\"BS\" value={`${props.model.stats.ballistic_skill}+`}/>\n          </Col>\n          <Col>\n            <WeaponList weapons={props.model.weapons} phase='shooting' userStrength={props.model.stats.strength}/>\n            <AbilityList abilities={props.model.abilities} phase='shooting'/>\n          </Col>\n        </Row>\n      </Phase>\n      }\n      <Phase name=\"fight\">\n        <Row>\n          <Col sm='1'>\n            <StatBadge name=\"A\" value={`${props.model.stats.attacks}`}/>\n            <StatBadge name=\"WS\" value={`${props.model.stats.weapon_skill}+`}/>\n          </Col>\n          <Col>\n            <WeaponList weapons={props.model.weapons} phase='fight' userStrength={props.model.stats.strength}/>\n            <AbilityList abilities={props.model.abilities} phase='fight'/>\n          </Col>\n        </Row>\n      </Phase>\n      <Phase name=\"morale\">\n        <Row>\n          <Col sm='1'>\n            <StatBadge name=\"Ld\" value={`${props.model.stats.leadership}`}/>\n          </Col>\n          <Col>\n        <AbilityList abilities={props.model.abilities} phase='morale'/>\n           </Col>\n        </Row>\n      </Phase>\n    </div>\n  );\n}\n\nexport default Datasheet;\n","import React from 'react';\nimport { Model } from '../types';\nimport Datasheet from './Datasheet'\n\nconst _ = require('lodash')\n\ntype Props = {\n  models: Model[],\n};\n\nfunction Roster(props: Props) {\n  // Display models sorted by category and type\n  return <>\n    {_.sortBy(props.models, (x: Model) => ([x.category == null, x.category, x.type])).map((model: Model) => (\n      <Datasheet model={model} key={model.hash} />\n    ))}\n  </>\n}\n\nexport default Roster;\n","const DOMParser = require('xmldom').DOMParser\nconst xpath = require('xpath-ts').useNamespaces({ roster: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst _ = require('lodash')\nconst hash = require('node-object-hash')([])\n\nconst stat = (name, model) => {\n  const nodes = xpath(`roster:profiles/roster:profile[@typeName='Model']//roster:characteristic[@name='${name}']`, model)\n  if (nodes.length > 0) {\n    return parseInt(nodes[0].childNodes[0].nodeValue)\n  } else { return '' }\n}\n\nconst weaponStat = (name, weapon, numeric) => {\n  const nodes = xpath(`roster:characteristics/roster:characteristic[@name='${name}']`, weapon)\n  if (nodes.length > 0) {\n    return numeric ? parseInt(nodes[0].childNodes[0].nodeValue) : nodes[0].childNodes[0].nodeValue\n  } else { return '' }\n}\n\nconst points = (model) => {\n  const costNode = xpath('.//roster:costs/roster:cost[@name=\\'pts\\']', model)\n  return _.sumBy(costNode, (x) => parseInt(x.getAttribute('value')))\n}\n\nconst calculatePhases = (description) => {\n  const phases = []\n  if (/ attacks characteristic/i.test(description)) { phases.push('fight') }\n  if (/ ranged /i.test(description)) { phases.push('shooting') }\n  if (/ fight phase/i.test(description)) { phases.push('fight') }\n  if (/ charge /i.test(description)) { phases.push('movement') }\n  if (/ advance /i.test(description)) { phases.push('movement') }\n  if (/ move /i.test(description)) { phases.push('movement') }\n  if (/ psychic /i.test(description)) { phases.push('psychic') }\n  if (/ shoot/i.test(description)) { phases.push('shooting') }\n  if (/ nerve /i.test(description)) { phases.push('morale') }\n  if (/ leadership /i.test(description)) { phases.push('morale') }\n  return phases\n}\n\nconst parseForceRule = (rule) => {\n  const description = xpath('roster:description', rule)[0].childNodes[0].nodeValue\n  return {\n    name: rule.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parseAbility = (ability) => {\n  const description = xpath(\"roster:characteristics/roster:characteristic[@name='Description']\", ability)[0].childNodes[0].nodeValue\n  return {\n    name: ability.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parseWeapon = (weapon, userStrength) => {\n  let strength = weaponStat('S', weapon, false)\n  if (strength === 'User') {\n    strength = userStrength\n  }\n  let match = /x([0-9]+)/i.exec(strength)\n  if (match) {\n    strength = userStrength * parseInt(match[1])\n  }\n  match = /\\+([0-9]+)/i.exec(strength)\n  if (match) {\n    strength = userStrength + parseInt(match[1])\n  }\n  return {\n    name: weapon.getAttribute('name'),\n    range: weaponStat('Range', weapon, true),\n    type: weaponStat('Type', weapon, false),\n    strength,\n    armourPiercing: weaponStat('AP', weapon, true),\n    damage: weaponStat('D', weapon, false),\n    abilities: weaponStat('Abilities', weapon, false)\n  }\n}\n\nconst parseWargear = (wargear) => {\n  const description = xpath(\"roster:characteristics/roster:characteristic[@name='Ability']\", wargear)[0].childNodes[0].nodeValue\n  return {\n    name: wargear.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parsePsychicPower = (power) => {\n  let description = xpath(\"roster:characteristics/roster:characteristic[@name='Psychic Power']\", power)[0].childNodes[0].nodeValue\n  const warpChargeDescription = description.match(/warp charge value of ([0-9]+)\\.(.*)/)\n  let charge = null\n  if (warpChargeDescription.length > 2) {\n    charge = parseInt(warpChargeDescription[1])\n    description = warpChargeDescription[2]\n  }\n  return {\n    name: power.getAttribute('name'),\n    charge,\n    description\n  }\n}\n\nconst parseModel = (model) => {\n  const stats = {\n    movement: stat('M', model),\n    weapon_skill: stat('WS', model),\n    ballistic_skill: stat('BS', model),\n    strength: stat('S', model),\n    toughness: stat('T', model),\n    wounds: stat('W', model),\n    attacks: stat('A', model),\n    leadership: stat('Ld', model),\n    save: stat('Sv', model)\n  }\n  const closeCombatWeapon = {\n    name: 'Bare fists',\n    range: '-',\n    type: 'Melee',\n    strength: stats.strength,\n    armourPiercing: 0,\n    damage: 1,\n    abilities: 'Default close combat weapon available to all models'\n  }\n  const forceRules = xpath('//roster:force/roster:rules/roster:rule', model).map(parseForceRule)\n  const wargear = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Wargear']\", model).map(parseWargear)\n  const upgrades = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility)\n  const abilities = xpath(\"roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility).concat(forceRules).concat(wargear).concat(upgrades)\n  const weapons = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Weapon']\", model).map((x) => (parseWeapon(x, stats.strength))).concat([closeCombatWeapon])\n  const specialismSelection = xpath('roster:selections/roster:selection[roster:selections/roster:selection/roster:profiles]', model)\n  const specialistAbilities = xpath(\"roster:selections/roster:selection/roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility)\n  const psychicPowers = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Psychic Power']\", model).map(parsePsychicPower)\n  const category = xpath(\"roster:categories/roster:category[@primary='true']\", model)[0].getAttribute('name')\n  const faction = xpath(\"roster:categories/roster:category[@primary='false' and starts-with(@name,'Faction: ')]\", model)\n  let keywords = xpath(\"roster:categories/roster:category[@primary='false' and not(starts-with(@name,'Faction: '))]\", model).map((x) => x.getAttribute('name'));\n  _.remove(keywords, (x) => (x === \"Model\"))\n  const details = {\n    name: model.getAttribute('customName'),\n    type: model.getAttribute('name'),\n    category: category === 'Non-specialist' ? null : category,\n    stats,\n    abilities: abilities.concat(specialistAbilities),\n    weapons,\n    psychicPowers,\n    specialism: specialismSelection.length > 0 ? specialismSelection[0].getAttribute('name') : null,\n    faction: faction.length > 0 ? faction[0].getAttribute('name').split(': ', 2)[1] : null,\n    keywords,\n    points: points(model)\n  }\n  return { ...details, hash: hash.hash(details) }\n}\n\nexport const parseBattlescribeXML = (xml) => {\n  var models = []\n  var doc = new DOMParser().parseFromString(xml)\n  for (const category of xpath('//roster:force/roster:categories/roster:category', doc)) {\n    const categoryId = category.getAttribute('entryId')\n    for (const model of xpath(`//roster:selection[@type='model' and roster:categories/roster:category/@entryId='${categoryId}']`, doc)) {\n      models.push(parseModel(model))\n    }\n  }\n  return _.uniqBy(models, (m) => m.hash)\n}\n","import { parseBattlescribeXML } from './BattlescribeParser'\n\nconst JSZip = require('jszip')\n\nconst unzip = (file) => {\n  if (file[0] !== 'P') { return Promise.resolve(file) } else {\n    const jszip = new JSZip()\n    return jszip.loadAsync(file)\n      .then((zip) => (\n        zip.file(/[^/]+\\.ros/)[0].async('string') // Get roster files that are in the root\n      ))\n  }\n}\n\nconst parseFile = (file) => (\n  unzip(file).then(parseBattlescribeXML)\n)\n\nexport const loadFile = async (file) => {\n  const reader = new FileReader()\n  return new Promise((resolve, reject) => {\n    reader.onerror = () => {\n      reader.abort()\n      reject(new DOMException('Problem parsing input file.'))\n    }\n    reader.onloadend = async () => {\n      resolve(parseFile(reader.result))\n    }\n    reader.readAsBinaryString(file)\n  })\n}\n\nexport const loadFiles = (files) => {\n  return loadFile(files[0])\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react'\nimport Homepage from './components/Homepage'\nimport Roster from './components/Roster'\nimport { Container } from 'react-bootstrap'\nimport { loadFiles } from './FileLoader'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      models: []\n    }\n\n    this.handleUpload = (acceptedFiles) => {\n      loadFiles(acceptedFiles).then((models) => {\n        this.setState({ models })\n      })\n    }\n  }\n\n  render () {\n    return (\n      <Container>\n        {this.state.models.length === 0\n          ? <Homepage onUpload={this.handleUpload} />\n          : <Roster models={this.state.models} />}\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// Enable offline use with a service worker\n// See https://create-react-app.dev/docs/making-a-progressive-web-app/\nserviceWorker.register()\n"],"sourceRoot":""}