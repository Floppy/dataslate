{"version":3,"sources":["StatsTable.tsx","AbilityList.tsx","WeaponList.tsx","Phase.tsx","SpecialistIcon.tsx","CategoryIcon.tsx","Datasheet.tsx","Intro.tsx","App.js","serviceWorker.js","index.js"],"names":["StatsTable","props","Table","striped","bordered","movement","weapon_skill","isNaN","ballistic_skill","strength","toughness","wounds","attacks","leadership","save","AbilityList","abilities","phase","filter","x","phases","indexOf","length","map","name","description","WeaponList","weapons","range","type","userStrength","damage","armourPiercing","Phase","style","textTransform","children","SpecialistIcon","className","specialism","toLowerCase","CategoryIcon","category","Datasheet","pageBreakAfter","model","Badge","variant","pill","marginRight","faction","keywords","keyword","stats","Intro","Alert","href","_","require","hash","DOMParser","xpath","useNamespaces","roster","JSZip","stat","nodes","parseInt","childNodes","nodeValue","weaponStat","weapon","numeric","parseAbility","ability","test","push","getAttribute","parseWeapon","parseModel","specialismSelection","console","log","specialistAbilities","concat","split","App","unzip","file","Promise","resolve","loadAsync","then","zip","async","parseFile","event","target","result","xml","models","doc","parseFromString","categoryId","setState","uniqBy","handleDrop","acceptedFiles","forEach","reader","FileReader","onabort","onerror","onloadend","readAsBinaryString","state","Container","this","onDrop","accept","getRootProps","getInputProps","textAlign","sortBy","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0WAqCeA,MAjCf,SAAqBC,GACnB,OACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,GACrB,+BACE,4BACE,iCACA,kCACA,kCACA,iCACA,iCACA,iCACA,iCACA,kCACA,oCAGJ,+BACE,4BACE,4BAAKH,EAAMI,SAAX,KACA,4BAAKJ,EAAMK,aAAX,KACA,4BAAKC,MAAMN,EAAMO,iBAAmB,IAAMP,EAAMO,gBAAgB,KAChE,4BAAKP,EAAMQ,UACX,4BAAKR,EAAMS,WACX,4BAAKT,EAAMU,QACX,4BAAKV,EAAMW,SACX,4BAAKX,EAAMY,YACX,4BAAKZ,EAAMa,KAAX,SCIKC,MAzBf,SAAqBd,GACnB,IAAMe,EAAYf,EAAMgB,MACtBhB,EAAMe,UAAUE,QAAO,SAACC,GAAD,OAAQA,EAAEC,OAAOC,QAAQpB,EAAMgB,QAAU,KAChEhB,EAAMe,UAAUE,QAAO,SAACC,GAAD,OAA4B,IAApBA,EAAEC,OAAOE,UAE1C,OAA4B,IAArBN,EAAUM,OAAe,qCAC9B,kBAACpB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,GACrB,+BACE,4BACE,uCACA,6CAGJ,+BACGY,EAAUO,KAAI,SAACJ,GAAD,OACb,4BACE,4BAAKA,EAAEK,MACP,4BAAKL,EAAEM,oBCmBJC,MAnCf,SAAoBzB,GAClB,IAAM0B,EAA0B,aAAhB1B,EAAMgB,MAClBhB,EAAM0B,QAAQT,QAAO,SAACC,GAAD,OAAQZ,MAAMY,EAAES,UACrC3B,EAAM0B,QAAQT,QAAO,SAACC,GAAD,OAAOZ,MAAMY,EAAES,UAExC,OAA0B,IAAnBD,EAAQL,OAAe,qCAC5B,kBAACpB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,GACrB,+BACE,4BACE,sCACiB,aAAhBH,EAAMgB,OAAwB,qCACd,aAAhBhB,EAAMgB,OAAwB,oCAC/B,iCACA,iCACA,kCACA,2CAGJ,+BACGU,EAAQJ,KAAI,SAACJ,GAAD,OACX,4BACE,4BAAKA,EAAEK,MACU,aAAhBvB,EAAMgB,OAAwB,4BAAKE,EAAES,MAAP,KACd,aAAhB3B,EAAMgB,OAAwB,4BAAKE,EAAEU,MACtC,4BAAKtB,MAAMY,EAAEV,UAAYR,EAAM6B,aAAeX,EAAEV,UAChD,4BAAKU,EAAEY,QACP,4BAAKZ,EAAEa,gBACP,4BAAKb,EAAEH,kBCnBJiB,MAXf,SAAehC,GACb,OAAO,oCACL,wBAAIiC,MAAO,CACTC,cAAe,eAEdlC,EAAMuB,MAERvB,EAAMmC,WCRJ,SAASC,EAAepC,GAwB7B,OAAQ,0BAAMqC,UAAU,cArBpB,CACF,OAAU,eACV,MAAS,eACT,YAAe,eACf,SAAY,eACZ,UAAa,qBACb,MAAS,eACT,WAAc,eACd,UAAa,eACb,MAAS,eACT,MAAS,eACT,OAAU,eACV,MAAS,eACT,SAAY,eACZ,QAAW,eACX,WAAc,qBACd,SAAY,eACZ,OAAU,eACV,QAAW,SACX,OAAU,gBAGHrC,EAAMsC,WAAWC,gBCzBrB,SAASC,EAAaxC,GAQ3B,OAAQ,0BAAMqC,UAAU,YALpB,CACF,UAAa,eACb,OAAU,eACV,WAAc,IAGPrC,EAAMyC,SAASF,gB,aCmEXG,MAnEf,SAAmB1C,GACjB,OACE,yBAAKqC,UAAU,QAAQJ,MAAO,CAC5BU,eAAgB,WAEhB,4BAC6B,cAAzB3C,EAAM4C,MAAMH,UAAqD,WAAzBzC,EAAM4C,MAAMH,SAElD,kBAACI,EAAA,EAAD,CAAOC,QAAQ,WACb,kBAACN,EAAD,CAAcC,SAAUzC,EAAM4C,MAAMH,WACnC,IACAzC,EAAM4C,MAAMH,UAIbzC,EAAM4C,MAAMN,YACV,kBAACO,EAAA,EAAD,CAAOC,QAAQ,WACb,kBAACV,EAAD,CAAgBE,WAAYtC,EAAM4C,MAAMN,aACvC,IACAtC,EAAM4C,MAAMN,YAItB,IACAtC,EAAM4C,MAAMhB,KACZ5B,EAAM4C,MAAMrB,MAAQ,yCAAI,4BAAKvB,EAAM4C,MAAMrB,QAG5C,6BACE,kBAACsB,EAAA,EAAD,CAAOE,MAAI,EAACD,QAAQ,SAASb,MAAO,CAClCC,cAAe,YACfc,YAAa,SAEZhD,EAAM4C,MAAMK,SAEdjD,EAAM4C,MAAMM,SAAS5B,KAAI,SAAC6B,GAAD,OACxB,kBAACN,EAAA,EAAD,CAAOE,MAAI,EAACD,QAAQ,UAAUb,MAAO,CACnCC,cAAe,YACfc,YAAa,SAEZG,OAIP,kBAAC,EAAenD,EAAM4C,MAAMQ,OAC5B,kBAAC,EAAD,CAAarC,UAAWf,EAAM4C,MAAM7B,UAAWC,MAAM,KACrD,kBAAC,EAAD,CAAOO,KAAK,YACV,kBAAC,EAAD,CAAaR,UAAWf,EAAM4C,MAAM7B,UAAWC,MAAM,cAEvD,kBAAC,EAAD,CAAOO,KAAK,WACV,kBAAC,EAAD,CAAaR,UAAWf,EAAM4C,MAAM7B,UAAWC,MAAM,aAEvD,kBAAC,EAAD,CAAOO,KAAK,YACV,kBAAC,EAAD,CAAYG,QAAS1B,EAAM4C,MAAMlB,QAASV,MAAM,WAAWa,aAAc7B,EAAM4C,MAAMQ,MAAM5C,WAC3F,kBAAC,EAAD,CAAaO,UAAWf,EAAM4C,MAAM7B,UAAWC,MAAM,cAEvD,kBAAC,EAAD,CAAOO,KAAK,SACV,kBAAC,EAAD,CAAYG,QAAS1B,EAAM4C,MAAMlB,QAASV,MAAM,QAAQa,aAAc7B,EAAM4C,MAAMQ,MAAM5C,WACxF,kBAAC,EAAD,CAAaO,UAAWf,EAAM4C,MAAM7B,UAAWC,MAAM,WAEvD,kBAAC,EAAD,CAAOO,KAAK,UACV,kBAAC,EAAD,CAAaR,UAAWf,EAAM4C,MAAM7B,UAAWC,MAAM,c,kBClD9CqC,MAvBf,WACE,OAAO,oCACL,0CAGA,uBAAGhB,UAAU,QAAb,mDAGA,4BACE,wEACA,uDACA,oEACA,uDAEF,kBAACiB,EAAA,EAAD,CAAOR,QAAQ,UAAf,yHAGQ,uBAAGS,KAAK,+CAAR,aAHR,gD,SCVEC,EAAIC,EAAQ,KACZC,EAAOD,EAAQ,IAARA,CAA4B,IACnCE,EAAYF,EAAQ,KAAUE,UAC9BC,EAAQH,EAAQ,KAASI,cAAc,CAAEC,OAAQ,oDACjDC,EAAQN,EAAQ,KAEhBO,EAAO,SAACzC,EAAMqB,GAClB,IAAMqB,EAAQL,EAAM,mFAAD,OAAoFrC,EAApF,MAA8FqB,GACjH,OAAIqB,EAAM5C,OAAS,EACV6C,SAASD,EAAM,GAAGE,WAAW,GAAGC,WACzB,IAGZC,EAAa,SAAC9C,EAAM+C,EAAQC,GAChC,IAAMN,EAAQL,EAAM,uDAAD,OAAwDrC,EAAxD,MAAkE+C,GACrF,OAAIL,EAAM5C,OAAS,EACVkD,EAAUL,SAASD,EAAM,GAAGE,WAAW,GAAGC,WAAaH,EAAM,GAAGE,WAAW,GAAGC,UACvE,IAGZI,EAAe,SAACC,GACpB,IAAMjD,EAAcoC,EAAM,oEAAqEa,GAAS,GAAGN,WAAW,GAAGC,UACnHjD,EAAS,GAef,MAdI,WAAWuD,KAAKlD,IAClBL,EAAOwD,KAAK,SACV,UAAUD,KAAKlD,IACjBL,EAAOwD,KAAK,YACV,WAAWD,KAAKlD,IAClBL,EAAOwD,KAAK,YACV,QAAQD,KAAKlD,IACfL,EAAOwD,KAAK,YACV,WAAWD,KAAKlD,IAClBL,EAAOwD,KAAK,WACV,SAASD,KAAKlD,IAChBL,EAAOwD,KAAK,YACV,SAASD,KAAKlD,IAChBL,EAAOwD,KAAK,UACP,CACLpD,KAAMkD,EAAQG,aAAa,QAC3BpD,cACAL,WAIE0D,EAAc,SAACP,GAAD,MAAa,CAC/B/C,KAAM+C,EAAOM,aAAa,QAC1BjD,MAAO0C,EAAW,QAASC,GAAQ,GACnC1C,KAAMyC,EAAW,OAAQC,GAAQ,GACjC9D,SAAU6D,EAAW,IAAKC,GAAQ,GAClCvC,eAAgBsC,EAAW,KAAMC,GAAS,GAC1CxC,OAAQuC,EAAW,IAAKC,GAAQ,GAChCvD,UAAWsD,EAAW,YAAaC,GAAQ,KAGvCQ,EAAa,SAAClC,GAClB,IAAM7B,EAAY6C,EAAM,sDAAuDhB,GAAOtB,IAAIkD,GACpF9C,EAAUkC,EAAM,wFAAyFhB,GAAOtB,IAAIuD,GACpHE,EAAsBnB,EAAM,yFAA0FhB,GAC5HoC,QAAQC,IAAIF,GACZ,IAAMG,EAAsBtB,EAAM,4HAA6HhB,GAAOtB,IAAIkD,GACpK/B,EAAWmB,EAAM,qDAAsDhB,GAAO,GAAGgC,aAAa,QAC9F3B,EAAUW,EAAM,yFAA0FhB,GAChH,MAAO,CACLrB,KAAMqB,EAAMgC,aAAa,cACzBhD,KAAMgB,EAAMgC,aAAa,QACzBnC,SAAuB,mBAAbA,EAAgC,2CAA6CA,EACvFW,MAAO,CACLhD,SAAU4D,EAAK,IAAKpB,GACpBvC,aAAc2D,EAAK,KAAMpB,GACzBrC,gBAAiByD,EAAK,KAAMpB,GAC5BpC,SAAUwD,EAAK,IAAKpB,GACpBnC,UAAWuD,EAAK,IAAKpB,GACrBlC,OAAQsD,EAAK,IAAKpB,GAClBjC,QAASqD,EAAK,IAAKpB,GACnBhC,WAAYoD,EAAK,KAAMpB,GACvB/B,KAAMmD,EAAK,KAAMpB,IAEnB7B,UAAWA,EAAUoE,OAAOD,GAC5BxD,UACAY,WAAYyC,EAAoB1D,OAAS,EAAI0D,EAAoB,GAAGH,aAAa,QAAU,KAC3F3B,QAASA,EAAQ5B,OAAS,EAAI4B,EAAQ,GAAG2B,aAAa,QAAQQ,MAAM,KAAK,GAAG,GAAK,KACjFlC,SAAUU,EAAM,8FAA+FhB,GAAOtB,KAAI,SAACJ,GAAD,OAAOA,EAAE0D,aAAa,aAkFrIS,E,YA7Eb,WAAarF,GAAQ,IAAD,8BAClB,4CAAMA,KAMRsF,MAAQ,SAACC,GACP,MAAgB,MAAZA,EAAK,GACAC,QAAQC,QAAQF,IAET,IAAIxB,GACL2B,UAAUH,GACtBI,MAAK,SAACC,GAAD,OACJA,EAAIL,KAAK,cAAc,GAAGM,MAAM,cAdlB,EAmBpBC,UAAY,SAACC,GACX,EAAKT,MAAMS,EAAMC,OAAOC,QACrBN,MAAK,SAACO,GACL,IAAIC,EAAS,GACTC,GAAM,IAAIzC,GAAY0C,gBAAgBH,GAF7B,uBAGb,YAAuBtC,EAAM,mDAAoDwC,GAAjF,+CAAuF,CAAC,IAChFE,EAD+E,QACzD1B,aAAa,WAD4C,uBAErF,YAAoBhB,EAAM,oFAAD,OAAqF0C,EAArF,MAAqGF,GAA9H,+CAAoI,CAAC,IAA1HxD,EAAyH,QAClIuD,EAAOxB,KAAKG,EAAWlC,KAH4D,oFAH1E,kFASb,EAAK2D,SAAS,CAAEJ,OAAQ3C,EAAEgD,OAAOL,EAAQzC,EAAKA,YA9BhC,EAkCpB+C,WAAa,SAACC,GACZA,EAAcC,SAAQ,SAACpB,GACrB,IAAMqB,EAAS,IAAIC,WACnBD,EAAOE,QAAU,kBAAM9B,QAAQC,IAAI,6BACnC2B,EAAOG,QAAU,kBAAM/B,QAAQC,IAAI,4BACnC2B,EAAOI,UAAY,EAAKlB,UACxBc,EAAOK,mBAAmB1B,OAtC5B,EAAK2B,MAAQ,CACXf,OAAQ,IAHQ,E,sEA6ClB,OACE,kBAACgB,EAAA,EAAD,KACiC,IAA7BC,KAAKF,MAAMf,OAAO9E,QAClB,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAUgG,OAAQD,KAAKX,WAAYa,OAAO,eACvC,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACC,kBAAClE,EAAA,EAAD,eAAOR,QAAQ,QAAWyE,IAA1B,CAA0CtF,MAAO,CAACwF,UAAW,YAC3D,0BAAWD,KACX,4FACA,2BAAG,gEAIT,iGACgE,uBAAGjE,KAAK,wCAAR,aADhE,MAKF6D,KAAKF,MAAMf,OAAO9E,OAAS,GAE3B,oCACGmC,EAAEkE,OAAON,KAAKF,MAAMf,QAAQ,SAACjF,GAAD,MAAQ,CAAe,MAAdA,EAAEuB,SAAkBvB,EAAEuB,SAAUvB,EAAEU,SAAQN,KAAI,SAACsB,GAAD,OAClF,kBAAC,EAAD,CAAWA,MAAOA,EAAO+E,IAAKjE,EAAKA,KAAKd,c,GArEpCgF,IAAMC,WChFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.c09c3fe4.chunk.js","sourcesContent":["import React from 'react'\nimport { ModelStats } from './types'\nimport { Table } from 'react-bootstrap'\n\nfunction StatsTable (props: ModelStats) {\n  return (\n    <Table striped bordered>\n      <thead>\n        <tr>\n          <th>M</th>\n          <th>WS</th>\n          <th>BS</th>\n          <th>S</th>\n          <th>T</th>\n          <th>W</th>\n          <th>A</th>\n          <th>Ld</th>\n          <th>Sv</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{props.movement}&quot;</td>\n          <td>{props.weapon_skill}+</td>\n          <td>{isNaN(props.ballistic_skill) ? '-' : props.ballistic_skill+\"+\"}</td>\n          <td>{props.strength}</td>\n          <td>{props.toughness}</td>\n          <td>{props.wounds}</td>\n          <td>{props.attacks}</td>\n          <td>{props.leadership}</td>\n          <td>{props.save}+</td>\n        </tr>\n      </tbody>\n    </Table>\n  )\n}\n\nexport default StatsTable\n","import React from 'react';\nimport { Ability } from './types';\nimport { Table } from 'react-bootstrap';\n\ntype Props = {\n  abilities: Ability[],\n  phase: string,\n};\n\nfunction AbilityList(props: Props) {\n  const abilities = props.phase ?\n    props.abilities.filter((x) => (x.phases.indexOf(props.phase) >= 0)) :\n    props.abilities.filter((x) => (x.phases.length === 0))\n\n  return abilities.length === 0 ? <></> : (\n    <Table striped bordered>\n      <thead>\n        <tr>\n          <th>Ability</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {abilities.map((x) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AbilityList;\n","import React from 'react';\nimport { Weapon } from './types';\nimport { Table } from 'react-bootstrap';\n\ntype Props = {\n  weapons: Weapon[],\n  phase: string,\n  userStrength: number,\n};\n\nfunction WeaponList(props: Props) {\n  const weapons = props.phase === 'shooting'\n    ? props.weapons.filter((x) => !isNaN(x.range))\n    : props.weapons.filter((x) => isNaN(x.range))\n\n  return weapons.length === 0 ? <></> : (\n    <Table striped bordered>\n      <thead>\n        <tr>\n          <th>Weapon</th>\n          {props.phase === \"shooting\" && <th>Range</th>}\n          {props.phase === \"shooting\" && <th>Type</th>}\n          <th>S</th>\n          <th>D</th>\n          <th>AP</th>\n          <th>Abilities</th>\n        </tr>\n      </thead>\n      <tbody>\n        {weapons.map((x) => (\n          <tr>\n            <td>{x.name}</td>\n            {props.phase === \"shooting\" && <td>{x.range}&quot;</td>}\n            {props.phase === \"shooting\" && <td>{x.type}</td>}\n            <td>{isNaN(x.strength) ? props.userStrength : x.strength}</td>\n            <td>{x.damage}</td>\n            <td>{x.armourPiercing}</td>\n            <td>{x.abilities}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default WeaponList;\n","import React from 'react';\n\ntype Props = {\n  name: string,\n  children: React.ReactNode,\n};\n\nfunction Phase(props: Props) {\n  return <>\n    <h2 style={{\n      textTransform: \"capitalize\"\n    }}>\n      {props.name}\n    </h2>\n    {props.children}\n  </>\n}\n\nexport default Phase;\n","import React from 'react';\n\ntype Props = {\n  specialism: string;\n};\n\nexport function SpecialistIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'combat': '🤜',\n    'comms': '📻',\n    'demolitions': '💣',\n    'ferocity': '🦖',\n    'fortitude': '🛡️',\n    'heavy': '💥',\n    'leadership': '💀',\n    'logistics': '🚚',\n    'medic': '⚕️',\n    'melee': '🤜',\n    'psyker': '🧠',\n    'scout': '🔦',\n    'shooting': '🔫',\n    'stealth': '👻',\n    'strategist': '🗺️',\n    'strength': '💪',\n    'sniper': '🎯',\n    'veteran': '⭐',\n    'zealot': '😤'\n  };\n  return (<span className='specialism'>\n    {icons[props.specialism.toLowerCase()]}\n  </span>);\n}\n","import React from 'react';\n\ntype Props = {\n  category: string;\n};\n\nexport function CategoryIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'commander': '👑',\n    'leader': '💀',\n    'specialist': '',\n  };\n  return (<span className='category'>\n    {icons[props.category.toLowerCase()]}\n  </span>);\n}\n","import React from 'react';\nimport StatsTable from './StatsTable';\nimport AbilityList from './AbilityList';\nimport WeaponList from './WeaponList';\nimport Phase from './Phase';\nimport { SpecialistIcon } from './SpecialistIcon';\nimport { CategoryIcon } from './CategoryIcon';\nimport { Badge } from 'react-bootstrap'\n\nimport { Model } from './types';\n\ntype Props = {\n  model: Model\n};\n\nfunction Datasheet(props: Props ) {\n  return (\n    <div className=\"model\" style={{\n      pageBreakAfter: \"always\",\n    }}>\n      <h1>\n        {(props.model.category === 'Commander' || props.model.category === 'Leader') ?\n          (\n            <Badge variant=\"warning\">\n              <CategoryIcon category={props.model.category} />\n              {' '}\n              {props.model.category}\n            </Badge>\n          )\n          : (\n              props.model.specialism &&\n                <Badge variant=\"warning\">\n                  <SpecialistIcon specialism={props.model.specialism} />\n                  {' '}\n                  {props.model.specialism}\n                </Badge>\n          )\n        }\n        {' '}\n        {props.model.type}\n        {props.model.name && <>: <em>{props.model.name}</em></>\n        }\n      </h1>\n      <div>\n        <Badge pill variant=\"danger\" style={{\n          textTransform: \"uppercase\",\n          marginRight: \"10px\",\n        }}>\n          {props.model.faction}\n        </Badge>\n        {props.model.keywords.map((keyword: string) => (\n          <Badge pill variant=\"primary\" style={{\n            textTransform: \"uppercase\",\n            marginRight: \"10px\",\n          }}>\n            {keyword}\n          </Badge>\n        ))}\n      </div>\n      <StatsTable {...props.model.stats}/>\n      <AbilityList abilities={props.model.abilities} phase=''/>\n      <Phase name=\"movement\">\n        <AbilityList abilities={props.model.abilities} phase='movement'/>\n      </Phase>\n      <Phase name=\"psychic\">\n        <AbilityList abilities={props.model.abilities} phase='psychic'/>\n      </Phase>\n      <Phase name=\"shooting\">\n        <WeaponList weapons={props.model.weapons} phase='shooting' userStrength={props.model.stats.strength}/>\n        <AbilityList abilities={props.model.abilities} phase='shooting'/>\n      </Phase>\n      <Phase name=\"fight\">\n        <WeaponList weapons={props.model.weapons} phase='fight' userStrength={props.model.stats.strength}/>\n        <AbilityList abilities={props.model.abilities} phase='fight'/>\n      </Phase>\n      <Phase name=\"morale\">\n        <AbilityList abilities={props.model.abilities} phase='morale'/>\n      </Phase>\n    </div>\n  );\n}\n\nexport default Datasheet;\n","import React from 'react';\nimport { Alert } from 'react-bootstrap'\n\nfunction Intro() {\n  return <>\n    <h1>\n      Scriptorum\n    </h1>\n    <p className='lead'>\n      Readable datasheets for Warhammer 40k Kill Team\n    </p>\n    <ul>\n      <li>Organises abilities and weapons by phase</li>\n      <li>Merges identical models</li>\n      <li>Prints out as one datasheet per page</li>\n      <li>Clear, readable layout</li>\n    </ul>\n    <Alert variant='danger'>\n      Scriptorum is a work in progress, but it should work,\n      so try it out! If you spot any problems, please create an\n      issue <a href='https://github.com/Floppy/scriptorum/issues'>on GitHub</a> and\n      include your roster file if possible.\n    </Alert>\n  </>\n}\n\nexport default Intro;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react'\nimport Datasheet from './Datasheet'\nimport Dropzone from 'react-dropzone'\nimport Intro from './Intro'\nimport { Container, Alert } from 'react-bootstrap'\n\nconst _ = require('lodash')\nconst hash = require('node-object-hash')([])\nconst DOMParser = require('xmldom').DOMParser\nconst xpath = require('xpath').useNamespaces({ roster: 'http://www.battlescribe.net/schema/rosterSchema' })\nconst JSZip = require('jszip')\n\nconst stat = (name, model) => {\n  const nodes = xpath(`roster:profiles/roster:profile[@typeName='Model']//roster:characteristic[@name='${name}']`, model)\n  if (nodes.length > 0) {\n    return parseInt(nodes[0].childNodes[0].nodeValue)\n  } else { return '' }\n}\n\nconst weaponStat = (name, weapon, numeric) => {\n  const nodes = xpath(`roster:characteristics/roster:characteristic[@name='${name}']`, weapon)\n  if (nodes.length > 0) {\n    return numeric ? parseInt(nodes[0].childNodes[0].nodeValue) : nodes[0].childNodes[0].nodeValue\n  } else { return '' }\n}\n\nconst parseAbility = (ability) => {\n  const description = xpath(\"roster:characteristics/roster:characteristic[@name='Description']\", ability)[0].childNodes[0].nodeValue\n  const phases = []\n  if (/attacks/i.test(description))\n    phases.push('fight')\n  if (/charge/i.test(description))\n    phases.push('movement')\n  if (/advance/i.test(description))\n    phases.push('movement')\n  if (/move/i.test(description))\n    phases.push('movement')\n  if (/psychic/i.test(description))\n    phases.push('psychic')\n  if (/shoot/i.test(description))\n    phases.push('shooting')\n  if (/nerve/i.test(description))\n    phases.push('morale')\n  return {\n    name: ability.getAttribute('name'),\n    description,\n    phases\n  }\n}\n\nconst parseWeapon = (weapon) => ({\n  name: weapon.getAttribute('name'),\n  range: weaponStat('Range', weapon, true),\n  type: weaponStat('Type', weapon, false),\n  strength: weaponStat('S', weapon, true),\n  armourPiercing: weaponStat('AP', weapon , true),\n  damage: weaponStat('D', weapon, false),\n  abilities: weaponStat('Abilities', weapon, false)\n})\n\nconst parseModel = (model) => {\n  const abilities = xpath(\"roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility)\n  const weapons = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Weapon']\", model).map(parseWeapon)\n  const specialismSelection = xpath(\"roster:selections/roster:selection[roster:selections/roster:selection/roster:profiles]\", model)\n  console.log(specialismSelection);\n  const specialistAbilities = xpath(\"roster:selections/roster:selection/roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility)\n  const category = xpath(\"roster:categories/roster:category[@primary='true']\", model)[0].getAttribute('name');\n  const faction = xpath(\"roster:categories/roster:category[@primary='false' and starts-with(@name,'Faction: ')]\", model);\n  return {\n    name: model.getAttribute('customName'),\n    type: model.getAttribute('name'),\n    category: category === 'Non-specialist' ? 'zzz-so-it-sorts-last-what-a-massive-hack' : category,\n    stats: {\n      movement: stat('M', model),\n      weapon_skill: stat('WS', model),\n      ballistic_skill: stat('BS', model),\n      strength: stat('S', model),\n      toughness: stat('T', model),\n      wounds: stat('W', model),\n      attacks: stat('A', model),\n      leadership: stat('Ld', model),\n      save: stat('Sv', model)\n    },\n    abilities: abilities.concat(specialistAbilities),\n    weapons,\n    specialism: specialismSelection.length > 0 ? specialismSelection[0].getAttribute('name') : null,\n    faction: faction.length > 0 ? faction[0].getAttribute('name').split(\": \",2)[1] : null,\n    keywords: xpath(\"roster:categories/roster:category[@primary='false' and not(starts-with(@name,'Faction: '))]\", model).map((x) => x.getAttribute('name'))\n  }\n}\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      models: []\n    }\n  }\n\n  unzip = (file) => {\n    if (file[0] !== 'P')\n      return Promise.resolve(file);\n    else {\n      const jszip = new JSZip()\n      return jszip.loadAsync(file)\n      .then((zip) => (\n        zip.file(/[^/]+\\.ros/)[0].async(\"string\") // Get roster files that are in the root\n      ));\n    }\n  }\n\n  parseFile = (event) => {\n    this.unzip(event.target.result)\n      .then((xml) => {\n        var models = []\n        var doc = new DOMParser().parseFromString(xml)\n        for (const category of xpath('//roster:force/roster:categories/roster:category', doc)) {\n          const categoryId = category.getAttribute('entryId')\n          for (const model of xpath(`//roster:selection[@type='model' and roster:categories/roster:category/@entryId='${categoryId}']`, doc)) {\n            models.push(parseModel(model))\n          }\n        }\n        this.setState({ models: _.uniqBy(models, hash.hash) })\n      });\n  };\n\n  handleDrop = (acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader()\n      reader.onabort = () => console.log('file reading was aborted')\n      reader.onerror = () => console.log('file reading has failed')\n      reader.onloadend = this.parseFile\n      reader.readAsBinaryString(file)\n    })\n  };\n\n  render () {\n    return (\n      <Container>\n        { this.state.models.length === 0 &&\n          <>\n            <Intro/>\n            <Dropzone onDrop={this.handleDrop} accept='.ros,.rosz'>\n              {({ getRootProps, getInputProps }) => (\n                <Alert variant=\"info\" {...getRootProps()} style={{textAlign: \"center\"}}>\n                  <input {...getInputProps()} />\n                  <p>Drop a Battlescribe roster file here, or click to select one.</p>\n                  <p><em>(*.rosz and *.ros accepted)</em></p>\n                </Alert>\n              )}\n            </Dropzone>\n            <footer>\n              Built with React and Bootstrap. Released as Open Source, code <a href='https://github.com/floppy/scriptorum'>on GitHub</a>.\n            </footer>\n          </>\n        }\n        { this.state.models.length > 0 &&\n          // Display models sorted by category and type\n          <>\n            {_.sortBy(this.state.models, (x) => ([x.category == null, x.category, x.type])).map((model) => (\n              <Datasheet model={model} key={hash.hash(model)} />\n            ))}\n          </>\n        }\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}