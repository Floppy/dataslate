{"version":3,"sources":["StatsTable.js","Model.js","App.js","serviceWorker.js","index.js"],"names":["StatsTable","props","movement","weapon_skill","ballistic_skill","strength","toughness","wounds","attacks","leadership","save","Model","className","model","type","name","stats","faction","xpath","require","dom","DOMParser","models","App","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","result","doc","parseFromString","nodes","select","readAsText","getRootProps","getInputProps","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KA+BeA,MA7Bf,SAAoBC,GAClB,OACE,+BACA,4BACE,4BAAK,KACL,4BAAK,MACL,4BAAK,MACL,4BAAK,KACL,4BAAK,KACL,4BAAK,KACL,4BAAK,KACL,4BAAK,MACL,4BAAK,OAEP,4BACE,4BAAKA,EAAMC,SAAX,KACA,4BAAKD,EAAME,aAAX,KACA,4BAAKF,EAAMG,gBAAX,KACA,4BAAKH,EAAMI,UACX,4BAAKJ,EAAMK,WACX,4BAAKL,EAAMM,QACX,4BAAKN,EAAMO,SACX,4BAAKP,EAAMQ,YACX,4BAAKR,EAAMS,KAAX,QCRSC,MAdf,SAAeV,GACb,OACE,yBAAKW,UAAU,SACb,4BACCX,EAAMY,MAAMC,KADb,KACqBb,EAAMY,MAAME,MAEjC,kBAAC,EAAed,EAAMY,MAAMG,OAC5B,0CACaf,EAAMY,MAAMI,W,OCR3BC,EAAQC,EAAQ,IAChBC,EAAMD,EAAQ,IAAUE,UAEtBC,EAAS,CACb,CACE,KAAQ,cACR,KAAQ,SACR,MAAS,CACP,SAAY,EACZ,aAAgB,EAChB,gBAAmB,EACnB,SAAY,EACZ,UAAa,EACb,OAAU,EACV,QAAW,EACX,WAAc,EACd,KAAQ,GAEV,QAAW,WACX,SAAY,CAAC,WAAY,SAAU,WAErC,CACE,KAAQ,MACR,KAAQ,aACR,MAAS,CACP,SAAY,EACZ,aAAgB,EAChB,gBAAmB,EACnB,SAAY,EACZ,UAAa,EACb,OAAU,EACV,QAAW,EACX,WAAc,EACd,KAAQ,GAEV,QAAW,WACX,SAAY,CAAC,WAAY,aAAc,YAwC5BC,MApCf,WACE,OACE,oCACE,kBAAC,IAAD,CAAUC,OAAQ,SAAAC,GAChBA,EAAcC,SAAQ,SAACC,GACrB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,4BACnCJ,EAAOM,OAAS,WACdH,QAAQC,IAAIJ,EAAOO,QACnB,IAAIC,GAAM,IAAIhB,GAAMiB,gBAAgBT,EAAOO,QACvCG,EAAQpB,EAAMqB,OAAO,UAAWH,GACpCL,QAAQC,IAAIM,IAEdV,EAAOY,WAAWb,SAGnB,gBAAEc,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,cAAhB,OACC,iCACE,wBAASD,IACP,0BAAWC,KACX,iFAMNpB,EAAOqB,KAAI,SAAC9B,GAAD,OACT,kBAAC,EAAD,CAAOA,MAAOA,SC3DJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1c5fb1c5.chunk.js","sourcesContent":["import React from 'react';\n\nfunction StatsTable(props) {\n  return (\n    <table>\n    <tr>\n      <th>{\"M\"}</th>\n      <th>{\"WS\"}</th>\n      <th>{\"BS\"}</th>\n      <th>{\"S\"}</th>\n      <th>{\"T\"}</th>\n      <th>{\"W\"}</th>\n      <th>{\"A\"}</th>\n      <th>{\"Ld\"}</th>\n      <th>{\"Sv\"}</th>\n    </tr>\n    <tr>\n      <td>{props.movement}&quot;</td>\n      <td>{props.weapon_skill}+</td>\n      <td>{props.ballistic_skill}+</td>\n      <td>{props.strength}</td>\n      <td>{props.toughness}</td>\n      <td>{props.wounds}</td>\n      <td>{props.attacks}</td>\n      <td>{props.leadership}</td>\n      <td>{props.save}+</td>\n    </tr>\n  </table>\n  );\n}\n\nexport default StatsTable;\n","import React from 'react';\nimport StatsTable from './StatsTable';\n\nfunction Model(props) {\n  return (\n    <div className=\"model\">\n      <h1>\n      {props.model.type}: {props.model.name}\n      </h1>\n      <StatsTable {...props.model.stats}/>\n      <div>\n        Keywords: {props.model.faction}\n      </div>\n    </div>\n  );\n}\n\nexport default Model;\n","import React from 'react';\nimport Model from './Model';\nimport Dropzone from 'react-dropzone';\nvar xpath = require('xpath')\n  , dom = require('xmldom').DOMParser\n\nconst models = [\n  {\n    \"name\": \"Deathleaper\",\n    \"type\": \"Lictor\",\n    \"stats\": {\n      \"movement\": 9,\n      \"weapon_skill\": 2,\n      \"ballistic_skill\": 4,\n      \"strength\": 6,\n      \"toughness\": 4,\n      \"wounds\": 4,\n      \"attacks\": 3,\n      \"leadership\": 9,\n      \"save\": 5\n    },\n    \"faction\": \"tyranids\",\n    \"keywords\": [\"infantry\", \"lictor\", \"kraken\"]\n  },\n  {\n    \"name\": \"Bob\",\n    \"type\": \"Hormagaunt\",\n    \"stats\": {\n      \"movement\": 8,\n      \"weapon_skill\": 4,\n      \"ballistic_skill\": 4,\n      \"strength\": 3,\n      \"toughness\": 3,\n      \"wounds\": 1,\n      \"attacks\": 2,\n      \"leadership\": 5,\n      \"save\": 6\n    },\n    \"faction\": \"tyranids\",\n    \"keywords\": [\"infantry\", \"hormagaunt\", \"kraken\"]\n  }\n];\n\nfunction App() {\n  return (\n    <>\n      <Dropzone onDrop={acceptedFiles => {\n        acceptedFiles.forEach((file) => {\n          const reader = new FileReader()\n          reader.onabort = () => console.log('file reading was aborted')\n          reader.onerror = () => console.log('file reading has failed')\n          reader.onload = () => {\n            console.log(reader.result);\n            var doc = new dom().parseFromString(reader.result);\n            var nodes = xpath.select(\"//force\", doc);\n            console.log(nodes);\n          }\n          reader.readAsText(file)\n        })}\n      }>\n        {({getRootProps, getInputProps}) => (\n          <section>\n            <div {...getRootProps()}>\n              <input {...getInputProps()} />\n              <p>Drop a .ros file here, or click to select one</p>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n      {\n        models.map((model) => (\n          <Model model={model}>\n          </Model>\n        ))\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}