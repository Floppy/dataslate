{"version":3,"sources":["components/Intro.tsx","components/Homepage.tsx","components/StatsTable.tsx","components/AbilityList.tsx","components/PsychicPowerList.tsx","components/WeaponList.tsx","components/Phase.tsx","components/SpecialistIcon.tsx","components/CategoryIcon.tsx","components/Datasheet.tsx","components/Roster.tsx","BattlescribeParser.js","FileLoader.js","App.jsx","serviceWorker.js","index.tsx"],"names":["Intro","className","Alert","variant","href","Homepage","props","onDrop","onUpload","accept","getRootProps","getInputProps","style","textAlign","StatsTable","Table","striped","bordered","movement","weapon_skill","isNaN","ballistic_skill","strength","toughness","wounds","attacks","leadership","save","_","require","AbilityList","abilities","phase","filter","x","phases","indexOf","length","sortBy","map","name","description","PsychicPowerList","powers","charge","WeaponList","weapons","range","push","NaN","type","armourPiercing","damage","userStrength","Phase","textTransform","children","SpecialistIcon","specialism","toLowerCase","CategoryIcon","category","Datasheet","pageBreakAfter","model","Badge","pill","marginRight","faction","keywords","keyword","points","stats","psychicPowers","hash","Roster","models","key","DOMParser","xpath","useNamespaces","roster","stat","nodes","parseInt","childNodes","nodeValue","weaponStat","weapon","numeric","costNode","sumBy","getAttribute","calculatePhases","test","parseForceRule","rule","parseAbility","ability","parseWeapon","parseWargear","wargear","parsePsychicPower","power","warpChargeDescription","match","parseModel","forceRules","concat","specialismSelection","specialistAbilities","split","parseBattlescribeXML","xml","doc","parseFromString","categoryId","uniqBy","JSZip","parseFile","file","Promise","resolve","loadAsync","then","zip","async","unzip","loadFiles","files","a","reader","FileReader","reject","onerror","abort","DOMException","onloadend","result","readAsBinaryString","loadFile","App","state","handleUpload","acceptedFiles","setState","Container","this","React","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.788812db.chunk.js","sourcesContent":["import React from 'react';\nimport { Alert } from 'react-bootstrap'\n\nfunction Intro() {\n  return <>\n    <h1>\n      Scriptorum\n    </h1>\n    <p className='lead'>\n      Readable datasheets for Warhammer 40k Kill Team\n    </p>\n    <ul>\n      <li>Organises abilities and weapons by phase</li>\n      <li>Merges identical models</li>\n      <li>Prints out as one datasheet per page</li>\n      <li>Clear, readable layout</li>\n    </ul>\n    <Alert variant='danger'>\n      Scriptorum is a work in progress, but it should work,\n      so try it out! If you spot any problems, please create an\n      issue <a href='https://github.com/Floppy/scriptorum/issues'>on GitHub</a> and\n      include your roster file if possible.\n    </Alert>\n  </>\n}\n\nexport default Intro;\n","import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport Intro from './Intro'\nimport { Alert } from 'react-bootstrap'\n\ntype Props = {\n  onUpload: any,\n}\n\nfunction Homepage(props: Props) {\n  return <>\n    <Intro />\n    <Dropzone onDrop={props.onUpload} accept='.ros,.rosz'>\n      {({ getRootProps, getInputProps }) => (\n        <Alert variant='info' {...getRootProps()} style={{ textAlign: 'center' }}>\n          <input {...getInputProps()} />\n          <p>Drop a Battlescribe roster file here, or click to select one.</p>\n          <p><em>(*.rosz and *.ros accepted)</em></p>\n        </Alert>\n      )}\n    </Dropzone>\n    <footer>\n      Built with React and Bootstrap. Released as Open Source, code <a href='https://github.com/floppy/scriptorum'>on GitHub</a>.\n    </footer>\n  </>\n}\n\nexport default Homepage;\n","import React from 'react'\nimport { ModelStats } from '../types'\nimport { Table } from 'react-bootstrap'\n\nfunction StatsTable (props: ModelStats) {\n  return (\n    <Table striped bordered>\n      <thead>\n        <tr>\n          <th>M</th>\n          <th>WS</th>\n          <th>BS</th>\n          <th>S</th>\n          <th>T</th>\n          <th>W</th>\n          <th>A</th>\n          <th>Ld</th>\n          <th>Sv</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{props.movement}&quot;</td>\n          <td>{props.weapon_skill}+</td>\n          <td>{isNaN(props.ballistic_skill) ? '-' : props.ballistic_skill+\"+\"}</td>\n          <td>{props.strength}</td>\n          <td>{props.toughness}</td>\n          <td>{props.wounds}</td>\n          <td>{props.attacks}</td>\n          <td>{props.leadership}</td>\n          <td>{props.save}+</td>\n        </tr>\n      </tbody>\n    </Table>\n  )\n}\n\nexport default StatsTable\n","import React from 'react';\nimport { Ability } from '../types';\nimport { Table } from 'react-bootstrap';\n\nconst _ = require('lodash')\n\ntype Props = {\n  abilities: Ability[],\n  phase: string,\n};\n\nfunction AbilityList(props: Props) {\n  const abilities = props.phase ?\n    props.abilities.filter((x) => (x.phases.indexOf(props.phase) >= 0)) :\n    props.abilities.filter((x) => (x.phases.length === 0))\n\n  return abilities.length === 0 ? <></> : (\n    <Table striped bordered>\n      <thead>\n        <tr>\n          <th>Ability</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(abilities, ['name']).map((x: Ability) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AbilityList;\n","import React from 'react';\nimport { PsychicPower } from '../types';\nimport { Table } from 'react-bootstrap';\n\nconst _ = require('lodash')\n\ntype Props = {\n  powers: PsychicPower[],\n};\n\nfunction PsychicPowerList(props: Props) {\n  return props.powers.length === 0 ? <></> : (\n    <Table striped bordered>\n      <thead>\n        <tr>\n          <th>Power</th>\n          <th>Warp Charge</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(props.powers, ['name']).map((x: PsychicPower) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.charge}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default PsychicPowerList;\n","import React from 'react';\nimport { Weapon } from '../types';\nimport { Table } from 'react-bootstrap';\n\nconst _ = require('lodash')\n\ntype Props = {\n  weapons: Weapon[],\n  phase: string,\n  userStrength: number,\n};\n\nfunction WeaponList(props: Props) {\n  const weapons = props.phase === 'shooting'\n    ? props.weapons.filter((x) => !isNaN(x.range))\n    : props.weapons.filter((x) => isNaN(x.range))\n\n  if (props.phase !== \"shooting\" && weapons.length === 0) {\n    weapons.push({\n      name: \"Close combat weapon\",\n      range: NaN,\n      type: \"Melee\",\n      strength: NaN,\n      armourPiercing: 0,\n      damage: 1,\n      abilities: \"-\"\n    });\n  }\n\n  return weapons.length === 0 ? <></> : (\n    <Table striped bordered>\n      <thead>\n        <tr>\n          <th>Weapon</th>\n          {props.phase === \"shooting\" && <th>Range</th>}\n          {props.phase === \"shooting\" && <th>Type</th>}\n          <th>S</th>\n          <th>AP</th>\n          <th>D</th>\n          <th>Abilities</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(weapons, ['name']).map((x: Weapon) => (\n          <tr>\n            <td style={{\"whiteSpace\": \"nowrap\"}}>{x.name}</td>\n            {props.phase === \"shooting\" && <td>{x.range}&quot;</td>}\n            {props.phase === \"shooting\" && <td style={{\"whiteSpace\": \"nowrap\"}}>{x.type}</td>}\n            <td>{isNaN(x.strength) ? props.userStrength : x.strength}</td>\n            <td>{x.armourPiercing}</td>\n            <td>{x.damage}</td>\n            <td>{x.abilities}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default WeaponList;\n","import React from 'react';\n\ntype Props = {\n  name: string,\n  children: React.ReactNode,\n};\n\nfunction Phase(props: Props) {\n  return <>\n    <h2 style={{\n      textTransform: \"capitalize\"\n    }}>\n      {props.name}\n    </h2>\n    {props.children}\n  </>\n}\n\nexport default Phase;\n","import React from 'react';\n\ntype Props = {\n  specialism: string;\n};\n\nexport function SpecialistIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'combat': '🤜',\n    'comms': '📻',\n    'demolitions': '💣',\n    'ferocity': '🦖',\n    'fortitude': '🛡️',\n    'heavy': '💥',\n    'leadership': '💀',\n    'logistics': '🚚',\n    'medic': '⚕️',\n    'melee': '🤜',\n    'psyker': '🧠',\n    'scout': '🔦',\n    'shooting': '🔫',\n    'stealth': '👻',\n    'strategist': '🗺️',\n    'strength': '💪',\n    'sniper': '🎯',\n    'veteran': '⭐',\n    'zealot': '😤',\n    '': ''\n  };\n  return (<span className='specialism'>\n    {props.specialism ? icons[props.specialism.toLowerCase()] : ''}\n  </span>);\n}\n","import React from 'react';\n\ntype Props = {\n  category: string;\n};\n\nexport function CategoryIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'commander': '👑',\n    'leader': '💀',\n    'specialist': '',\n  };\n  return (<span className='category'>\n    {icons[props.category.toLowerCase()]}\n  </span>);\n}\n","import React from 'react';\nimport StatsTable from './StatsTable';\nimport AbilityList from './AbilityList';\nimport PsychicPowerList from './PsychicPowerList';\nimport WeaponList from './WeaponList';\nimport Phase from './Phase';\nimport { SpecialistIcon } from './SpecialistIcon';\nimport { CategoryIcon } from './CategoryIcon';\nimport { Badge } from 'react-bootstrap'\n\nimport { Model } from '../types';\n\ntype Props = {\n  model: Model\n};\n\nfunction Datasheet(props: Props) {\n  return (\n    <div className=\"model\" style={{\n      pageBreakAfter: \"always\",\n    }}>\n      <h1>\n        {(props.model.category === 'Commander' || props.model.category === 'Leader') ?\n          (\n            <Badge variant=\"warning\">\n              <CategoryIcon category={props.model.category} />\n              {' '}\n              {props.model.category}\n            </Badge>\n          )\n          : (\n              props.model.specialism &&\n                <Badge variant=\"warning\">\n                  <SpecialistIcon specialism={props.model.specialism} />\n                  {' '}\n                  {props.model.specialism}\n                </Badge>\n          )\n        }\n        {' '}\n        {props.model.type}\n        {props.model.name && <>: <em>{props.model.name}</em></>\n        }\n      </h1>\n      <div>\n        <Badge pill variant=\"danger\" style={{\n          textTransform: \"uppercase\",\n          marginRight: \"10px\",\n        }}>\n          {props.model.faction}\n        </Badge>\n        {props.model.keywords.map((keyword: string) => (\n          <Badge pill variant=\"primary\" style={{\n            textTransform: \"uppercase\",\n            marginRight: \"10px\",\n          }}>\n            {keyword}\n          </Badge>\n        ))}\n      </div>\n      <div>\n        Points: {props.model.points}\n      </div>\n      <StatsTable {...props.model.stats}/>\n      <AbilityList abilities={props.model.abilities} phase=''/>\n      <Phase name=\"movement\">\n        <p className=\"lead\">Movement: {props.model.stats.movement}&quot;</p>\n        <AbilityList abilities={props.model.abilities} phase='movement'/>\n      </Phase>\n      <Phase name=\"psychic\">\n        <PsychicPowerList powers={props.model.psychicPowers}/>\n        <AbilityList abilities={props.model.abilities} phase='psychic'/>\n      </Phase>\n      <Phase name=\"shooting\">\n        <p className=\"lead\">Ballistic Skill: {props.model.stats.ballistic_skill}+</p>\n        <WeaponList weapons={props.model.weapons} phase='shooting' userStrength={props.model.stats.strength}/>\n        <AbilityList abilities={props.model.abilities} phase='shooting'/>\n      </Phase>\n      <Phase name=\"fight\">\n        <p className=\"lead\">Attacks: {props.model.stats.attacks}, Weapon Skill: {props.model.stats.weapon_skill}+</p>\n        <WeaponList weapons={props.model.weapons} phase='fight' userStrength={props.model.stats.strength}/>\n        <AbilityList abilities={props.model.abilities} phase='fight'/>\n      </Phase>\n      <Phase name=\"morale\">\n        <p className=\"lead\">Leadership: {props.model.stats.leadership}</p>\n        <AbilityList abilities={props.model.abilities} phase='morale'/>\n      </Phase>\n    </div>\n  );\n}\n\nexport default Datasheet;\n","import React from 'react';\nimport { Model } from '../types';\nimport Datasheet from './Datasheet'\n\nconst _ = require('lodash')\nconst hash = require('node-object-hash')([])\n\ntype Props = {\n  models: Model[],\n};\n\nfunction Roster(props: Props) {\n  // Display models sorted by category and type\n  return <>\n    {_.sortBy(props.models, (x: Model) => ([x.category == null, x.category, x.type])).map((model: Model) => (\n      <Datasheet model={model} key={hash.hash(model)} />\n    ))}\n  </>\n}\n\nexport default Roster;\n","const DOMParser = require('xmldom').DOMParser\nconst xpath = require('xpath-ts').useNamespaces({ roster: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst _ = require('lodash')\nconst hash = require('node-object-hash')([])\n\nconst stat = (name, model) => {\n  const nodes = xpath(`roster:profiles/roster:profile[@typeName='Model']//roster:characteristic[@name='${name}']`, model)\n  if (nodes.length > 0) {\n    return parseInt(nodes[0].childNodes[0].nodeValue)\n  } else { return '' }\n}\n\nconst weaponStat = (name, weapon, numeric) => {\n  const nodes = xpath(`roster:characteristics/roster:characteristic[@name='${name}']`, weapon)\n  if (nodes.length > 0) {\n    return numeric ? parseInt(nodes[0].childNodes[0].nodeValue) : nodes[0].childNodes[0].nodeValue\n  } else { return '' }\n}\n\nconst points = (model) => {\n  const costNode = xpath(`.//roster:costs/roster:cost[@name='pts']`, model)\n  return _.sumBy(costNode, (x) => parseInt(x.getAttribute(\"value\")))\n}\n\nconst calculatePhases = (description) => {\n  const phases = []\n  if (/attacks/i.test(description)) { phases.push('fight') }\n  if (/charge/i.test(description)) { phases.push('movement') }\n  if (/advance/i.test(description)) { phases.push('movement') }\n  if (/move/i.test(description)) { phases.push('movement') }\n  if (/psychic/i.test(description)) { phases.push('psychic') }\n  if (/shoot/i.test(description)) { phases.push('shooting') }\n  if (/nerve/i.test(description)) { phases.push('morale') }\n  if (/leadership/i.test(description)) { phases.push('morale') }\n  return phases\n}\n\nconst parseForceRule = (rule) => {\n  const description = xpath('roster:description', rule)[0].childNodes[0].nodeValue\n  return {\n    name: rule.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parseAbility = (ability) => {\n  const description = xpath(\"roster:characteristics/roster:characteristic[@name='Description']\", ability)[0].childNodes[0].nodeValue\n  return {\n    name: ability.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parseWeapon = (weapon) => ({\n  name: weapon.getAttribute('name'),\n  range: weaponStat('Range', weapon, true),\n  type: weaponStat('Type', weapon, false),\n  strength: weaponStat('S', weapon, true),\n  armourPiercing: weaponStat('AP', weapon, true),\n  damage: weaponStat('D', weapon, false),\n  abilities: weaponStat('Abilities', weapon, false)\n})\n\nconst parseWargear = (wargear) => {\n  const description = xpath(\"roster:characteristics/roster:characteristic[@name='Ability']\", wargear)[0].childNodes[0].nodeValue\n  return {\n    name: wargear.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parsePsychicPower = (power) => {\n  let description = xpath(\"roster:characteristics/roster:characteristic[@name='Psychic Power']\", power)[0].childNodes[0].nodeValue\n  const warpChargeDescription = description.match(/warp charge value of ([0-9]+)\\.(.*)/)\n  let charge = null\n  if (warpChargeDescription.length > 2) {\n    charge = parseInt(warpChargeDescription[1])\n    description = warpChargeDescription[2]\n  }\n  return {\n    name: power.getAttribute('name'),\n    charge,\n    description\n  }\n}\n\nconst parseModel = (model) => {\n  const forceRules = xpath('//roster:force/roster:rules/roster:rule', model).map(parseForceRule)\n  const wargear = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Wargear']\", model).map(parseWargear)\n  const abilities = xpath(\"roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility).concat(forceRules).concat(wargear)\n  const weapons = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Weapon']\", model).map(parseWeapon)\n  const specialismSelection = xpath('roster:selections/roster:selection[roster:selections/roster:selection/roster:profiles]', model)\n  const specialistAbilities = xpath(\"roster:selections/roster:selection/roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility)\n  const psychicPowers = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Psychic Power']\", model).map(parsePsychicPower)\n  const category = xpath(\"roster:categories/roster:category[@primary='true']\", model)[0].getAttribute('name')\n  const faction = xpath(\"roster:categories/roster:category[@primary='false' and starts-with(@name,'Faction: ')]\", model)\n  return {\n    name: model.getAttribute('customName'),\n    type: model.getAttribute('name'),\n    category: category === 'Non-specialist' ? 'zzz-so-it-sorts-last-what-a-massive-hack' : category,\n    stats: {\n      movement: stat('M', model),\n      weapon_skill: stat('WS', model),\n      ballistic_skill: stat('BS', model),\n      strength: stat('S', model),\n      toughness: stat('T', model),\n      wounds: stat('W', model),\n      attacks: stat('A', model),\n      leadership: stat('Ld', model),\n      save: stat('Sv', model)\n    },\n    abilities: abilities.concat(specialistAbilities),\n    weapons,\n    psychicPowers,\n    specialism: specialismSelection.length > 0 ? specialismSelection[0].getAttribute('name') : null,\n    faction: faction.length > 0 ? faction[0].getAttribute('name').split(': ', 2)[1] : null,\n    keywords: xpath(\"roster:categories/roster:category[@primary='false' and not(starts-with(@name,'Faction: '))]\", model).map((x) => x.getAttribute('name')),\n    points: points(model),\n  }\n}\n\nexport const parseBattlescribeXML = (xml) => {\n  var models = []\n  var doc = new DOMParser().parseFromString(xml)\n  for (const category of xpath('//roster:force/roster:categories/roster:category', doc)) {\n    const categoryId = category.getAttribute('entryId')\n    for (const model of xpath(`//roster:selection[@type='model' and roster:categories/roster:category/@entryId='${categoryId}']`, doc)) {\n      models.push(parseModel(model))\n    }\n  }\n  return _.uniqBy(models, hash.hash)\n}\n","import { parseBattlescribeXML } from './BattlescribeParser'\n\nconst JSZip = require('jszip')\n\nconst unzip = (file) => {\n  if (file[0] !== 'P') { return Promise.resolve(file) } else {\n    const jszip = new JSZip()\n    return jszip.loadAsync(file)\n      .then((zip) => (\n        zip.file(/[^/]+\\.ros/)[0].async('string') // Get roster files that are in the root\n      ))\n  }\n}\n\nconst parseFile = (file) => (\n  unzip(file).then(parseBattlescribeXML)\n)\n\nexport const loadFile = async (file) => {\n  const reader = new FileReader()\n  return new Promise((resolve, reject) => {\n    reader.onerror = () => {\n      reader.abort()\n      reject(new DOMException('Problem parsing input file.'))\n    }\n    reader.onloadend = async () => {\n      resolve(parseFile(reader.result))\n    }\n    reader.readAsBinaryString(file)\n  })\n}\n\nexport const loadFiles = (files) => {\n  return loadFile(files[0])\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react'\nimport Homepage from './components/Homepage'\nimport Roster from './components/Roster'\nimport { Container } from 'react-bootstrap'\nimport { loadFiles } from './FileLoader'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      models: []\n    }\n\n    this.handleUpload = (acceptedFiles) => {\n      loadFiles(acceptedFiles).then((models) => {\n        this.setState({ models })\n      })\n    }\n  }\n\n  render () {\n    return (\n      <Container>\n        {this.state.models.length === 0\n          ? <Homepage onUpload={this.handleUpload} />\n          : <Roster models={this.state.models} />}\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// Enable offline use with a service worker\n// See https://create-react-app.dev/docs/making-a-progressive-web-app/\nserviceWorker.register()\n"],"sourceRoot":""}