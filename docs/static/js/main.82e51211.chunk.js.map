{"version":3,"sources":["StatsTable.tsx","AbilityList.tsx","SpecialistIcon.tsx","CategoryIcon.tsx","Datasheet.tsx","App.js","serviceWorker.js","index.js"],"names":["StatsTable","props","movement","weapon_skill","ballistic_skill","strength","toughness","wounds","attacks","leadership","save","AbilityList","abilities","filter","x","phases","indexOf","phase","map","name","description","SpecialistIcon","className","specialism","toLowerCase","CategoryIcon","category","Datasheet","model","type","faction","keywords","keyword","stats","weapons","isNaN","range","_","require","hash","DOMParser","xpath","useNamespaces","roster","stat","nodes","length","parseInt","childNodes","nodeValue","weaponStat","weapon","parseAbility","ability","test","push","getAttribute","parseWeapon","parseModel","App","parseFile","event","models","doc","parseFromString","target","result","categoryId","setState","uniqBy","handleDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onloadend","readAsText","state","onDrop","this","getRootProps","getInputProps","sortBy","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82e51211.chunk.js","sourcesContent":["import React from 'react'\nimport { ModelStats } from './types'\n\nfunction StatsTable (props: ModelStats) {\n  return (\n    <table>\n      <tr>\n        <th>M</th>\n        <th>WS</th>\n        <th>BS</th>\n        <th>S</th>\n        <th>T</th>\n        <th>W</th>\n        <th>A</th>\n        <th>Ld</th>\n        <th>Sv</th>\n      </tr>\n      <tr>\n        <td>{props.movement}&quot;</td>\n        <td>{props.weapon_skill}+</td>\n        <td>{props.ballistic_skill}+</td>\n        <td>{props.strength}</td>\n        <td>{props.toughness}</td>\n        <td>{props.wounds}</td>\n        <td>{props.attacks}</td>\n        <td>{props.leadership}</td>\n        <td>{props.save}+</td>\n      </tr>\n    </table>\n  )\n}\n\nexport default StatsTable\n","import React from 'react';\nimport { Ability } from './types';\n\ntype Props = {\n  abilities: [Ability],\n  phase: string,\n};\n\nfunction AbilityList(props: Props) {\n  const abilities = props.abilities.filter((x) => (x.phases.indexOf(props.phase) >= 0))\n  return (\n    <dl>\n      {abilities.map((x) => (\n        <>\n          <dt>{x.name}</dt>\n          <dd>{x.description}</dd>\n        </>\n      ))}\n    </dl>\n  );\n}\n\nexport default AbilityList;\n","import React from 'react';\n\ntype Props = {\n  specialism: string;\n};\n\nexport function SpecialistIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'combat': '‚öîÔ∏è',\n    'comms': 'üìû',\n    'demolitions': 'üí£',\n    'ferocity': 'ü¶ñ',\n    'fortitude': 'üõ°Ô∏è',\n    'heavy': 'üí•',\n    'leadership': 'üé©',\n    'logistics': 'üöö',\n    'medic': '‚öïÔ∏è',\n    'melee': '‚öîÔ∏è',\n    'psyker': 'üß†',\n    'scout': 'üî¶',\n    'shooting': 'üî´',\n    'stealth': 'üëª',\n    'strategist': 'üó∫Ô∏è',\n    'strength': 'üí™',\n    'sniper': 'üéØ',\n    'veteran': 'üë¥',\n    'zealot': 'üò§'\n  };\n  return (<span className='specialism'>\n    {icons[props.specialism.toLowerCase()]}\n  </span>);\n}\n","import React from 'react';\n\ntype Props = {\n  category: string;\n};\n\nexport function CategoryIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'commander': 'üëë',\n    'leader': 'üé©',\n    'specialist': '',\n  };\n  return (<span className='category'>\n    {icons[props.category.toLowerCase()]}\n  </span>);\n}\n","import React from 'react';\nimport StatsTable from './StatsTable';\nimport AbilityList from './AbilityList';\nimport { SpecialistIcon } from './SpecialistIcon';\nimport { CategoryIcon } from './CategoryIcon';\n\nimport { Model } from './types';\n\ntype Props = {\n  model: Model\n};\n\nfunction Datasheet(props: Props ) {\n  return (\n    <div className=\"model\">\n      <h1>\n        {props.model.category && <CategoryIcon category={props.model.category} />}\n        {' '}\n        {props.model.specialism && <SpecialistIcon specialism={props.model.specialism} />}\n        {' '}\n        {props.model.name &&\n          <em>{props.model.name} - </em>\n        }\n        {props.model.type}\n      </h1>\n      <div>\n        {props.model.faction}\n      </div>\n      <div>\n        Keywords: {props.model.keywords.map((keyword: string) => (\n          <span className='keyword'>\n            {keyword}\n          </span>\n        ))}\n      </div>\n      <StatsTable {...props.model.stats}/>\n      <AbilityList abilities={props.model.abilities} phase='all'/>\n      <h2>\n        Movement\n      </h2>\n      <AbilityList abilities={props.model.abilities} phase='movement'/>\n      <h2>\n        Psychic\n      </h2>\n      <AbilityList abilities={props.model.abilities} phase='psychic'/>\n      <AbilityList abilities={props.model.abilities} phase='fight'/>\n      <h2>\n        Shooting\n      </h2>\n      <ul>\n       {props.model.weapons.filter((x) => !isNaN(x.range)).map((x) => (\n          <li>{x.name}</li>\n        ))}\n      </ul>\n      <AbilityList abilities={props.model.abilities} phase='shooting'/>\n      <h2>\n        Fight\n      </h2>\n      <ul>\n        {props.model.weapons.filter((x) => isNaN(x.range)).map((x) => (\n          <li>{x.name}</li>\n        ))}\n      </ul>\n      <h2>\n        Morale\n      </h2>\n      <AbilityList abilities={props.model.abilities} phase='morale'/>\n    </div>\n  );\n}\n\nexport default Datasheet;\n","import React from 'react'\nimport Datasheet from './Datasheet'\nimport Dropzone from 'react-dropzone'\nconst _ = require('lodash')\nconst hash = require('node-object-hash')([])\nconst DOMParser = require('xmldom').DOMParser\nconst xpath = require('xpath').useNamespaces({ roster: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst stat = (name, model) => {\n  const nodes = xpath(`roster:profiles/roster:profile[@typeName='Model']//roster:characteristic[@name='${name}']`, model)\n  if (nodes.length > 0) {\n    return parseInt(nodes[0].childNodes[0].nodeValue)\n  } else { return '' }\n}\n\nconst weaponStat = (name, weapon) => {\n  const nodes = xpath(`roster:characteristics/roster:characteristic[@name='${name}']`, weapon)\n  if (nodes.length > 0) {\n    return parseInt(nodes[0].childNodes[0].nodeValue)\n  } else { return '' }\n}\n\nconst parseAbility = (ability) => {\n  const description = xpath(\"roster:characteristics/roster:characteristic[@name='Description']\", ability)[0].childNodes[0].nodeValue\n  const phases = []\n  switch (true) {\n    case /charge/i.test(description):\n      phases.push('movement')\n      break\n    case /advance/i.test(description):\n      phases.push('movement')\n      break\n    case /move/i.test(description):\n      phases.push('movement')\n      break\n    case /psychic/i.test(description):\n      phases.push('psychic')\n      break\n    case /shoot/i.test(description):\n      phases.push('shooting')\n      break\n    case /nerve/i.test(description):\n      phases.push('morale')\n      break\n    default:\n      phases.push('all')\n  }\n  return {\n    name: ability.getAttribute('name'),\n    description,\n    phases\n  }\n}\n\nconst parseWeapon = (weapon) => ({\n  name: weapon.getAttribute('name'),\n  range: weaponStat('Range', weapon),\n  strength: weaponStat('S', weapon)\n})\n\nconst parseModel = (model) => {\n  const abilities = xpath(\"roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility)\n  const weapons = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Weapon']\", model).map(parseWeapon)\n  return {\n    name: model.getAttribute('customName'),\n    type: model.getAttribute('name'),\n    category: xpath(\"roster:categories/roster:category[@primary='true']\", model)[0].getAttribute('name'),\n    stats: {\n      movement: stat('M', model),\n      weapon_skill: stat('WS', model),\n      ballistic_skill: stat('BS', model),\n      strength: stat('S', model),\n      toughness: stat('T', model),\n      wounds: stat('W', model),\n      attacks: stat('A', model),\n      leadership: stat('Ld', model),\n      save: stat('Sv', model)\n    },\n    abilities,\n    weapons,\n    faction: xpath(\"roster:categories/roster:category[@primary='false' and starts-with(@name,'Faction: ')]\", model)[0].getAttribute('name'),\n    keywords: xpath(\"roster:categories/roster:category[@primary='false' and not(starts-with(@name,'Faction: '))]\", model).map((x) => x.getAttribute('name'))\n  }\n}\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      models: []\n    }\n  }\n\n  parseFile = (event) => {\n    var models = []\n    var doc = new DOMParser().parseFromString(event.target.result)\n    for (const category of xpath('//roster:force/roster:categories/roster:category', doc)) {\n      const categoryId = category.getAttribute('entryId')\n      for (const model of xpath(`//roster:selection[@type='model' and roster:categories/roster:category/@entryId='${categoryId}']`, doc)) {\n        models.push(parseModel(model))\n      }\n    }\n    this.setState({ models: _.uniqBy(models, hash.hash) })\n  };\n\n  handleDrop = (acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader()\n      reader.onabort = () => console.log('file reading was aborted')\n      reader.onerror = () => console.log('file reading has failed')\n      reader.onloadend = this.parseFile\n      reader.readAsText(file)\n    })\n  };\n\n  render () {\n    return (\n      <>\n        <Dropzone onDrop={this.handleDrop}>\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                <p>Drop a .ros file here, or click to select one</p>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n        {\n          // Display models sorted by category and type\n          _.sortBy(this.state.models, (x) => ([x.category == null, x.category, x.type])).map((model) => (\n            <Datasheet model={model} key={hash.hash(model)} />\n          ))\n        }\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}