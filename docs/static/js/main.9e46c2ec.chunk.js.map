{"version":3,"sources":["StatsTable.tsx","AbilityList.tsx","WeaponList.tsx","Phase.tsx","SpecialistIcon.tsx","CategoryIcon.tsx","Datasheet.tsx","App.js","serviceWorker.js","index.js"],"names":["StatsTable","props","Table","striped","bordered","movement","weapon_skill","isNaN","ballistic_skill","strength","toughness","wounds","attacks","leadership","save","AbilityList","abilities","phase","filter","x","phases","indexOf","length","map","name","description","WeaponList","weapons","range","type","userStrength","damage","armourPiercing","Phase","style","textTransform","children","SpecialistIcon","className","specialism","toLowerCase","CategoryIcon","category","Datasheet","pageBreakAfter","model","Badge","variant","pill","marginRight","faction","keywords","keyword","stats","_","require","hash","DOMParser","xpath","useNamespaces","roster","stat","nodes","parseInt","childNodes","nodeValue","weaponStat","weapon","numeric","parseAbility","ability","test","push","getAttribute","parseWeapon","parseModel","specialismSelection","specialistAbilities","concat","split","App","parseFile","event","models","doc","parseFromString","target","result","categoryId","setState","uniqBy","handleDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onloadend","readAsText","state","Container","this","Alert","href","onDrop","accept","getRootProps","getInputProps","textAlign","sortBy","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e46c2ec.chunk.js","sourcesContent":["import React from 'react'\nimport { ModelStats } from './types'\nimport { Table } from 'react-bootstrap'\n\nfunction StatsTable (props: ModelStats) {\n  return (\n    <Table striped bordered>\n      <thead>\n        <tr>\n          <th>M</th>\n          <th>WS</th>\n          <th>BS</th>\n          <th>S</th>\n          <th>T</th>\n          <th>W</th>\n          <th>A</th>\n          <th>Ld</th>\n          <th>Sv</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{props.movement}&quot;</td>\n          <td>{props.weapon_skill}+</td>\n          <td>{isNaN(props.ballistic_skill) ? '-' : props.ballistic_skill+\"+\"}</td>\n          <td>{props.strength}</td>\n          <td>{props.toughness}</td>\n          <td>{props.wounds}</td>\n          <td>{props.attacks}</td>\n          <td>{props.leadership}</td>\n          <td>{props.save}+</td>\n        </tr>\n      </tbody>\n    </Table>\n  )\n}\n\nexport default StatsTable\n","import React from 'react';\nimport { Ability } from './types';\nimport { Table } from 'react-bootstrap';\n\ntype Props = {\n  abilities: Ability[],\n  phase: string,\n};\n\nfunction AbilityList(props: Props) {\n  const abilities = props.phase ?\n    props.abilities.filter((x) => (x.phases.indexOf(props.phase) >= 0)) :\n    props.abilities.filter((x) => (x.phases.length === 0))\n\n  return abilities.length === 0 ? <></> : (\n    <Table striped bordered>\n      <tbody>\n        {abilities.map((x) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AbilityList;\n","import React from 'react';\nimport { Weapon } from './types';\nimport { Table } from 'react-bootstrap';\n\ntype Props = {\n  weapons: Weapon[],\n  phase: string,\n  userStrength: number,\n};\n\nfunction WeaponList(props: Props) {\n  const weapons = props.phase === 'shooting'\n    ? props.weapons.filter((x) => !isNaN(x.range))\n    : props.weapons.filter((x) => isNaN(x.range))\n\n  return weapons.length === 0 ? <></> : (\n    <Table striped bordered>\n      <thead>\n        <tr>\n          <th>Weapon</th>\n          {props.phase === \"shooting\" && <th>Range</th>}\n          {props.phase === \"shooting\" && <th>Type</th>}\n          <th>S</th>\n          <th>D</th>\n          <th>AP</th>\n          <th>Abilities</th>\n        </tr>\n      </thead>\n      <tbody>\n        {weapons.map((x) => (\n          <tr>\n            <td>{x.name}</td>\n            {props.phase === \"shooting\" && <td>{x.range}&quot;</td>}\n            {props.phase === \"shooting\" && <td>{x.type}</td>}\n            <td>{isNaN(x.strength) ? props.userStrength : x.strength}</td>\n            <td>{x.damage}</td>\n            <td>{x.armourPiercing}</td>\n            <td>{x.abilities}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default WeaponList;\n","import React from 'react';\n\ntype Props = {\n  name: string,\n  children: React.ReactNode,\n};\n\nfunction Phase(props: Props) {\n  return <>\n    <h2 style={{\n      textTransform: \"capitalize\"\n    }}>\n      {props.name}\n    </h2>\n    {props.children}\n  </>\n}\n\nexport default Phase;\n","import React from 'react';\n\ntype Props = {\n  specialism: string;\n};\n\nexport function SpecialistIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'combat': '🤜',\n    'comms': '📻',\n    'demolitions': '💣',\n    'ferocity': '🦖',\n    'fortitude': '🛡️',\n    'heavy': '💥',\n    'leadership': '💀',\n    'logistics': '🚚',\n    'medic': '⚕️',\n    'melee': '🤜',\n    'psyker': '🧠',\n    'scout': '🔦',\n    'shooting': '🔫',\n    'stealth': '👻',\n    'strategist': '🗺️',\n    'strength': '💪',\n    'sniper': '🎯',\n    'veteran': '⭐',\n    'zealot': '😤'\n  };\n  return (<span className='specialism'>\n    {icons[props.specialism.toLowerCase()]}\n  </span>);\n}\n","import React from 'react';\n\ntype Props = {\n  category: string;\n};\n\nexport function CategoryIcon(props: Props) {\n  const icons: {\n    [index: string]: string;\n  } = {\n    'commander': '👑',\n    'leader': '💀',\n    'specialist': '',\n  };\n  return (<span className='category'>\n    {icons[props.category.toLowerCase()]}\n  </span>);\n}\n","import React from 'react';\nimport StatsTable from './StatsTable';\nimport AbilityList from './AbilityList';\nimport WeaponList from './WeaponList';\nimport Phase from './Phase';\nimport { SpecialistIcon } from './SpecialistIcon';\nimport { CategoryIcon } from './CategoryIcon';\nimport { Badge } from 'react-bootstrap'\n\nimport { Model } from './types';\n\ntype Props = {\n  model: Model\n};\n\nfunction Datasheet(props: Props ) {\n  return (\n    <div className=\"model\" style={{\n      pageBreakAfter: \"always\",\n    }}>\n      <h1>\n        {props.model.category && <CategoryIcon category={props.model.category} />}\n        {' '}\n        {props.model.specialism && <SpecialistIcon specialism={props.model.specialism} />}\n        {' '}\n        {props.model.name &&\n          <em>{props.model.name} - </em>\n        }\n        {props.model.type}\n      </h1>\n      {props.model.specialism && <div>Specialism: <Badge variant=\"warning\">{props.model.specialism}</Badge></div>}\n      <div>\n        <Badge pill variant=\"danger\" style={{\n          textTransform: \"uppercase\",\n          marginRight: \"10px\",\n        }}>\n          {props.model.faction}\n        </Badge>\n        {props.model.keywords.map((keyword: string) => (\n          <Badge pill variant=\"primary\" style={{\n            textTransform: \"uppercase\",\n            marginRight: \"10px\",\n          }}>\n            {keyword}\n          </Badge>\n        ))}\n      </div>\n      <StatsTable {...props.model.stats}/>\n      <AbilityList abilities={props.model.abilities} phase=''/>\n      <Phase name=\"movement\">\n        <AbilityList abilities={props.model.abilities} phase='movement'/>\n      </Phase>\n      <Phase name=\"psychic\">\n        <AbilityList abilities={props.model.abilities} phase='psychic'/>\n      </Phase>\n      <Phase name=\"shooting\">\n        <WeaponList weapons={props.model.weapons} phase='shooting' userStrength={props.model.stats.strength}/>\n        <AbilityList abilities={props.model.abilities} phase='shooting'/>\n      </Phase>\n      <Phase name=\"fight\">\n        <WeaponList weapons={props.model.weapons} phase='fight' userStrength={props.model.stats.strength}/>\n        <AbilityList abilities={props.model.abilities} phase='fight'/>\n      </Phase>\n      <Phase name=\"morale\">\n        <AbilityList abilities={props.model.abilities} phase='morale'/>\n      </Phase>\n    </div>\n  );\n}\n\nexport default Datasheet;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react'\nimport Datasheet from './Datasheet'\nimport Dropzone from 'react-dropzone'\nimport { Container, Alert } from 'react-bootstrap'\n\nconst _ = require('lodash')\nconst hash = require('node-object-hash')([])\nconst DOMParser = require('xmldom').DOMParser\nconst xpath = require('xpath').useNamespaces({ roster: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst stat = (name, model) => {\n  const nodes = xpath(`roster:profiles/roster:profile[@typeName='Model']//roster:characteristic[@name='${name}']`, model)\n  if (nodes.length > 0) {\n    return parseInt(nodes[0].childNodes[0].nodeValue)\n  } else { return '' }\n}\n\nconst weaponStat = (name, weapon, numeric) => {\n  const nodes = xpath(`roster:characteristics/roster:characteristic[@name='${name}']`, weapon)\n  if (nodes.length > 0) {\n    return numeric ? parseInt(nodes[0].childNodes[0].nodeValue) : nodes[0].childNodes[0].nodeValue\n  } else { return '' }\n}\n\nconst parseAbility = (ability) => {\n  const description = xpath(\"roster:characteristics/roster:characteristic[@name='Description']\", ability)[0].childNodes[0].nodeValue\n  const phases = []\n  if (/attacks/i.test(description))\n    phases.push('fight')\n  if (/charge/i.test(description))\n    phases.push('movement')\n  if (/advance/i.test(description))\n    phases.push('movement')\n  if (/move/i.test(description))\n    phases.push('movement')\n  if (/psychic/i.test(description))\n    phases.push('psychic')\n  if (/shoot/i.test(description))\n    phases.push('shooting')\n  if (/nerve/i.test(description))\n    phases.push('morale')\n  return {\n    name: ability.getAttribute('name'),\n    description,\n    phases\n  }\n}\n\nconst parseWeapon = (weapon) => ({\n  name: weapon.getAttribute('name'),\n  range: weaponStat('Range', weapon, true),\n  type: weaponStat('Type', weapon, false),\n  strength: weaponStat('S', weapon, true),\n  armourPiercing: weaponStat('AP', weapon , true),\n  damage: weaponStat('D', weapon, false),\n  abilities: weaponStat('Abilities', weapon, false)\n})\n\nconst parseModel = (model) => {\n  const abilities = xpath(\"roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility)\n  const weapons = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Weapon']\", model).map(parseWeapon)\n  const specialismSelection = xpath(\"roster:selections/roster:selection[roster:selections]\", model)\n  const specialistAbilities = xpath(\"roster:selections/roster:selection/roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Ability']\", model).map(parseAbility)\n  return {\n    name: model.getAttribute('customName'),\n    type: model.getAttribute('name'),\n    category: xpath(\"roster:categories/roster:category[@primary='true']\", model)[0].getAttribute('name'),\n    stats: {\n      movement: stat('M', model),\n      weapon_skill: stat('WS', model),\n      ballistic_skill: stat('BS', model),\n      strength: stat('S', model),\n      toughness: stat('T', model),\n      wounds: stat('W', model),\n      attacks: stat('A', model),\n      leadership: stat('Ld', model),\n      save: stat('Sv', model)\n    },\n    abilities: abilities.concat(specialistAbilities),\n    weapons,\n    specialism: specialismSelection.length > 0 ? specialismSelection[0].getAttribute('name') : null,\n    faction: xpath(\"roster:categories/roster:category[@primary='false' and starts-with(@name,'Faction: ')]\", model)[0].getAttribute('name').split(\": \",2)[1],\n    keywords: xpath(\"roster:categories/roster:category[@primary='false' and not(starts-with(@name,'Faction: '))]\", model).map((x) => x.getAttribute('name'))\n  }\n}\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      models: []\n    }\n  }\n\n  parseFile = (event) => {\n    var models = []\n    var doc = new DOMParser().parseFromString(event.target.result)\n    for (const category of xpath('//roster:force/roster:categories/roster:category', doc)) {\n      const categoryId = category.getAttribute('entryId')\n      for (const model of xpath(`//roster:selection[@type='model' and roster:categories/roster:category/@entryId='${categoryId}']`, doc)) {\n        models.push(parseModel(model))\n      }\n    }\n    this.setState({ models: _.uniqBy(models, hash.hash) })\n  };\n\n  handleDrop = (acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader()\n      reader.onabort = () => console.log('file reading was aborted')\n      reader.onerror = () => console.log('file reading has failed')\n      reader.onloadend = this.parseFile\n      reader.readAsText(file)\n    })\n  };\n\n  render () {\n    return (\n      <Container>\n        { this.state.models.length === 0 &&\n          <>\n            <h1>\n              Scriptorum\n            </h1>\n            <p className='lead'>\n              Readable datasheets for Warhammer 40k Kill Team\n            </p>\n            <ul>\n              <li>Organises abilities and weapons by phase</li>\n              <li>Merges identical models</li>\n              <li>Prints out as one datasheet per page</li>\n              <li>Clear, readable layout</li>\n            </ul>\n            <Alert variant='danger'>\n              Scriptorum is a work in progress! So far we only support .ros files,\n              not .rosz, and the output and formatting is unfinished. But it should work,\n              so try it out! If you spot any problems, please create an\n              issue <a href='https://github.com/Floppy/scriptorum/issues'>on GitHub</a> and\n              include your roster file if possible.\n            </Alert>\n            <Dropzone onDrop={this.handleDrop} accept='.ros'>\n              {({ getRootProps, getInputProps }) => (\n                <Alert variant=\"info\" {...getRootProps()} style={{textAlign: \"center\"}}>\n                  <input {...getInputProps()} />\n                  <p>Drop a Battlescribe roster file here, or click to select one.</p>\n                  <p><em>(Only *.ros files will be accepted, not .rosz yet)</em></p>\n                </Alert>\n              )}\n            </Dropzone>\n            <footer>\n              Built with React and Bootstrap. Released as Open Source, code <a href='https://github.com/floppy/scriptorum'>on GitHub</a>.\n            </footer>\n          </>\n        }\n        { this.state.models.length > 0 &&\n          // Display models sorted by category and type\n          <>\n            {_.sortBy(this.state.models, (x) => ([x.category == null, x.category, x.type])).map((model) => (\n              <Datasheet model={model} key={hash.hash(model)} />\n            ))}\n            <footer>\n              Created by Scriptorum: <a href='https://floppy.org.uk/scriptorum'>https://floppy.org.uk/scriptorum</a>\n            </footer>\n          </>\n        }\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}