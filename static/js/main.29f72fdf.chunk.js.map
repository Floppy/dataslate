{"version":3,"sources":["components/Intro.tsx","components/Homepage.tsx","components/KillTeam2018/Phase.tsx","components/KillTeam2018/AbilityList.tsx","components/KillTeam2018/StatsTable.tsx","components/KillTeam2018/SpecialistIcon.tsx","components/KillTeam2018/CategoryIcon.tsx","components/ModelTitle.tsx","components/KeywordList.tsx","components/KillTeam2018/NoPhaseDetails.tsx","components/StatBadge.tsx","components/KillTeam2018/MovementPhaseDetails.tsx","components/KillTeam2018/ScoutingPhaseDetails.tsx","components/KillTeam2018/DeploymentPhaseDetails.tsx","components/KillTeam2018/InitiativePhaseDetails.tsx","components/KillTeam2018/PsychicPowerList.tsx","components/KillTeam2018/PsychicPhaseDetails.tsx","components/KillTeam2018/WeaponList.tsx","components/KillTeam2018/ShootingPhaseDetails.tsx","components/KillTeam2018/FightPhaseDetails.tsx","components/KillTeam2018/MoralePhaseDetails.tsx","components/CloseButton.tsx","components/KillTeam2018/Roster.tsx","components/KillTeam2021/HighlightedText.tsx","components/KillTeam2021/WeaponList.tsx","components/KillTeam2021/EquipmentList.tsx","components/KillTeam2021/ActionList.tsx","components/KillTeam2021/WoundTracks.tsx","components/KillTeam2021/AbilityList.tsx","components/KillTeam2021/Datasheet.tsx","components/KillTeam2021/RuleList.tsx","components/KillTeam2021/PowerList.tsx","components/KillTeam2021/PloysColumn.tsx","components/KillTeam2021/TacOpsList.tsx","components/KillTeam2021/data/broodCoven.ts","components/KillTeam2021/data/hiveFleet.ts","components/KillTeam2021/data/kommando.ts","components/KillTeam2021/data/veteranGuardsmen.ts","components/KillTeam2021/data/spaceMarine.ts","components/KillTeam2021/data/greyKnights.ts","components/KillTeam2021/data/imperialGuard.ts","components/KillTeam2021/data/forgeWorld.ts","components/KillTeam2021/data/index.ts","components/KillTeam2021/Roster.tsx","parsers/KillTeam2018/Abilities.ts","parsers/KillTeam2018/BattlescribeParser.js","parsers/KillTeam2021/BattlescribeParser.ts","FileLoader.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["Intro","Jumbotron","className","Homepage","props","Row","Col","Card","Header","as","Body","style","minHeight","Text","href","onDrop","onUpload","accept","getRootProps","getInputProps","Alert","variant","textAlign","process","Phase","pageBreakAfter","background","color","padding","width","display","name","flexGrow","note","children","AbilityList","abilities","phase","filter","x","phases","indexOf","length","highlight","Table","striped","bordered","size","_","sortBy","map","description","StatsTable","movement","weapon_skill","isNaN","ballistic_skill","strength","toughness","wounds","attacks","additional_attacks","leadership","save","invulnerable_save","points","SpecialistIcon","specialism","height","marginRight","alt","src","toLowerCase","CategoryIcon","category","ModelTitle","titleComponents","without","type","undefined","justifyContent","selected","join","slice","showSelector","value","slideStop","onSelectionChanged","uuid","target","step","max","count","min","KeywordList","faction","Badge","pill","textTransform","keywords","keyword","NoPhaseDetails","model","weapons","w","concat","wargear","stats","StatBadge","secondaryValue","MovementPhaseDetails","sm","ScoutingPhaseDetails","hasScoutingPhase","DeploymentPhaseDetails","hasDeploymentPhase","InitiativePhaseDetails","hasInitiativePhase","PsychicPowerList","powers","charge","PsychicPhaseDetails","psychicPowers","hasPsychicPhase","WeaponList","range","shots","armourPiercing","damage","ShootingPhaseDetails","hasRangedWeapons","userStrength","FightPhaseDetails","MoralePhaseDetails","CloseButton","Button","onClick","onClose","Roster","sortedModels","models","selectedModels","sumBy","forceRules","some","HighlightedText","output","reactStringReplace","el","hit","criticalDamage","specialRules","criticalRules","EquipmentList","equipment","border","bg","cost","ActionList","actions","WoundTracks","names","repeat","Datasheet","datacard","operativeNames","uuidv4","leader","groupActivation","defence","actionPointLimit","RuleList","rules","PowerList","xs","md","weapon","PloysColumn","ploys","options","line","postOptionText","TacOpsList","tacOps","id","revealTime","action","data","strategicPloys","tacticalPloys","melee","getFactionSpecificData","factionName","veteranGuardsmen","kommando","broodCoven","hiveFleet","spaceMarine","greyKnights","imperialGuard","forgeWorld","headingStyle","datacards","operatives","groupedOperatives","groupBy","o","hash","ops","c","sort","groupByDatacard","factionSpecificData","orderBy","breakBefore","uniqBy","flatten","m","flexDirection","marginLeft","phasePatterns","scouting","deployment","initiative","psychic","shooting","fight","morale","genericPatterns","antiPatterns","calculatePhases","minDesc","replace","forIn","patterns","re","test","push","includes","remove","p","invulnerableSave","saves","a","pattern","match","parseInt","xpath","XPath","roster","stat","nodes","childNodes","nodeValue","weaponStat","numeric","costNode","getAttribute","parseForceRule","rule","parseAbility","ability","parseWargear","parsePsychicPower","power","warpChargeDescription","additionalAttacks","descriptions","d","sum","parseAdditionalAttacks","parseModel","specialismSelection","closeCombatWeapon","exec","weaponType","split","parseWeapon","details","xpSelect","bs","node","toString","startsWith","weap","parseAction","parseEquipment","parseRule","factionKeywords","parseOperative","allKeywords","textContent","intersection","pop","find","k","toUpperCase","unzip","file","charAt","jszip","JSZip","loadAsync","zip","async","parseFile","doc","DOMParserImpl","parseFromString","categoryId","uniqueModels","system","parseKillTeam2018","romanNumerals","counts","parseKillTeam2021","Error","loadFile","reader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onloadend","content","result","readAsBinaryString","App","useState","setRoster","handleUpload","acceptedFiles","r","handleClose","isRosterKT18","Container","fluid","selectedCount","Object","assign","isRosterKT21","Boolean","window","location","hostname","Sentry","dsn","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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AAN,UACE,cAACuK,GAAD,CAAaC,MAAOkC,EAAoBxB,sBAG5C,eAACrL,EAAA,EAAD,CAAMI,MAAO,CAACkB,MAAO,OAAQ8L,WAAY,OAAzC,UACE,cAACpN,EAAA,EAAKC,OAAN,CAAaG,MAAK,eAAM8L,GAAehM,GAAG,KAA1C,4BACA,cAACF,EAAA,EAAKG,KAAN,UACE,cAACuK,GAAD,CAAaC,MAAOkC,EAAoBvB,wBAK5CuB,EAAoB7B,QAClB,eAAChL,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,OAAN,CAAaG,MAAK,eAAM8L,GAAehM,GAAG,KAA1C,qBACA,cAACF,EAAA,EAAKG,KAAN,UACE,cAAC4K,GAAD,CAAYC,OAAQ6B,EAAoB7B,oB,gCCpFlDqC,GAAgB,CACpBC,SAAU,CACR,cAEFC,WAAY,CACV,kCACA,WACA,iBAEFC,WAAY,CACV,+BACA,mCACA,0CAEF1K,SAAU,CACR,mBACA,YACA,gBACA,cACA,aACA,gBACA,YACA,cACA,cACA,QACA,iCACA,mBACA,oBACA,kBAEF2K,QAAS,CACP,YACA,mBACA,uBACA,cAEFC,SAAU,CACR,mBACA,WACA,oBACA,WACA,yBACA,eACA,eACA,gBACA,cACA,YACA,aACA,cACA,WACA,aACA,YACA,eACA,qBACA,sBACA,wBACA,wBACA,cACA,kBACA,WACA,kBACA,gCAEFC,MAAO,CACL,gBACA,YACA,iBACA,6BACA,8BACA,cACA,kBACA,UACA,iBACA,+BACA,wBACA,sBACA,kBACA,wBACA,2CACA,iFACA,gCAEFC,OAAQ,CACN,UACA,iBAIEC,GAAkB,CACtB,WACA,eACA,mBACA,WACA,mBACA,kBACA,iBACA,mBACA,sBACA,sCACA,6BACA,4BACA,wBACA,eACA,yBAGIC,GAAe,CACnBP,WAAY,CACV,kBAEFzK,SAAU,CACR,4BACA,6BACA,8BACA,oCACA,4CACA,yCACA,+CACA,uBACA,qCACA,YACA,uBACA,4CACA,uBAEF2K,QAAS,CACP,2DAEFC,SAAU,CACR,yCACA,iEACA,sCACA,4BACA,wCACA,aAEFC,MAAO,CACL,yC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","file":"static/js/main.29f72fdf.chunk.js","sourcesContent":["import React from 'react';\nimport { Jumbotron } from 'react-bootstrap'\n\nfunction Intro() {\n  return <Jumbotron>\n    <h1>\n      Dataslate\n    </h1>\n    <p className='lead'>\n      Printable datasheets for Warhammer 40,000: Kill Team\n    </p>\n    <ul>\n      <li>All the info you need, when you need it</li>\n      <li>No wasted space for identical models</li>\n      <li>Designed for print or screen</li>\n      <li>Clear, uncluttered layout for easy reference</li>\n      <li>Stats and abilities organised by phase (KT 2018)</li>\n    </ul>\n  </Jumbotron>\n}\n\nexport default Intro;\n","import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport type { DropzoneOptions } from 'react-dropzone'\nimport Intro from './Intro'\nimport { Row, Col, Alert, Card } from 'react-bootstrap'\n\ntype Props = {\n  onUpload: DropzoneOptions[\"onDrop\"],\n}\n\nfunction Homepage(props: Props) {\n  return <>\n    <Intro />\n    <Row>\n      <Col>\n        <Card>\n          <Card.Header as=\"h3\">Step 1</Card.Header>\n          <Card.Body style={{minHeight: '12em'}}>\n            <Card.Text>\n              Build your force in{' '}\n              <a href='https://battlescribe.net/'>Battlescribe</a>.\n            </Card.Text>\n            <Card.Text>\n              Supported systems:\n              <ul>\n                <li>Kill Team 2018</li>\n                <li>Kill Team 2021</li>\n              </ul>\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col>\n        <Card>\n          <Card.Header as=\"h3\">Step 2</Card.Header>\n          <Card.Body style={{minHeight: '12em'}}>\n            <Dropzone onDrop={props.onUpload} accept='.ros,.rosz'>\n              {({ getRootProps, getInputProps }) => (\n                <Alert variant='primary' {...getRootProps()} style={{ textAlign: 'center' }}>\n                  <input {...getInputProps()} />\n                  <p>Drop your roster file here, or click to select one.</p>\n                  <p><em>(*.rosz and *.ros accepted)</em></p>\n                </Alert>\n              )}\n            </Dropzone>\n          </Card.Body>\n        </Card>\n      </Col>\n      <Col>\n        <Card>\n          <Card.Header as=\"h3\">Step 3</Card.Header>\n          <Card.Body style={{minHeight: '12em'}}>\n            <Card.Text>\n              Print your datasheets out, and never forget an ability again!\n            </Card.Text>\n            <Card.Text>\n              Prepare to dominate your foes!\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n    <footer>\n      Built with <a href='https://reactjs.org/'>React</a> and <a href='https://getbootstrap.com'>Bootstrap</a>.\n      Icons courtesy of <a href='https://killteam.app/'>Companion for Kill Team</a>.\n      Released as <a href='https://github.com/floppy/dataslate'>Open Source</a>,\n      report problems <a href='https://github.com/floppy/dataslate/issues/new'>on GitHub</a>.\n      Version: <em><a {...{href: `https://github.com/floppy/dataslate/tree/${process.env.REACT_APP_GIT_SHA}`}} >{process.env.REACT_APP_GIT_SHA}</a></em>\n    </footer>\n  </>\n}\n\nexport default Homepage;\n","import React from 'react';\nimport { Col } from 'react-bootstrap'\n\ntype Props = {\n  name: string,\n  note?: string,\n  children: React.ReactNode,\n};\n\nfunction Phase(props: Props) {\n  return <div style={{\n    pageBreakAfter: 'always',\n  }}>\n    <h2 style={{\n      background: '#FF6F2D',\n      color: 'white',\n      padding: '10px',\n      width: '100%',\n      display: 'flex',\n    }}>\n      <Col>\n        {props.name} Phase\n      </Col>\n      <Col style={{flexGrow: 0, textAlign: 'right'}}>\n        {props.note && (\n          <small>{props.note}</small>\n        )}\n      </Col>\n    </h2>\n    {props.children}\n  </div>\n}\n\nexport default Phase;\n","import React from 'react';\nimport { Ability } from '../../types/Ability';\nimport { Table } from 'react-bootstrap';\nimport _ from 'lodash'\n\ntype Props = {\n  abilities: Ability[],\n  phase: string,\n  highlight?: boolean,\n};\n\nfunction AbilityList(props: Props) {\n  const abilities = props.phase ?\n    props.abilities.filter((x) => (x.phases && x.phases.indexOf(props.phase) >= 0)) :\n    props.abilities.filter((x) => (x.phases && x.phases.length === 0))\n  const variant = props.highlight ? \"primary\" : \"\";\n\n  return abilities.length === 0 ? <></> : (\n    <Table striped bordered size=\"sm\" variant={variant}>\n      <thead>\n        <tr>\n          <th>Ability</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(abilities, ['name']).map((x: Ability) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AbilityList;\n","import React from 'react'\nimport { Table } from 'react-bootstrap'\n\ntype Props = {\n  movement: number,\n  weapon_skill: number,\n  ballistic_skill: number,\n  strength: number,\n  toughness: number,\n  wounds: number,\n  attacks: number,\n  additional_attacks: number,\n  leadership: number,\n  save: number,\n  invulnerable_save: number,\n  points: number,\n}\n\nfunction StatsTable (props: Props) {\n  return (\n    <Table striped bordered size=\"sm\">\n      <thead>\n        <tr>\n          <th>M</th>\n          <th>WS</th>\n          <th>BS</th>\n          <th>S</th>\n          <th>T</th>\n          <th>W</th>\n          <th>A</th>\n          <th>Ld</th>\n          <th>Sv</th>\n          <th>Points</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{props.movement}&quot;</td>\n          <td>{props.weapon_skill}+</td>\n          <td>{isNaN(props.ballistic_skill) ? '-' : props.ballistic_skill+\"+\"}</td>\n          <td>{props.strength}</td>\n          <td>{props.toughness}</td>\n          <td>{props.wounds}</td>\n          <td>{props.attacks}\n          { props.additional_attacks ? <strong>{' +'}{props.additional_attacks}</strong> : null}\n          </td>\n          <td>{props.leadership}</td>\n          <td>{props.save}+\n          { props.invulnerable_save ? <>{' / '}<strong>{props.invulnerable_save}++</strong></> : null}</td>\n          <td>{props.points}</td>\n        </tr>\n      </tbody>\n    </Table>\n  )\n}\n\nexport default StatsTable\n","import React from 'react';\n\ntype Props = {\n  specialism: string;\n};\n\nexport function SpecialistIcon(props: Props) {\n  return (props.specialism\n    ? <img className='specialism' style={{height: '1em', marginRight: '10px'}} alt={props.specialism} src={`/icons/${props.specialism.toLowerCase()}.svg`}/>\n    : <></>\n  );\n}\n","import React from 'react';\n\ntype Props = {\n  category: string;\n};\n\nexport function CategoryIcon(props: Props) {\n  return (props.category && props.category.toLowerCase() !== 'specialist' && props.category.toLowerCase() !== 'specialist retainer'\n    ? <img className='category' style={{height: '1em', marginRight: '10px'}} alt={props.category} src={`/icons/${props.category.toLowerCase()}.svg`}/>\n    : <></>\n);\n}\n","import React from 'react';\nimport { SpecialistIcon } from './KillTeam2018/SpecialistIcon';\nimport { CategoryIcon } from './KillTeam2018/CategoryIcon';\nimport { Col } from 'react-bootstrap'\nimport ReactBootstrapSlider from 'react-bootstrap-slider';\nimport _ from 'lodash'\n\ntype Props = {\n  showSelector?: boolean,\n  onSelectionChanged?: (uuid: string, value: number) => void,\n  selected: number,\n  count: number,\n  uuid: string,\n  name: string,\n  type: string,\n  category?: string,\n  specialism?: string,\n};\n\nexport function ModelTitle(props: Props) {\n  const headingStyle = {\n    background: 'black',\n    color: 'white',\n    padding: '5px',\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-between',\n  }\n  const titleComponents = _.without([\n    props.type,\n    (props.category === \"Specialist\" || props.category === \"Specialist Retainer\"\n      ? props.specialism\n      : props.category)\n  ],null, undefined, \"\");\n  return (\n    <h3 style={headingStyle}>\n      <Col>\n        {props.category && props.specialism && (props.category === \"Specialist\" || props.category === \"Specialist Retainer\") && <SpecialistIcon specialism={props.specialism} />}\n        {props.category && <CategoryIcon category={props.category} />}\n        {props.selected > 1 && (\n          <small>{props.selected} × </small>\n        )}\n        <strong>{titleComponents[0]} </strong>\n        <small>{_.join(_.slice(titleComponents,1), \", \")}</small>\n      </Col>\n      {props.showSelector && (\n        <Col style={{flexGrow: 0}}>\n          <ReactBootstrapSlider\n            value={props.selected}\n            slideStop={(x: any) => props.onSelectionChanged && props.onSelectionChanged(props.uuid, x.target.value)}\n            step={1}\n            max={props.count}\n            min={0} />\n        </Col>\n      )}\n    </h3>\n  );\n}\n","import React from 'react';\nimport { Badge } from 'react-bootstrap'\n\ntype Props = {\n  faction: string | null,\n  keywords: string[]\n};\n\nexport function KeywordList(props: Props) {\n  return <div style={{background: \"rgba(0, 0, 0, 0.125)\", padding: \"5px 10px 0px 10px\"}}>\n    { props.faction ?\n      <Badge pill variant=\"primary\" className=\"mb-2\" style={{\n        textTransform: \"uppercase\",\n        marginRight: \"10px\",\n      }}>\n        {props.faction}\n      </Badge> : <></>\n    }\n    {props.keywords.map((keyword: string) => (\n      <Badge pill variant=\"secondary\" className=\"mb-2\" style={{\n        textTransform: \"uppercase\",\n        marginRight: \"10px\",\n      }}>\n        {keyword}\n      </Badge>\n    ))}\n  </div>\n}\n","import React from 'react';\nimport StatsTable from './StatsTable';\nimport AbilityList from './AbilityList';\nimport { Card } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle';\nimport { KeywordList } from '../KeywordList';\nimport { Model } from '../../types/KillTeam2018';\n\ntype Props = {\n  model: Model\n  onSelectionChanged: (uuid: string, value: number) => void,\n};\n\nexport function NoPhaseDetails(props: Props) {\n  return (\n    <Card className={props.model.selected > 0 ? \"included\" : \"excluded\"}>\n      <ModelTitle {...props.model} showSelector onSelectionChanged={props.onSelectionChanged} />\n      <Card.Body>\n        {props.model.category === \"Commander\" && <div>Commander specialism: <strong>{props.model.specialism}</strong></div>}\n        <p>{props.model.weapons.map((w) => (w.name)).concat(props.model.wargear.map((w) => (w.name))).join(\", \")}</p>\n        <StatsTable {...props.model.stats} points={props.model.points} />\n        <AbilityList abilities={props.model.abilities} phase=''/>\n      </Card.Body>\n      <KeywordList faction={props.model.faction} keywords={props.model.keywords} />\n    </Card>\n  );\n}\n","import React from 'react'\nimport { Badge } from 'react-bootstrap'\n\ntype Props = {\n  name: string,\n  value: string,\n  secondaryValue?: string | null,\n}\n\nexport function StatBadge (props: Props) {\n\n  return (\n    <Badge pill variant=\"dark\" className=\"w-100 mb-2 px-0\">\n      <div className=\"text-light\">{props.name}</div>\n      <div className=\"h1\">\n        { props.value }\n        { props.secondaryValue\n          ? <small>{props.secondaryValue}</small>\n          : <></>\n        }\n      </div>\n    </Badge>\n  )\n}\n","import React from 'react';\nimport AbilityList from './AbilityList';\nimport { StatBadge } from '../StatBadge';\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle';\n\nimport { Model } from '../../types/KillTeam2018';\n\ntype Props = {\n  model: Model\n};\n\nexport function MovementPhaseDetails(props: Props) {\n  return (\n    <Row>\n      <Col sm=\"11\">\n        <ModelTitle {...props.model}/>\n        <AbilityList abilities={props.model.abilities} phase='movement'/>\n      </Col>\n      <Col sm=\"1\" className=\"px-1\">\n        <StatBadge name=\"M\" value={`${props.model.stats.movement}`}/>\n      </Col>\n    </Row>\n  );\n}\n","import React from 'react';\nimport AbilityList from './AbilityList';\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle';\nimport { Model } from '../../types/KillTeam2018';\n\ntype Props = {\n  model: Model\n};\n\nexport function ScoutingPhaseDetails(props: Props) {\n  return (\n    <Row>\n      <Col>\n        <ModelTitle {...props.model}/>\n        <AbilityList abilities={props.model.abilities} phase='scouting'/>\n      </Col>\n    </Row>\n  );\n}\n\nexport function hasScoutingPhase(model: Model) {\n  return ((model.abilities.filter((x) => (x.phases && x.phases.indexOf(\"scouting\") >= 0))).length > 0)\n}\n","import React from 'react';\nimport AbilityList from './AbilityList';\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle';\nimport { Model } from '../../types/KillTeam2018';\n\ntype Props = {\n  model: Model\n};\n\nexport function DeploymentPhaseDetails(props: Props) {\n  return (\n    <Row>\n      <Col>\n        <ModelTitle {...props.model}/>\n        <AbilityList abilities={props.model.abilities} phase='deployment'/>\n      </Col>\n    </Row>\n  );\n}\n\nexport function hasDeploymentPhase(model: Model) {\n  return ((model.abilities.filter((x) => (x.phases && x.phases.indexOf(\"deployment\") >= 0))).length > 0)\n}\n","import React from 'react';\nimport AbilityList from './AbilityList';\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle';\nimport { Model } from '../../types/KillTeam2018';\n\ntype Props = {\n  model: Model\n};\n\nexport function InitiativePhaseDetails(props: Props) {\n  return (\n    <Row>\n      <Col>\n        <ModelTitle {...props.model}/>\n        <AbilityList abilities={props.model.abilities} phase='initiative'/>\n      </Col>\n    </Row>\n  );\n}\n\nexport function hasInitiativePhase(model: Model) {\n  return ((model.abilities.filter((x) => (x.phases && x.phases.indexOf(\"initiative\") >= 0))).length > 0)\n}\n","import React from 'react';\nimport { PsychicPower } from '../../types/KillTeam2018';\nimport { Table } from 'react-bootstrap';\nimport _ from 'lodash'\n\ntype Props = {\n  powers: PsychicPower[],\n};\n\nfunction PsychicPowerList(props: Props) {\n  return props.powers.length === 0 ? <></> : (\n    <Table striped bordered size=\"sm\">\n      <thead>\n        <tr>\n          <th>Power</th>\n          <th>Warp Charge</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(props.powers, ['name']).map((x: PsychicPower) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.charge}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default PsychicPowerList;\n","import React from 'react';\nimport AbilityList from './AbilityList';\nimport PsychicPowerList from './PsychicPowerList';\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle';\nimport { Model } from '../../types/KillTeam2018';\n\ntype Props = {\n  model: Model\n};\n\nexport function PsychicPhaseDetails(props: Props) {\n  return (\n    <Row>\n      <Col>\n        <ModelTitle {...props.model}/>\n        <PsychicPowerList powers={props.model.psychicPowers}/>\n        <AbilityList abilities={props.model.abilities} phase='psychic'/>\n      </Col>\n    </Row>\n  );\n}\n\nexport function hasPsychicPhase(model: Model) {\n  return (model.psychicPowers.length > 0 || (model.abilities.filter((x) => (x.phases && x.phases.indexOf(\"psychic\") >= 0))).length > 0)\n}\n","import React from 'react';\nimport { Weapon } from '../../types/KillTeam2018';\nimport { Table } from 'react-bootstrap';\nimport _ from 'lodash'\n\ntype Props = {\n  weapons: Weapon[],\n  phase: string,\n  userStrength: number,\n};\n\nfunction WeaponList(props: Props) {\n  const weapons = props.phase === 'shooting'\n    ? props.weapons.filter((x) => (x.type !== \"Melee\"))\n    : props.weapons.filter((x) => (x.type === \"Melee\"))\n\n  return weapons.length === 0 ? <></> : (\n    <Table striped bordered size=\"sm\">\n      <thead>\n        <tr>\n          <th>Weapon</th>\n          {props.phase === \"shooting\" && <th>Range</th>}\n          {props.phase === \"shooting\" && <th>Type</th>}\n          {props.phase === \"shooting\" && <th>Shots</th>}\n          <th>S</th>\n          <th>AP</th>\n          <th>D</th>\n          <th>Abilities</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(weapons, ['name']).map((x: Weapon) => (\n          <tr>\n            <td style={{\"whiteSpace\": \"nowrap\"}}>{x.name}</td>\n            {props.phase === \"shooting\" && <td>{x.range}&quot;</td>}\n            {props.phase === \"shooting\" && <td style={{\"whiteSpace\": \"nowrap\"}}>{x.type}</td>}\n            {props.phase === \"shooting\" && <td style={{\"whiteSpace\": \"nowrap\"}}>{x.shots}</td>}\n            <td>{x.strength}</td>\n            <td>{x.armourPiercing}</td>\n            <td>{x.damage}</td>\n            <td>{x.abilities}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default WeaponList;\n","import React from 'react';\nimport { StatBadge } from '../StatBadge';\nimport AbilityList from './AbilityList';\nimport WeaponList from './WeaponList';\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle';\n\nimport { Model } from '../../types/KillTeam2018';\n\ntype Props = {\n  model: Model\n};\n\nexport function ShootingPhaseDetails(props: Props) {\n  return (\n    <Row>\n      <Col sm=\"10\">\n        <ModelTitle {...props.model}/>\n        {hasRangedWeapons(props.model) && <WeaponList weapons={props.model.weapons} phase='shooting' userStrength={props.model.stats.strength}/>}\n        <AbilityList abilities={props.model.abilities} phase='shooting'/>\n      </Col>\n      <Col sm=\"1\" className=\"px-1\">\n        {hasRangedWeapons(props.model) && <StatBadge name=\"BS\" value={`${props.model.stats.ballistic_skill}`} secondaryValue=\"+\"/>}\n        <StatBadge name=\"T\" value={`${props.model.stats.toughness}`}/>\n      </Col>\n      <Col sm=\"1\" className=\"px-1\">\n        <StatBadge name=\"Sv\" value={`${props.model.stats.save}`} secondaryValue=\"+\"/>\n        { props.model.stats.invulnerable_save\n          ? <StatBadge name=\"Inv\" value={`${props.model.stats.invulnerable_save}`} secondaryValue=\"+\"/>\n          : <></>\n        }\n      </Col>\n    </Row>\n  );\n}\n\nexport function hasRangedWeapons(model: Model) {\n  return !isNaN(model.stats.ballistic_skill) && (model.weapons.filter((x) => (x.type !== \"Melee\")).length > 0)\n}\n","import React from 'react';\nimport { StatBadge } from '../StatBadge';\nimport AbilityList from './AbilityList';\nimport WeaponList from './WeaponList';\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle';\n\nimport { Model } from '../../types/KillTeam2018';\n\ntype Props = {\n  model: Model\n};\n\nexport function FightPhaseDetails(props: Props) {\n  return (\n    <Row>\n      <Col sm=\"10\">\n        <ModelTitle {...props.model}/>\n        <WeaponList weapons={props.model.weapons} phase='fight' userStrength={props.model.stats.strength}/>\n        <AbilityList abilities={props.model.abilities} phase='fight'/>\n      </Col>\n      <Col sm=\"1\" className=\"px-1\">\n        <StatBadge name=\"A\" value={`${props.model.stats.attacks}`} secondaryValue={ props.model.stats.additional_attacks ? `+${props.model.stats.additional_attacks}` : null}/>\n        <StatBadge name=\"T\" value={`${props.model.stats.toughness}`}/>\n      </Col>\n      <Col sm=\"1\" className=\"px-1\">\n        <StatBadge name=\"WS\" value={`${props.model.stats.weapon_skill}`} secondaryValue=\"+\"/>\n        <StatBadge name=\"Sv\" value={`${props.model.stats.save}`} secondaryValue=\"+\"/>\n        { props.model.stats.invulnerable_save\n          ? <StatBadge name=\"Inv\" value={`${props.model.stats.invulnerable_save}`} secondaryValue=\"+\"/>\n          : <></>\n        }\n      </Col>\n    </Row>\n  );\n}\n","import React from 'react';\nimport { StatBadge } from '../StatBadge';\nimport AbilityList from './AbilityList';\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle';\n\nimport { Model } from '../../types/KillTeam2018';\n\ntype Props = {\n  model: Model\n};\n\nexport function MoralePhaseDetails(props: Props) {\n  return (\n    <Row>\n      <Col sm=\"11\">\n        <ModelTitle {...props.model}/>\n        <AbilityList abilities={props.model.abilities} phase='morale'/>\n      </Col>\n      <Col sm=\"1\" className=\"px-1\">\n        <StatBadge name=\"Ld\" value={`${props.model.stats.leadership}`}/>\n      </Col>\n    </Row>\n  );\n}\n","import React, { MouseEvent } from 'react';\nimport { Button } from 'react-bootstrap';\n\ntype Props = {\n  onClose: (event: MouseEvent<HTMLButtonElement>) => void,\n};\n\nexport function CloseButton(props: Props) {\n  return (<Button variant=\"dark\" className='d-print-none' onClick={props.onClose}>Close</Button>);\n}\n","import React, { MouseEvent } from 'react';\nimport { Col } from 'react-bootstrap';\nimport { Model } from '../../types/KillTeam2018';\nimport { Ability } from '../../types/Ability';\nimport Phase from './Phase';\nimport AbilityList from './AbilityList';\nimport { NoPhaseDetails } from './NoPhaseDetails';\nimport { MovementPhaseDetails } from './MovementPhaseDetails';\nimport { ScoutingPhaseDetails, hasScoutingPhase } from './ScoutingPhaseDetails';\nimport { DeploymentPhaseDetails, hasDeploymentPhase } from './DeploymentPhaseDetails';\nimport { InitiativePhaseDetails, hasInitiativePhase } from './InitiativePhaseDetails';\nimport { PsychicPhaseDetails, hasPsychicPhase } from './PsychicPhaseDetails';\nimport { ShootingPhaseDetails } from './ShootingPhaseDetails';\nimport { FightPhaseDetails } from './FightPhaseDetails';\nimport { MoralePhaseDetails } from './MoralePhaseDetails';\nimport { CloseButton } from '../CloseButton';\nimport _ from 'lodash'\n\ntype Props = {\n  name: string,\n  models: Model[],\n  forceRules: Ability[],\n  onClose: (event: MouseEvent<HTMLButtonElement>) => void,\n  onSelectionChanged: (uuid: string, value: number) => void,\n};\n\nexport function Roster(props: Props) {\n  // Display models sorted by category and type\n  const sortedModels = _.sortBy(props.models, (x: Model) => ([x.category == null, x.category, x.type]))\n  // Work out which models are actually selected\n  const selectedModels = _.filter(sortedModels, (x: Model) => (x.selected > 0))\n  return <>\n    <h1 style={{\n      background: '#FF6F2D',\n      color: 'white',\n      padding: '10px',\n      width: '100%',\n      display: 'flex',\n    }}>\n      <Col>\n        {props.name}\n      </Col>\n      <Col style={{flexGrow: 0, textAlign: 'right'}}>\n        <small>{_.sumBy(props.models, (model: Model) => (model.selected * model.points))}pts</small>\n      </Col>\n      <Col style={{flexGrow: 0, textAlign: 'right'}}>\n        <CloseButton onClose={props.onClose}/>\n      </Col>\n    </h1>\n    <>\n      <AbilityList abilities={props.forceRules} phase=\"\" highlight/>\n      {sortedModels.map((model: Model) => (\n        <NoPhaseDetails model={model} onSelectionChanged={props.onSelectionChanged}/>\n      ))}\n    </>\n    {_.some(selectedModels, hasScoutingPhase) &&\n      <Phase name=\"scouting\">\n        <>\n          <AbilityList abilities={props.forceRules} phase=\"scouting\" highlight/>\n          {selectedModels.map((model: Model) => (\n            hasScoutingPhase(model) &&\n            <ScoutingPhaseDetails model={model}/>\n          ))}\n        </>\n      </Phase>\n    }\n    {_.some(selectedModels, hasDeploymentPhase) &&\n      <Phase name=\"deployment\">\n        <>\n          <AbilityList abilities={props.forceRules} phase=\"deployment\" highlight/>\n          {selectedModels.map((model: Model) => (\n            hasDeploymentPhase(model) &&\n            <DeploymentPhaseDetails model={model}/>\n          ))}\n        </>\n      </Phase>\n    }\n    {_.some(selectedModels, hasInitiativePhase) &&\n      <Phase name=\"initiative\">\n        <>\n          <AbilityList abilities={props.forceRules} phase=\"initiative\" highlight/>\n          {selectedModels.map((model: Model) => (\n            hasInitiativePhase(model) &&\n            <InitiativePhaseDetails model={model}/>\n          ))}\n        </>\n      </Phase>\n    }\n    <Phase name=\"movement\">\n      <>\n        <AbilityList abilities={props.forceRules} phase=\"movement\" highlight/>\n        {selectedModels.map((model: Model) => (\n          <MovementPhaseDetails model={model}/>\n        ))}\n      </>\n    </Phase>\n    {_.some(selectedModels, hasPsychicPhase) &&\n      <Phase name=\"psychic\">\n        <>\n          <AbilityList abilities={props.forceRules} phase=\"psychic\" highlight/>\n          {selectedModels.map((model: Model) => (\n            hasPsychicPhase(model) &&\n            <PsychicPhaseDetails model={model}/>\n          ))}\n        </>\n      </Phase>\n    }\n    <Phase name=\"shooting\">\n      <>\n        <AbilityList abilities={props.forceRules} phase=\"shooting\" highlight />\n        {selectedModels.map((model: Model) => (\n          <ShootingPhaseDetails model={model}/>\n        ))}\n      </>\n    </Phase>\n    <Phase name=\"fight\">\n      <>\n        <AbilityList abilities={props.forceRules} phase=\"fight\" highlight/>\n        {selectedModels.map((model: Model) => (\n          <FightPhaseDetails model={model}/>\n        ))}\n      </>\n    </Phase>\n    <Phase name=\"morale\">\n      <>\n        <AbilityList abilities={props.forceRules} phase=\"morale\" highlight/>\n        {selectedModels.map((model: Model) => (\n          <MoralePhaseDetails model={model}/>\n        ))}\n      </>\n    </Phase>\n  </>\n}\n","import React from 'react';\nimport reactStringReplace from 'react-string-replace'\n\ntype Props = {\n  children: React.ReactNode,\n};\n\nexport function HighlightedText(props: Props) {\n  let output = [props.children];\n  output = reactStringReplace(output, '▲', () => <span className=\"triangle\">▲</span>)\n  output = reactStringReplace(output, '●', () => <span className=\"circle\">●</span>)\n  output = reactStringReplace(output, '○', () => <span className=\"circle\">●</span>)\n  output = reactStringReplace(output, '⬤', () => <span className=\"circle\">●</span>)\n  output = reactStringReplace(output, '⬛', () => <span className=\"square\">■</span>)\n  output = reactStringReplace(output, '■', () => <span className=\"square\">■</span>)\n  output = reactStringReplace(output, '⬟', () => <span className=\"pentagon\">⬟</span>)\n  output = output.filter(el => el !== '')\n\n  return <>{output}</>\n}\n","import React from 'react';\nimport { Weapon } from '../../types/KillTeam2021';\nimport { Table } from 'react-bootstrap';\nimport { HighlightedText } from './HighlightedText'\n\ntype Props = {\n  weapons: Weapon[],\n};\n\nexport function WeaponList(props: Props) {\n  return (\n    <>\n      <Table striped bordered size=\"sm\">\n        <thead>\n          <tr>\n            <th>Weapon</th>\n            <th>Attacks</th>\n            <th>Hit</th>\n            <th>Damage</th>\n            <th>Rules</th>\n            <th>Critical</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.weapons.map((x: Weapon) => (\n            <tr>\n              <td>{x.name}</td>\n              <td>{x.attacks}</td>\n              <td>{x.hit}+</td>\n              <td>{x.damage} / {x.criticalDamage}</td>\n              <td><HighlightedText>{x.specialRules}</HighlightedText></td>\n              <td><HighlightedText>{x.criticalRules}</HighlightedText></td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n}\n","import React from 'react';\nimport { Equipment } from '../../types/KillTeam2021';\nimport { Card } from 'react-bootstrap';\nimport { HighlightedText } from './HighlightedText'\n\ntype Props = {\n  equipment: Equipment[],\n};\n\nexport function EquipmentList(props: Props) {\n  return props.equipment.length === 0 ? <></> : (\n    <Card border=\"secondary\" bg=\"light\">\n      <Card.Header style={{ background: \"rgba(0, 0, 0, 0.05)\"}} as=\"h4\">\n        Equipment\n      </Card.Header>\n      <Card.Body>\n        {props.equipment.map((x: Equipment) => (\n          <p>\n            <strong>{x.name} ({x.cost} EP)</strong>\n            {x.description\n              ? <><strong>: </strong><HighlightedText>{x.description}</HighlightedText></>\n              : <></>\n            }\n          </p>\n        ))}\n      </Card.Body>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Action } from '../../types/KillTeam2021';\nimport { Card } from 'react-bootstrap';\nimport _ from 'lodash'\nimport { HighlightedText } from './HighlightedText'\n\ntype Props = {\n  actions: Action[]\n};\n\nexport function ActionList(props: Props) {\n  return <>\n    {_.sortBy(props.actions, ['name']).map((x: Action) => (\n      <Card border=\"primary\" bg=\"light\">\n        <Card.Header style={{ background: \"#FF6F2D\", color: \"white\"}} as=\"h4\">\n          {x.name}\n        </Card.Header>\n        <Card.Body>\n          <HighlightedText>{x.description}</HighlightedText>\n        </Card.Body>\n      </Card>\n    ))}\n  </>\n}\n","import React from 'react';\nimport { Table } from 'react-bootstrap'\n\ntype Props = {\n  wounds: number,\n  names: string[],\n};\n\nexport function WoundTracks(props: Props) {\n  return <Table striped bordered size=\"sm\">\n    <thead>\n      <tr>\n        <th>Operative</th>\n        <th>Wound Track</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.names.map((name) => (\n        <tr>\n          <td>{name}</td>\n          <td>{\"□ \".repeat(props.wounds)}</td>\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n}\n","import React from 'react';\nimport { Ability } from '../../types/Ability';\nimport { Card } from 'react-bootstrap';\nimport _ from 'lodash'\nimport { HighlightedText } from './HighlightedText'\n\ntype Props = {\n  abilities: Ability[],\n};\n\nfunction AbilityList(props: Props) {\n  return props.abilities.length === 0 ? <></> : (\n    <Card border=\"secondary\" bg=\"light\">\n      <Card.Header style={{ background: \"rgba(0, 0, 0, 0.05)\"}} as=\"h4\">\n        Abilities\n      </Card.Header>\n      <Card.Body>\n        {_.sortBy(props.abilities, ['name']).map((x: Ability) => (\n          <p>\n            <strong>{x.name}: </strong>\n            <HighlightedText>{x.description}</HighlightedText>\n          </p>\n        ))}\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default AbilityList;\n","import React from 'react';\nimport { Card } from 'react-bootstrap'\nimport { Row, Col } from 'react-bootstrap'\nimport { Datacard } from '../../types/KillTeam2021';\nimport { ModelTitle } from '../ModelTitle'\nimport { WeaponList } from './WeaponList'\nimport { StatBadge } from '../StatBadge'\nimport { EquipmentList } from './EquipmentList'\nimport { ActionList } from './ActionList'\nimport { KeywordList } from '../KeywordList'\nimport { WoundTracks } from './WoundTracks'\nimport AbilityList from './AbilityList';\nimport { v4 as uuidv4 } from 'uuid'\n\n\ntype Props = {\n  datacard: Datacard\n};\n\nexport function Datasheet(props: Props) {\n  return (\n    <Card className={props.datacard.operativeNames.length > 0 ? \"included\" : \"excluded\"}>\n      <ModelTitle name=\"\"\n        type={props.datacard.name}\n        selected={props.datacard.operativeNames.length}\n        count={props.datacard.operativeNames.length}\n        uuid={uuidv4()}\n        category={props.datacard.leader ? \"Specialist\" : \"\"}\n        specialism={props.datacard.leader ? \"Leader\" : \"\"}\n      />\n      <Card.Body>\n        <Row>\n          <Col sm=\"10\">\n            <WoundTracks wounds={props.datacard.stats.wounds} names={props.datacard.operativeNames} />\n            <WeaponList weapons={props.datacard.weapons} />\n            <Row>\n              <Col>\n                <AbilityList abilities={props.datacard.abilities} />\n                {props.datacard.actions.length === 0\n                  ? <></>\n                  : <EquipmentList equipment={props.datacard.equipment} />\n                }\n              </Col>\n              <Col>\n                {props.datacard.actions.length === 0\n                  ? <EquipmentList equipment={props.datacard.equipment} />\n                  : <ActionList actions={props.datacard.actions} />\n                }\n              </Col>\n            </Row>\n          </Col>\n          <Col sm=\"1\" className=\"px-1\">\n            <StatBadge name=\"M\" value={`${props.datacard.stats.movement}●`}/>\n            <StatBadge name=\"GA\" value={`${props.datacard.stats.groupActivation}`}/>\n            <StatBadge name=\"DF\" value={`${props.datacard.stats.defence}`}/>\n          </Col>\n          <Col sm=\"1\" className=\"px-1\">\n            <StatBadge name=\"W\" value={`${props.datacard.stats.wounds}`}/>\n            <StatBadge name=\"APL\" value={`${props.datacard.stats.actionPointLimit}`}/>\n            <StatBadge name=\"Sv\" value={`${props.datacard.stats.save}+`}/>\n          </Col>\n        </Row>\n      </Card.Body>\n      <KeywordList faction={props.datacard.faction ? `${props.datacard.faction} 💀` : null} keywords={props.datacard.keywords} />\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Ability } from '../../types/Ability';\nimport { Table } from 'react-bootstrap';\nimport _ from 'lodash'\nimport { HighlightedText } from './HighlightedText'\n\ntype Props = {\n  rules: Ability[]\n};\n\nexport function RuleList(props: Props) {\n  return props.rules.length === 0 ? <></> : (\n    <Table striped bordered>\n      <tbody>\n        {_.sortBy(props.rules, ['name']).map((x: Ability) => (\n          <tr>\n            <td><strong>{x.name}</strong></td>\n            <td><HighlightedText>{x.description}</HighlightedText></td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n","import React from 'react';\nimport { PsychicPower } from '../../types/KillTeam2021';\nimport { Card, Row, Col, Table } from 'react-bootstrap';\nimport _ from 'lodash'\nimport { HighlightedText } from './HighlightedText'\n\ntype Props = {\n  powers: PsychicPower[]\n};\n\nexport function PowerList(props: Props) {\n  return <Row xs={1} sm={2} md={3} className=\"g-4\">\n    {_.sortBy(props.powers, ['name']).map((x: PsychicPower) => (\n      <Col>\n        <Card border=\"info\" bg=\"light\">\n          <Card.Header style={{ background: \"#17a2b8\", color: \"white\"}} as=\"h4\">\n            {x.name}\n          </Card.Header>\n          <Card.Body>\n            <p>\n              <HighlightedText>{x.description}</HighlightedText>\n            </p>\n            {x.weapon\n              ? <Table striped bordered size=\"sm\">\n                  <thead>\n                    <tr>\n                      <th>A</th>\n                      <th>WS</th>\n                      <th>D</th>\n                      <th>SR</th>\n                      <th>!</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>{x.weapon.attacks}</td>\n                      <td>{x.weapon.hit}+</td>\n                      <td>{x.weapon.damage}/{x.weapon.criticalDamage}</td>\n                      <td><HighlightedText>{x.weapon.specialRules}</HighlightedText></td>\n                      <td><HighlightedText>{x.weapon.criticalRules}</HighlightedText></td>\n                    </tr>\n                  </tbody>\n                </Table>\n              : <></>\n            }\n          </Card.Body>\n        </Card>\n      </Col>\n    ))}\n  </Row>\n}\n","import React from 'react';\nimport { Ploy } from '../../types/KillTeam2021';\nimport { Card, Col, Table } from 'react-bootstrap';\nimport { HighlightedText } from './HighlightedText'\n\ntype Props = {\n  ploys: Ploy[]\n};\n\nexport function PloysColumn(props: Props) {\n  return <Col>\n    {props.ploys.map((x: Ploy) => (\n        <Card border=\"info\" bg=\"light\">\n          <Card.Header style={{ background: \"#17a2b8\", color: \"white\", display: \"flex\", justifyContent: \"space-between\" }} as=\"h4\">\n            <span>{x.name}</span>\n            <span>{x.cost}CP</span>\n          </Card.Header>\n          <Card.Body>\n            <p>\n              <HighlightedText>{x.description}</HighlightedText>\n            </p>\n            {x.weapon\n              ? <Table striped bordered size=\"sm\">\n                <thead>\n                  <tr>\n                    <th>A</th>\n                    <th>WS</th>\n                    <th>D</th>\n                    <th>SR</th>\n                    <th>!</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{x.weapon.attacks}</td>\n                    <td>{x.weapon.hit}+</td>\n                    <td>{x.weapon.damage}/{x.weapon.criticalDamage}</td>\n                    <td><HighlightedText>{x.weapon.specialRules}</HighlightedText></td>\n                    <td><HighlightedText>{x.weapon.criticalRules}</HighlightedText></td>\n                  </tr>\n                </tbody>\n              </Table>\n              : <></>\n            }\n            {\n              x.options &&\n                <ul>\n                  {x.options.map(line => <li><HighlightedText>{line}</HighlightedText></li>)}\n                </ul>\n            }\n            {\n              x.postOptionText &&\n                  <p>\n                    <HighlightedText>{x.postOptionText}</HighlightedText>\n                  </p>\n            }\n          </Card.Body>\n        </Card>\n    ))}\n  </Col>\n}\n","import React from 'react';\nimport { TacOp } from '../../types/KillTeam2021';\nimport { Card, Row, Col } from 'react-bootstrap';\nimport { HighlightedText } from './HighlightedText'\n\ntype Props = {\n  tacOps: TacOp[]\n};\n\nexport function TacOpsList(props: Props) {\n  return <Row xs={1} sm={2} md={3} className=\"g-4\">\n    {props.tacOps.map((x: TacOp) => (\n      <Col>\n        <Card border=\"info\" bg=\"light\">\n          <Card.Header style={{ background: \"#17a2b8\", color: \"white\", display: \"flex\", justifyContent: \"space-between\" }} as=\"h4\">\n            <span>Tac Op {x.id}</span>\n            <span>{x.name}</span>\n          </Card.Header>\n          <Card.Body>\n            <p>\n              {x.revealTime}\n            </p>\n            <p>\n              <ul>\n                {x.description.map(line => <li><HighlightedText>{line}</HighlightedText></li>)}\n              </ul>\n            </p>\n            {\n              x.action &&\n              <>\n                <p>\n                  Friendly operatives an perform the following mission action:\n                </p>\n                <p>\n                  <Card border=\"primary\" bg=\"light\">\n                    <Card.Header style={{ background: \"#FF6F2D\", color: \"white\", display: \"flex\", justifyContent: \"space-between\"}} as=\"h4\">\n                      <span>{x.action.name}</span>\n                      <span>{x.action.cost}AP</span>\n                    </Card.Header>\n                    <Card.Body>\n                      <HighlightedText>{x.action.description}</HighlightedText>\n                    </Card.Body>\n                  </Card>\n                </p>\n              </>\n            }\n          </Card.Body>\n        </Card>\n      </Col>\n    ))}\n  </Row>\n}\n","import { Ploy } from '../../../types/KillTeam2021';\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Cult Ambush',\n    cost: 1,\n    description: 'Use this Strategic Ploy in the first Turning Point. Until the end of the Turning Point, each time a friendly BROOD COVEN💀 operative is activated, you can change its order.'\n  }, {\n    name: 'Lurk in the shadows',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly BROOD COVEN💀 operative, in the Roll Defence Dice step of that shooting attack,\n                  before rolling your defence dice, if it is in Cover and either has a Conceal order or is ready, you can do one of the following:`,\n    options: [\n      'One additional dice can be retained as a successful normal save as a result of Cover.',\n      'Retain one dice as a successful critical save as a result of Cover instead of a normal save.'\n    ]\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Underground',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Set Up Operatives step of the mission sequence. Select one friendly BROOD COVEN💀 operative. That operative can be set up with a Conceal order\n                  anywhere on the killzone that is within ▲. of Heavy terrain and more than ⬟ from enemy operatives and the enemy drop zone.`\n  }, {\n    name: 'Into the shadows',\n    cost: 1,\n    description: `Use this Tactical Ploy at the end of a friendly BROOD COVEN💀 operative's activation. If that operative has an Engage order, change it to a Conceal order.`\n  }, {\n    name: 'Crossfire',\n    cost: 1,\n    description: `Use this Tactical Ploy after making a shooting attack against an enemy operative. Until the end of the Turning Point, each time another friendly BROOD COVEN💀 operative makes a\n                  shooting attack against that enemy operative, in the Roll Attack Dice step of that shooting attack, you can re-roll one of your Attack dice.`\n  }, {\n    name: 'Lying in the wait',\n    cost: 1,\n    description: `Use this Tactical Ploy when you activate a friendly BROOD COVEN💀 operative that has a Conceal order and is more than ■ from enemy operatives. Select one other ready\n                  friendly BROOD COVEN💀 operative that has a Conceal order, is more than ■ from enemy operatives, and is Visible to and within ■ of this operative. Ignore those operatives' Group\n                  Activation characteristics. Instead, after activating the first operative, you can activate the other before your opponent activates any operatives.`\n  }\n]\n\nconst data = { strategicPloys, tacticalPloys, tacOps: null }\n\nexport default data\n","import { Ploy } from '../../../types/KillTeam2021';\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Stalk',\n    cost: 1,\n    description: 'One friendly HIVE FLEET💀 operative that has a Conceal order and is more than ■ from enemy operatives can perform a free Normal Move action.'\n  }, {\n    name: 'Lurk',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly HIVE FLEET💀 operative, in the Roll Defence Dice step of that shooting attack, before\n                  rolling your defence dice, if it is in Cover and either has a Conceal order or is ready, one additional dice can be retained as a successful normal save as a result of Cover.`\n  }, {\n    name: 'Feed',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly HIVE FLEET💀 operative fights in combat, the first time you strike with a critical hit in that combat, inflict one additional damage.'\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Unseen hunter',\n    cost: 1,\n    description: 'Use this Tactical Ploy at the start or end of any activation. Select one friendly HIVE FLEET💀 operative that has not performed a shooting attack during this Turning Point. You can change its order.'\n  }, {\n    name: 'Will of the hive mind',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly HIVE FLEET💀 operative within ⬟ of a friendly HIVE FLEET💀 SYNAPSE operative is activated. Add 1 to the activated operative\\'s APL.'\n  }, {\n    name: 'Aggresive biostrain',\n    cost: 1,\n    description: 'Use this Tactical Ploy after making a shooting attack with a friendly HIVE FLEET💀 operative in which the target did not lose any wounds. Repeat that shooting attack.'\n  }\n]\n\nconst data = { strategicPloys, tacticalPloys, tacOps: null }\n\nexport default data\n","import { Ploy, TacOp } from '../../../types/KillTeam2021';\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Sssshhhh!',\n    cost: 1,\n    description: `Friendly KOMMANDO💀 operatives that are not within Line of Sight of enemy operatives, or have a Conceal order and are more than ⬟ from enemy operatives,\n                  can immediately perform a free Dash action. You can only use this strategic ploy once.`\n  }, {\n    name: 'Dakka! Dakka! Dakka!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly KOMMANDO💀 operative makes a shooting attack, in the Roll Attack Dice step of that shooting attack,\n                  if you retain any critical hits, you can select one of your failed hits to be retained as a successfull normal hit.`\n  }, {\n    name: 'Waaagh!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly KOMMANDO💀 operative fights in combat, in a Roll Attack Dice step of that combat,\n                  when you would retain two or more normal hits, you can select one of those hits to be retained as a critical hit instead.`\n  }, {\n    name: 'Skulk about',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly KOMMANDO💀 operative, before rolling defence dice for that shooting attack,\n                  if it has a Conceal order, you can retain one as a successfull normal save without rolling it.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Just a scratch',\n    cost: 1,\n    description: `Use this tactical Ploy in the Resolve Successfull Hits step of a shooting attack or combat, when damage would beinflicked on a friendly KOMMANDO💀 operative,\n                  (excluding KOMMANDO GROT operatives), from an attack dice. Ignore the damage inflicted from that attack dice.`\n  }, {\n    name: 'Krump \\'em!',\n    cost: 1,\n    description: 'Use this Tactical Ploy at the end of a Firefights phase. Select one friendly KOMMANDO💀 operative. It can perform a free Fight action.'\n  }, {\n    name: 'Sneaky git',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Set Up Operatives step of the mission sequence. Select one friendly KOMMANDO💀 operative (excluding BOMB SQUIG operatives).\n                  That operative can be set up with a Conceal order anywhere on the battlefield that is within ▲ of Heavy terrain and more than ⬟ from enemy operatives and the enemy drop zone.`\n  }\n]\n\nconst tacOps: TacOp[] = [\n  {\n    id: 1,\n    name: 'Blow it up!',\n    revealTime: `You can reveal this Tac Op in the Target Reveal step of the first Turning Point.\n                 Your opponent selects one terrain feature that includes any parts with the Heavy trait to be their bulwark.`,\n    description: ['If a friendly operative performs the \\'Blow it up!\\' action, you score 2VPs'],\n    action: {\n      name: 'Blow it up!',\n      cost: 2,\n      description: `An operative can perform this action while within ▲ of your opponent's bulwark. An operative cannot perform this action while within ⬤ of enemy operatives.\n                    Other than a Dash action, an operative cannot perform any other action during an activation in which it would perform this action.`\n    }\n  }, {\n    id: 2,\n    name: 'Shokk taktiks',\n    revealTime: 'Reveal this TacOp at the end of the first Turning Point',\n    description: [\n      'If any enemy operatives were incapacitated during the first Turning Point, you score 1 VP.',\n      'At the end of the second Turning Point, if friendly operatives control more objective markers than enemy operatives control, you score 1 VP'\n    ]\n  }, {\n    id: 3,\n    name: 'Get stick in!',\n    revealTime: 'You can reveal this Tac Op in the Reveal Tac Ops step of any turning Point',\n    description: [\n      'At the end of any turning Point (excluding the fourth), if three or more friendly operatives are within ⬟ of your opponents drop zone, you score 1 VP.',\n      'If you achieve the first condition at the end of any subsequent Turning Points (excluding the fourth), you score 1 VP.'\n    ]\n  }\n]\n\nconst data = { strategicPloys, tacticalPloys, tacOps }\n\nexport default data\n","import { Ploy, TacOp } from '../../../types/KillTeam2021';\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Overcharge lasguns',\n    cost: 1,\n    description: 'Until the end of the Turning Point, change the profile of lasguns that friendly VETERAN GUARDSMAN💀 operatives are equipped with to include the following:',\n    weapon: {\n      name: 'Overcharged lasgun',\n      melee: false,\n      attacks: 4,\n      hit: 4,\n      damage: 2,\n      criticalDamage: 3,\n      specialRules: 'AP1, Hot',\n      criticalRules: ''\n    }\n  }, {\n    name: 'Take cover',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a shooting attack is made against a friendly VETERAN GUARDSMAN💀 operative, if it is in Cover, improve it\\'s Save characteristic by 1 for that shooting attack.',\n  }, {\n    name: 'Into the breach',\n    cost: 1,\n    description: 'Each friendly VETERAN GUARDSMAN💀 operative within your drop zone can perform a free Dash action, but must finish that move closer to the enemy\\'s drop zone.',\n  }, {\n    name: 'Clear the line',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly VETERAN GUARDSMAN💀 operative fights in combat,\n                  before rolling your attack dice for that combat, you can retain one as a successfull normal hit withour rolling it.`,\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Inspirational leadership',\n    cost: 1,\n    description: `Use this Tactical Ploy during a VETERAN GUARDSMAN💀 LEADER operative's operation. That operative issues a\n                  Guardsman Order to all friendly VETERAN GUARDSMAN💀 operatives within ⬟ of and visible to it.`,\n  }, {\n    name: 'In death, atonement',\n    cost: 1,\n    description: `Use this Tactical Ploy when a ready friendly VETERAN GUARDSMAN💀 operative is incapacitated.\n                  That operative is not removed from the killzone until the end of your next activation and does not count as being injured.`,\n  }, {\n    name: 'Combined arms',\n    cost: 1,\n    description: `Use this Tactival Ploy after rolling your attack dice for a shooting attack made by a friendly VETERAN GUARDSMAN💀 operative.\n                  If the target of that attack is an enemy operative that was targeted by another friendly VETERAN GUARDSMAN💀 operative with a\n                  shooting attack during that Turning point, you can re-roll any or all of your attack dice for that shooting attack.`,\n  }\n]\n\nconst tacOps: TacOp[] = [{\n  id: 1,\n  name: 'Boots on the ground',\n  revealTime: 'You can reveal this Tac Op at the end of any Turning Point',\n  description: [\n    `At the end of that Turning Point, if there are more friendly operatives than enemy operatives within ⬟ of your drop zone, and there are more friendly\n     operatives than enemy operatives within ⬟ of your opponent's drop zone, you score 1VP.`,\n    'If you achieve the first condition at the end of any subsequent Turning Points, you score 1VP.'\n  ],\n}, {\n  id: 2,\n  name: 'Stand fast',\n  revealTime: 'You can reveal this Tac Op in the Reveal Tac Ops step of any Turning Point',\n  description: [\n    'At the end of any Turning Point, if friendly operatives control two or more objective markers, and frierndly operatives control more objective markers than enemy operatives, you score 1VP.',\n    'If you achieve the first condition at the end of any subsequent Turning Point, you score an additional 1VP.'\n  ],\n}, {\n  id: 3,\n  name: \"Glory in death\",\n  revealTime: 'Reveal this Tac Op at the end of the battle',\n  description: [\n    'If more friendly operatives were incapacitated than enemy operatives, but you scored more victory points from the mission objective, you score 2 VPs.'\n  ]\n}]\n\nconst data = { strategicPloys, tacticalPloys, tacOps }\n\nexport default data\n","import { Ploy } from '../../../types/KillTeam2021';\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Bolter Discipline',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly SPACE MARINE💀 operative (excluding a SCOUT operative) is activated, if it does not perform a Fight action \n                  during that activation, it can perform two Shoot actions during that activation if a bolt weapon is selected for each of those shooting attacks. A bolt weapon is a \n                  ranged weapon that includes 'bolt' in its name, e.g. boltgun, heavy bolter etc. In the case of the infernus heavy bolter, it must be the heavy bolter profile that \n                  is selected.`\n  }, {\n    name: 'Shock Assault',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly SPACE MARINE💀 operative (excluding a SCOUT operative) is activated, if it does not perform a Shoot action \n                  during that activation, it can perform two Fight actions during that activation.`\n  }, {\n    name: 'Tactical Precision',\n    cost: 1,\n    description: `Until the end of the Turning Point, while a friendly SPACE MARINE💀 operative is within ■ of and Visible to a friendly LEADER operative, each time it fights in combat \n                  or makes a shooting attack, in the Roll Attack Dice step of that combat or shooting attack, you can re-roll one of your attack dice.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Transhuman Physiology',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Roll Defence Dice step of a shooting attack, after rolling defence dice for a friendly PRIMARIS operative. You can change one of your \n                  retained normal saves to a critical save.`\n  },{\n    name: 'Only in death does duty end',\n    cost: 1,\n    description: `Use this Tactical Ploy when a ready friendly SPACE MARINE💀 operative is incapacitated. That operative is not removed from the killzone until the end of your next\n                  activation and does not count as being injured.`\n  },{\n    name: 'And they shall know no fear',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly SPACE MARINE💀 operative is activated. Until the end of that operative's activation, you can ignore any or all modifiers to \n                its APL characteristic and it is not injured.`\n  },{\n    name: 'Omni-Scrambler',\n    cost: 1,\n    description: `Use this Tactical Ploy at the start of the Firefight phase. Select one enemy operative Visible to and within ⬟ of a friendly INFILTRATOR operative. Until the end \n                  of the Turning Point that enemy operative cannot be activated until another enemy operative has been activated (unless it is the only remaining enemy operative).`\n  },{\n    name: 'Multi-Spectrum Array',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly INCURSOR operative performs a Shoot action. For that action's shooting attack, enemy operatives are not Obscured.`\n  },{\n    name: 'Terror Troop',\n    cost: 1,\n    description: `Use this Tactical Ploy during a friendly REIVER operative's activation. Until the start of the next Turning Point:`,\n    options: [\n        `Each time an enemy operative would perform a mission action or the Pick Up action, if this friendly REIVER operative is within SQUARE of that enemy operative, one additional\n        action point must be subtracted to perform that action.`,\n        `When determining control of an objective marker that friendly REIVER operative is within range of, treat enemy operatives' total APL as being 1 less. Note that this is not a modifier.`\n    ]\n  },\n\n]\n\nconst data = { strategicPloys, tacticalPloys, tacOps: null }\n\nexport default data\n","import { Ploy } from '../../../types/KillTeam2021';\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Bolter Discipline',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly GREY KNIGHT💀 operative is activated, if it does not perform a Fight action during that activation, it \n                  can perform two Shoot actions during that activation if a storm bolter is selected for each of those shooting attacks`\n  }, {\n    name: 'Shock Assault',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly GREY KNIGHT💀 operative is activated, if it does not perform a Shoot action during that activation, it \n                  can perform two Fight actions during that activation`\n  }, {\n    name: 'Tide of Shadows',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time an enemy operative on a Vantage Point makes a shooting attack, each friendly GREY KNIGHT💀 operative that has a Conceal\n                  order, is in Cover provided by Light terrain and is more than ⬟ from that enemy operative cannot be treated as being on an Engage order for that shooting attack as \n                  a result of that Vantage Point.`\n  }, {\n    name: 'Tide of Celerity',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly GREY KNIGHT💀 operative performs a Charge action, it can move an additional ▲ for that action.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Only in death does duty end',\n    cost: 1,\n    description: `Use this Tactical Ploy when a ready friendly GREY KNIGHT💀 operative is incapacitated. That operative is not removed from the killzone until the end of your next\n                  activation and does not count as being injured.`\n  },{\n    name: 'And they shall know no fear',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly GREY KNIGHT💀 operative is activated. Until the end of that operative's activation, you can ignore any or all modifiers to \n                its APL characteristic and it is not injured.`\n  }\n\n]\n\nconst data = { strategicPloys, tacticalPloys, tacOps: null }\n\nexport default data\n","import { Ploy } from '../../../types/KillTeam2021';\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Take Aim!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly operative that was issued this Guardsman Order makes a shooting attack, in the Roll Attack Dice step of that\n                  shooting attack, you can re-roll any or all of your attack dice results of 1.`\n  }, {\n    name: 'Take Cover!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly operative that was issued this Guardsman Order, in the Roll Defence Dice\n                  step of that shooting attack, if it is in Cover, you can re-roll any or all of your defence dice results of 1.`\n  }, {\n    name: 'Fix Bayonets!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly operative that was issued this Guardsman Order fights in combat, in the Roll Attack Dice step of that combat,\n                  you can re-roll any or all of your attack dice results of 1.`\n  }, {\n    name: 'Move! Move! Move!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly operative that was issued this Guardsman Order is activated, until the end of that activation, add ▲ to its\n                  Movement characteristic.`\n  }, {\n    name: 'Special Forces',\n    cost: 1,\n    description: `Select the Pick Up action or one mission action friendly TEMPESTUS SCION operatives can perform. Until the end of the Turning Point, each time a friendly TEMPESTUS SCION\n                  operative is activated, it can perform that action for one less AP (to a minimum of 0AP).`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Bring It Down!',\n    cost: 1,\n    description: `Use this Tactical Ploy after a friendly IMPERIAL GUARD💀 operative makes a shooting attack. Until the end of the Turning Point, each time another friendly IMPERIAL GUARD💀\n                  operative makes a shooting attack against the target of that shooting attack, in the Roll Attack Dice step of that subsequent shooting attack, you can re-roll any or all \n                  of your attack dice.`\n  },\n\n]\n\nconst data = { strategicPloys, tacticalPloys, tacOps: null }\n\nexport default data\n","import { Ploy } from '../../../types/KillTeam2021';\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Protector Imperative',\n    cost: 1,\n    description: `Until the end of the Turning Point:`,\n    options: [\n        `Each time a friendly FORGE WORLD💀 operative makes a shooting attack, in the Roll Attack Dice step of that shooting attack, you can re-roll one of your attack dice.`,\n        `Each time a friendly FORGE WORLD💀 operative fights in combat, in the Roll Attack Dice step of that combat, you must re-roll one of your successful hits.`\n    ],\n    postOptionText: `You can only use this Strategic Ploy once.`\n  }, {\n    name: 'Conqueror Imperative',\n    cost: 1,\n    description: `Until the end of the Turning Point:`,\n    options: [\n      `Each time a friendly FORGE WORLD💀 operative fights in combat, in the Roll Attack Dice step of that combat, you can re-roll one of your attack dice.`,\n      `Each time a friendly FORGE WORLD💀 operative makes a shooting attack, in the Roll Attack Dice step of that shooting attack, you must re-roll one of your successful hits.`\n    ],\n    postOptionText: `You can only use this Strategic Ploy once.`\n  }, {\n    name: 'Bulwark Imperative',\n    cost: 1,\n    description: `Until the end of the Turning Point:`,\n    options: [\n      `Each time a shooting attack is made against a friendly FORGE WORLD💀 operative, in the Roll Defence Dice step of that shooting attack, you can re-roll one of your defence dice.`,\n        `Subtract ⬤ from the Movement characteristic of friendly FORGE WORLD💀 operatives.`\n    ],\n    postOptionText: `You can only use this Strategic Ploy once.`\n  }, {\n    name: 'Aggressor Imperative',\n    cost: 1,\n    description: `Until the end of the Turning Point:`,\n    options: [\n      `Each time a friendly FORGE WORLD💀 operative performs a Normal Move or Charge action, it can move an additional ▲.`,\n      `Each time a shooting attack is made against a friendly FORGE WORLD💀 operative, in the Roll Defence DIce step of that shooting attack, you must re-roll one of your successful saves.`\n    ],\n    postOptionText: `You can only use this Strategic Ploy once.`\n  },\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Neurostatic Interference',\n    cost: 1,\n    description: `Use this Tactical Ploy at the start of the Firefight phase. Select one enemy operative Visible to and within ⬟ of a friendly FORGE WORLD💀 operative. Until the end\n                  of the Turning Point, that enemy operative cannot be activated until another enemy operative has been activated (unless it is the only remaining enemy operative).`\n  }, {\n    name: 'Control Edict',\n    cost: 1,\n    description: `Use this Tactical Ploy when you activate a friendly FORGE WORLD💀 LEADER operative. Select one other ready friendly FORGE WORLD💀 operative Visible to and within\n                  ■ of that LEADER operative. At the end of that LEADER operative's activation, you can activate that other ready friendly operative.`\n  },\n\n]\n\nconst data = { strategicPloys, tacticalPloys, tacOps: null }\n\nexport default data\n","import broodCoven from \"./broodCoven\"\nimport hiveFleet from \"./hiveFleet\"\nimport kommando from \"./kommando\"\nimport veteranGuardsmen from \"./veteranGuardsmen\"\nimport spaceMarine from \"./spaceMarine\"\nimport greyKnights from \"./greyKnights\"\nimport imperialGuard from \"./imperialGuard\"\nimport forgeWorld from \"./forgeWorld\"\n\nconst getFactionSpecificData = (factionName: string) => {\n  switch (factionName) {\n    case \"Veteran Guardsmen\":\n      return veteranGuardsmen;\n    case \"Kommando\":\n      return kommando;\n    case \"Brood Coven\":\n      return broodCoven;\n    case \"Hive Fleet\":\n      return hiveFleet;\n    case \"Space Marine\":\n      return spaceMarine;\n    case \"Grey Knight\":\n      return greyKnights;\n    case \"Imperial Guard\":\n      return imperialGuard;\n    case \"Forge World\":\n      return forgeWorld;\n    default:\n      return null;\n  }\n}\n\nexport default getFactionSpecificData\n","import React, { MouseEvent } from 'react';\nimport { Col, Card } from 'react-bootstrap';\nimport { CloseButton } from '../CloseButton';\nimport { Operative, Datacard, PsychicPower } from '../../types/KillTeam2021';\nimport { Datasheet } from './Datasheet';\nimport { RuleList } from './RuleList';\nimport { PowerList } from './PowerList';\nimport { PloysColumn } from './PloysColumn';\nimport { TacOpsList } from './TacOpsList';\nimport hash from 'node-object-hash'\nimport _ from 'lodash'\nimport getFactionSpecificData from './data'\n\ntype Props = {\n  name: string,\n  faction: string,\n  operatives: Operative[],\n  psychicPowers: PsychicPower[],\n  onClose: (event: MouseEvent<HTMLButtonElement>) => void,\n};\n\nconst groupByDatacard = (operatives: Operative[]): Datacard[] => {\n  const groupedOperatives = _.groupBy(operatives, (o) => (hash().hash({datacard: o.datacard, weapons: o.weapons, equipment: o.equipment})))\n  return _.map(groupedOperatives, (ops, hash) => ({\n    ...ops[0],\n    name: ops[0].datacard,\n    operativeNames: ops.map((c) => (c.name)).sort(),\n  }))\n}\n\nexport function Roster(props: Props) {\n  const headingStyle = {\n    background: '#FF6F2D',\n    color: 'black',\n    padding: '10px',\n    width: '100%',\n    display: 'flex',\n  };\n  const datacards = groupByDatacard(props.operatives)\n  const factionSpecificData = getFactionSpecificData(props.faction)\n\n  return <>\n    <h1 style={headingStyle}>\n      <Col>\n        {props.name}\n      </Col>\n      <Col style={{flexGrow: 0, textAlign: 'right'}}>\n        <CloseButton onClose={props.onClose}/>\n      </Col>\n    </h1>\n    {_.orderBy(datacards, ['leader', 'name'], ['desc', 'asc']).map((datacard: Datacard) => (\n        <Datasheet datacard={datacard}/>\n    ))}\n    <Card>\n      <Card.Header style={{...headingStyle, breakBefore: 'always'}} as=\"h2\">Rules</Card.Header>\n      <Card.Body>\n        <RuleList rules={_.uniqBy(_.flatten(datacards.map((m) => (m.rules))), 'name')}/>\n      </Card.Body>\n    </Card>\n    {props.psychicPowers.length > 0 && <Card>\n      <Card.Header style={{...headingStyle}} as=\"h2\">Psychic Powers</Card.Header>\n      <Card.Body>\n        <PowerList powers={props.psychicPowers}/>\n      </Card.Body>\n    </Card>}\n\n    {factionSpecificData &&\n      <div>\n        <div style={{display: \"flex\", justifyContent: \"space-between\", flexDirection: \"row\"}}>\n          <Card style={{width: \"100%\", marginRight: \"5px\"}}>\n            <Card.Header style={{...headingStyle}} as=\"h2\">Strategic Ploys</Card.Header>\n            <Card.Body>\n              <PloysColumn ploys={factionSpecificData.strategicPloys} />\n            </Card.Body>\n          </Card>\n          <Card style={{width: \"100%\", marginLeft: \"5px\"}}>\n            <Card.Header style={{...headingStyle}} as=\"h2\">Tactical Ploys</Card.Header>\n            <Card.Body>\n              <PloysColumn ploys={factionSpecificData.tacticalPloys} />\n            </Card.Body>\n          </Card>\n        </div>\n        {\n          factionSpecificData.tacOps &&\n            <Card>\n              <Card.Header style={{...headingStyle}} as=\"h2\">Tac Ops</Card.Header>\n              <Card.Body>\n                <TacOpsList tacOps={factionSpecificData.tacOps} />\n              </Card.Body>\n            </Card>\n        }\n      </div>\n    }\n  </>\n}\n","import _ from 'lodash'\nimport { Ability } from '../../types/Ability'\n\nconst phasePatterns = {\n  scouting: [\n    / scouting /\n  ],\n  deployment: [\n    / before the first battle round /,\n    / set up /,\n    / cult ambush /\n  ],\n  initiative: [\n    / start of each battle round /,\n    / beginning of each battle round /,\n    / at the beginning of the battle round /\n  ],\n  movement: [\n    / movement phase /,\n    / climbs? /,\n    / normal move /,\n    / advances? /,\n    / charges? /,\n    / falls? back /,\n    / reacts? /,\n    / overwatch /,\n    / retreats? /,\n    / fly /,\n    / after this model has charged /,\n    / from reserves? /,\n    / can move across /,\n    / setup within /\n  ],\n  psychic: [\n    / psychic /,\n    / deny the witch /,\n    / perils of the warp /,\n    / psychich / // handle typo\n  ],\n  shooting: [\n    / shooting phase /,\n    / shots? /,\n    / ballistic skill /,\n    / ranged /,\n    / range characteristic /,\n    / half range /,\n    / long range /,\n    / short range /,\n    / grenades? /,\n    / shoots? /,\n    / shooting /,\n    / fire[sd]+ /,\n    / firing /,\n    / obscured /,\n    / obcured /, // handle typo\n    / order(ed)? /,\n    / voice of command /,\n    / invulnerable save /,\n    / demolition charges? /,\n    / liberator autostubs /,\n    / obscurred /, // handle typo\n    / look out sir! /,\n    / pistol /,\n    / heavy weapons?/,\n    / add [0-9] to saving throws /\n  ],\n  fight: [\n    / fight phase /,\n    / fights? /,\n    / weapon skill /,\n    / attacks characteristics? /,\n    / strength characteristics? /,\n    / piles? in /,\n    / consolidates? /,\n    / melee /,\n    / close combat /,\n    / death to the false emperor /,\n    / additional attacks? /,\n    / invulnerable save /,\n    / look out sir! /,\n    / intervening terrain /,\n    / terrain that is between the two models /,\n    / damage characteristic is [0-9] in a battle round in which this model charged /,\n    / add [0-9] to saving throws /\n  ],\n  morale: [\n    / nerve /,\n    / leadership /\n  ]\n}\n\nconst genericPatterns = [\n  / weapon /,\n  / hit rolls? /,\n  / attack(s|ing)? /,\n  / saves? /,\n  / saving throws? /,\n  / injury rolls? /,\n  / wound rolls? /,\n  / loses? a wound /,\n  / fall(ing)? damage /,\n  / the bearer is taken out of action /,\n  / toughness characteristic /,\n  / suffers? a mortal wound /,\n  / taken out of action /,\n  / this weapon/,\n  / reduced to 0 wounds /\n]\n\nconst antiPatterns = {\n  deployment: [\n    / from reserve /\n  ],\n  movement: [\n    / previous movement phase /,\n    / preceding movement phase /,\n    / if the firing model moved /,\n    / moved during the movement phase /,\n    / round in which it charges or is charged /,\n    / in which it made a successful charge /,\n    / even if it fell back in the movement phase /,\n    / model that can fly /,\n    / as if it were the movement phase /,\n    / stunned /,\n    / penalty for moving /,\n    / as if the model had remained stationary /,\n    / demolition charge /\n  ],\n  psychic: [\n    / after all of this weapon's attacks have been resolved /\n  ],\n  shooting: [\n    / when (it|this model) fires overwatch /,\n    / invulnerable save (against attacks made )?in the fight phase /,\n    / as if it were your shooting phase /,\n    / tactical support turret /,\n    / out of action in the shooting phase /,\n    / mordian /\n  ],\n  fight: [\n    / the ordered model immediately fights /,\n    / shots equal to its attacks characteristic /,\n    / stunned /,\n    / target enemies at [0-9]{1,2}\" or less /,\n    / within half range /,\n    / tactical support turret /\n  ],\n  morale: [\n    / target model's leadership /,\n    / weapon against a model which has a leadership /,\n    / subtract 1 from its leadership / // phantasm grenade effect\n  ]\n}\n\nexport const calculatePhases = (description: string) => {\n  const minDesc = ' ' + description.toLowerCase().replace(/[.,)(]/g, '') + ' '\n  const phases : string[] = []\n  _.forIn(phasePatterns, (patterns, phase) => {\n    if (_.some(patterns, (re) => (re.test(minDesc)))) {\n      phases.push(phase)\n    }\n  })\n  // If there's no fight or shoot yet, test some generic patterns that could be either\n  if (!phases.includes('fight') && !phases.includes('shooting')) {\n    if (_.some(genericPatterns, (re) => (re.test(minDesc)))) {\n      phases.push('fight', 'shooting')\n    }\n  }\n  // Remove phases for some patterns that get picked up incorrectly\n  _.forIn(antiPatterns, (patterns, phase) => {\n    if (_.some(patterns, (re) => (re.test(minDesc)))) {\n      _.remove(phases, (p) => (p === phase))\n    }\n  })\n  // OK, done\n  return phases\n}\n\nexport const parseAdditionalAttacks = (description: string) => {\n  const patterns = [\n    /Add ([1-9]{1}) to this model's Attacks characteristic/,\n    / ([1-9]|an|one|two) additional attack/,\n    /(one) \\(and only one\\) attack with this weapon./\n  ]\n  const antiPatterns = [\n    /if a model/,\n    /if the bearer/,\n    /unless/\n  ]\n  return _.sum(_.map(patterns, (pattern) => {\n    const match = description.match(pattern)\n    if (match) {\n      if (_.some(antiPatterns, (re) => (re.test(description)))) {\n        return 0\n      }\n      if (match[1] === 'an' || match[1] === 'one') return 1\n      if (match[1] === 'two') return 2\n      return parseInt(match[1] || match[2])\n    }\n    return 0\n  }))\n}\n\nexport const invulnerableSave = (abilities: Ability[]) => {\n  const patterns = [\n    /models with this ability have a ([1-6]{1})\\+ invulnerable save/,\n    /has a ([1-6]{1})\\+ invulnerable save($|\\.|,| and| instead of)/,\n    /has an invulnerable save of ([1-6]{1})\\+/\n  ]\n  const saves = _.map(abilities, (a) => {\n    return _.min(_.map(patterns, (pattern) => {\n      const match = a.description.match(pattern)\n      if (match) {\n        return parseInt(match[1])\n      }\n      return null\n    }))\n  })\n  return _.min(saves)\n}\n","import { v4 as uuidv4 } from 'uuid'\nimport _ from 'lodash'\nimport hash from 'node-object-hash'\nimport * as XPath from 'xpath-ts'\nimport { parseAdditionalAttacks, calculatePhases, invulnerableSave } from './Abilities'\n\n// useNamespaces is NOT a React hook, so:\n// eslint-disable-next-line\nconst xpath = XPath.useNamespaces({ roster: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst stat = (name, model) => {\n  const nodes = xpath(`roster:profiles/roster:profile[@typeName='Model']//roster:characteristic[@name='${name}']`, model)\n  if (nodes.length > 0) {\n    return parseInt(nodes[0].childNodes[0].nodeValue)\n  } else { return '' }\n}\n\nconst weaponStat = (name, weapon, numeric) => {\n  const nodes = xpath(`roster:characteristics/roster:characteristic[@name='${name}']`, weapon)\n  if (nodes.length > 0) {\n    return numeric ? parseInt(nodes[0].childNodes[0].nodeValue) : nodes[0].childNodes[0].nodeValue\n  } else { return '' }\n}\n\nconst points = (model) => {\n  const costNode = xpath('.//roster:costs/roster:cost[@name=\\'pts\\']', model)\n  return _.sumBy(costNode, (x) => parseInt(x.getAttribute('value')))\n}\n\nconst parseForceRule = (rule) => {\n  const description = xpath('roster:description', rule)[0].childNodes[0].nodeValue\n  return {\n    name: rule.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parseAbility = (ability) => {\n  const description = xpath(\".//roster:characteristic[@name='Description']\", ability)[0].childNodes[0].nodeValue\n  return {\n    name: ability.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parseWeapon = (weapon, userStrength) => {\n  let strength = weaponStat('S', weapon, false)\n  if (strength === 'User') {\n    strength = userStrength\n  }\n  let match = /x([0-9]+)/i.exec(strength)\n  if (match) {\n    strength = userStrength * parseInt(match[1])\n  }\n  match = /\\+([0-9]+)/i.exec(strength)\n  if (match) {\n    strength = userStrength + parseInt(match[1])\n  }\n  let weaponType = weaponStat('Type', weapon, false)\n  if (weaponType !== 'Melee') { weaponType = weaponType.split(' ').slice(0, -1).join(' ') }\n  return {\n    name: weapon.getAttribute('name'),\n    range: weaponStat('Range', weapon, true),\n    type: weaponType,\n    shots: weaponStat('Type', weapon, false).split(' ').slice(-1)[0],\n    strength,\n    armourPiercing: weaponStat('AP', weapon, true),\n    damage: weaponStat('D', weapon, false),\n    abilities: weaponStat('Abilities', weapon, false)\n  }\n}\n\nconst parseWargear = (wargear) => {\n  const description = xpath(\".//roster:characteristic[@name='Ability']\", wargear)[0].childNodes[0].nodeValue\n  return {\n    name: wargear.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parsePsychicPower = (power) => {\n  let description = xpath(\".//roster:characteristic[@name='Psychic Power']\", power)[0].childNodes[0].nodeValue\n  const warpChargeDescription = description.match(/warp charge value of ([0-9]+)\\.(.*)/)\n  let charge = null\n  if (warpChargeDescription.length > 2) {\n    charge = parseInt(warpChargeDescription[1])\n    description = warpChargeDescription[2]\n  }\n  return {\n    name: power.getAttribute('name'),\n    charge,\n    description\n  }\n}\n\nexport const additionalAttacks = (weapons, abilities) => {\n  const descriptions = _.map(weapons, (w) => w.abilities).concat(_.map(abilities, (a) => a.description))\n  const attacks = _.map(descriptions, (d) => parseAdditionalAttacks(d))\n  return _.sum(attacks)\n}\n\nconst parseModel = (model) => {\n  const wargear = xpath(\".//roster:profile[@typeName='Wargear']\", model).map(parseWargear)\n  const specialismSelection = xpath(\"roster:selections/roster:selection[roster:selections/roster:selection/roster:profiles/roster:profile/@typeName='Ability']\", model)\n  const abilities = xpath(\".//roster:profile[@typeName='Ability']\", model).map(parseAbility).concat(wargear)\n  const stats = {\n    movement: stat('M', model),\n    weapon_skill: stat('WS', model),\n    ballistic_skill: stat('BS', model),\n    strength: stat('S', model),\n    toughness: stat('T', model),\n    wounds: stat('W', model),\n    attacks: stat('A', model),\n    leadership: stat('Ld', model),\n    save: stat('Sv', model),\n    invulnerable_save: invulnerableSave(abilities)\n  }\n  const closeCombatWeapon = {\n    name: 'Bare fists',\n    range: '-',\n    type: 'Melee',\n    strength: stats.strength,\n    armourPiercing: 0,\n    damage: 1,\n    abilities: 'Default close combat weapon available to all models'\n  }\n  const weapons = xpath(\".//roster:profile[@typeName='Weapon']\", model).map((x) => (parseWeapon(x, stats.strength))).concat([closeCombatWeapon])\n  stats.additional_attacks = additionalAttacks(weapons, abilities)\n  const psychicPowers = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Psychic Power']\", model).map(parsePsychicPower)\n  const category = xpath(\"roster:categories/roster:category[@primary='true']\", model)[0].getAttribute('name')\n  const faction = xpath(\"roster:categories/roster:category[@primary='false' and starts-with(@name,'Faction: ')]\", model)\n  const keywords = xpath(\"roster:categories/roster:category[@primary='false' and not(starts-with(@name,'Faction: '))]\", model).map((x) => x.getAttribute('name'))\n  _.remove(keywords, (x) => (x === 'Model'))\n  const details = {\n    name: model.getAttribute('customName'),\n    type: model.getAttribute('name'),\n    category: category === 'Non-specialist' ? null : category,\n    stats,\n    abilities,\n    weapons,\n    wargear,\n    psychicPowers,\n    specialism: specialismSelection.length > 0 ? specialismSelection[0].getAttribute('name') : null,\n    faction: faction.length > 0 ? faction[0].getAttribute('name').split(': ', 2)[1] : null,\n    keywords,\n    points: points(model)\n  }\n  return { ...details, hash: hash([]).hash(details) }\n}\n\nexport const parseBattlescribeXML = (doc) => {\n  const models = []\n  const name = xpath('/roster:roster', doc)[0].getAttribute('name')\n  const forceRules = xpath('//roster:force/roster:rules/roster:rule', doc).map(parseForceRule)\n  for (const category of xpath('//roster:force/roster:categories/roster:category', doc)) {\n    const categoryId = category.getAttribute('entryId')\n    for (const model of xpath(`//roster:selection[@type='model' and roster:categories/roster:category/@entryId='${categoryId}']`, doc)) {\n      models.push(parseModel(model))\n    }\n  }\n  const uniqueModels = _.groupBy(models, (m) => m.hash)\n  return {\n    system: 'KillTeam2018',\n    name,\n    forceRules,\n    models: _.map(uniqueModels, (model) => ({\n      ...model[0],\n      uuid: uuidv4(),\n      count: model.length,\n      selected: model.length\n    }))\n  }\n}\n","import _ from 'lodash'\nimport * as XPath from 'xpath-ts'\nimport { Roster, Operative, Weapon, Equipment, Action, PsychicPower } from '../../types/KillTeam2021';\nimport { Ability } from '../../types/Ability';\n\n// useNamespaces is NOT a React hook, so:\n// eslint-disable-next-line\nconst xpSelect = XPath.useNamespaces({ bs: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst stat = (name: string, model: Element) : number => {\n  const node = xpSelect(`bs:profiles/bs:profile[@typeName='Operative']//bs:characteristic[@name='${name}']/text()`, model, true)\n  if (node) {\n    return parseInt(node.toString())\n  } else { return 0 }\n}\n\nconst parseWeapon = (weapon : Node) : Weapon => {\n  return {\n    name: xpSelect('string(@name)', weapon, true).toString(),\n    melee: xpSelect('string(@name)', weapon, true).toString().startsWith(\"⚔\"),\n    attacks: parseInt(xpSelect(\".//bs:characteristic[@name='A']/text()\", weapon, true).toString()),\n    hit: parseInt(xpSelect(\".//bs:characteristic[@name='WS/BS']/text()\", weapon, true).toString()),\n    damage: parseInt(xpSelect(\".//bs:characteristic[@name='D']/text()\", weapon, true).toString().split('/')[0]),\n    specialRules: (xpSelect(\".//bs:characteristic[@name='SR']/text()\", weapon, true) || \"-\").toString(),\n    criticalDamage: parseInt(xpSelect(\".//bs:characteristic[@name='D']/text()\", weapon, true).toString().split('/')[1]),\n    criticalRules: (xpSelect(\".//bs:characteristic[@name='!']/text()\", weapon, true) || \"-\").toString(),\n  }\n}\n\nconst parseAbility = (ability : Node) : Ability => {\n  return {\n    name: xpSelect('string(@name)', ability, true).toString(),\n    description: (xpSelect(\".//bs:characteristic[@name='Ability']/text()\", ability, true) || \"-\").toString(),\n    phases: []\n  }\n}\n\nconst parsePsychicPower = (power : Node) : PsychicPower => {\n  const name = xpSelect('string(@name)', power, true).toString()\n  const weap = xpSelect(\"..//bs:profile[@typeName='Weapons']\", power, true) as Node\n  return {\n    name,\n    description: (xpSelect(\".//bs:characteristic[@name='Effect']/text()\", power, true) || \"-\").toString(),\n    weapon: weap ? parseWeapon(weap) : null,\n  }\n}\n\nconst parseAction = (action : Node) : Action => {\n  return {\n    name: xpSelect('string(@name)', action, true).toString(),\n    description: (xpSelect(\".//bs:characteristic[@name='Unique Action']/text()\", action, true) || \"-\").toString(),\n    cost: 1,\n  }\n}\n\nconst parseEquipment = (equipment : Node) : Equipment => {\n  const description = xpSelect(\".//bs:characteristic[@name='Equipment']/text()\", equipment, true)\n  return {\n    name: xpSelect('string(@name)', equipment, true).toString(),\n    cost: parseInt(xpSelect(\"string(.//bs:cost/@value)\", equipment, true).toString()),\n    description: description ? description.toString() : null,\n  }\n}\n\nconst parseRule = (rule : Node) : Ability => {\n  return {\n    name: xpSelect('string(@name)', rule, true).toString(),\n    description: (xpSelect(\".//bs:description/text()\", rule, true) || \"-\").toString(),\n    phases: []\n  }\n}\n\nconst factionKeywords = [\n  \"Brood Coven\",\n  \"Cadre Mercenary\",\n  \"Chaos Daemons\",\n  \"Commorrite\",\n  \"Craftworld\",\n  \"Death Guard\",\n  \"Ecclesiarchy\",\n  \"Forge World\",\n  \"Greenskin\",\n  \"Grey Knight\",\n  \"Hive Fleet\",\n  \"Hunter Cadre\",\n  \"Imperial Guard\",\n  \"Kommando\",\n  \"Space Marine\",\n  \"Talons of the Emperor\",\n  \"Thousand Sons\",\n  \"Tomb World\",\n  \"Traitor Space Marine\",\n  \"Troupe\",\n  \"Veteran Guardsman\",\n];\n\nconst parseOperative = (model : Element) : Operative => {\n  const allKeywords = (xpSelect(\".//bs:categories/bs:category[@primary='false']/@name\", model) as Node[]).map((x) => (x.textContent || '').replace(\"💀\",\"\"));\n  const faction = _.intersection(allKeywords, factionKeywords).pop() || allKeywords.find((k) => (k === k.toUpperCase())) || null;\n  const keywords = _.remove(allKeywords, (x) => (x !== faction));\n  const details = {\n    datacard: xpSelect('string(@name)', model, true).toString(),\n    name: xpSelect('string(@customName)', model, true).toString(),\n    stats: {\n      movement: stat(\"M\", model),\n      actionPointLimit: stat(\"APL\", model),\n      groupActivation: stat(\"GA\", model),\n      defence: stat(\"DF\", model),\n      save: stat(\"SV\", model),\n      invulnerable_save: null,\n      wounds: stat(\"W\", model),\n    },\n    weapons: (xpSelect(\".//bs:profile[@typeName='Weapons']\", model) as Node[]).map(parseWeapon),\n    equipment: (xpSelect(\".//bs:selection[(@type='upgrade') and (.//bs:cost/@value!=\\\"0.0\\\")]\", model) as Node[]).map(parseEquipment),\n    abilities: (xpSelect(\".//bs:profile[@typeName='Abilities']\", model) as Node[]).map(parseAbility),\n    actions: (xpSelect(\".//bs:profile[@typeName='Unique Actions']\", model) as Node[]).map(parseAction),\n    rules: (xpSelect(\".//bs:rules/bs:rule\", model) as Node[]).map(parseRule),\n    leader: (xpSelect(\"string(.//bs:categories/bs:category[@primary='true']/@name)\", model, true).toString() === \"Leader\"),\n    keywords,\n    faction,\n  };\n  return details\n}\n\nexport const parseBattlescribeXML = (doc : Document) : Roster => {\n  const operatives = []\n  const name = xpSelect('string(/bs:roster/@name)', doc, true).toString()\n  const faction = xpSelect('string(//bs:force/@catalogueName)', doc, true).toString()\n  for (const model of xpSelect('//bs:selection[@type=\\'model\\']', doc) as Element[]) {\n    operatives.push(parseOperative(model))\n  }\n  const psychicPowers = (xpSelect(\".//bs:profile[@typeName='Psychic Power']\", doc) as Node[]).map(parsePsychicPower)\n  // Assign unique operative names if they don't have them\n  const romanNumerals = [\n    \"\", \"Ⅱ\", \"Ⅲ\", \"Ⅳ\", \"Ⅴ\",\n    \"Ⅵ\", \"Ⅶ\", \"Ⅷ\", \"Ⅸ\", \"Ⅹ\",\n    \"ⅩⅠ\", \"ⅩⅡ\", \"ⅩⅢ\", \"ⅩⅣ\", \"ⅩⅤ\",\n    \"ⅩⅥ\", \"ⅩⅦ\", \"ⅩⅧ\", \"ⅩⅨ\", \"ⅩⅩ\"\n  ];\n  const counts: { [key: string]: number } = {}\n  for (const o of operatives) {\n    if (o.name === \"\") {\n      if (!counts[o.datacard]) {\n        counts[o.datacard] = 0\n      }\n      o.name = o.datacard + \" \" + romanNumerals[counts[o.datacard]++]\n    }\n  }\n  return {\n    system: \"KillTeam2021\",\n    name,\n    faction,\n    operatives,\n    psychicPowers\n  }\n}\n","import { parseBattlescribeXML as parseKillTeam2018 } from './parsers/KillTeam2018/BattlescribeParser'\nimport { parseBattlescribeXML as parseKillTeam2021 } from './parsers/KillTeam2021/BattlescribeParser'\nimport JSZip from 'jszip'\nimport { DOMParserImpl } from 'xmldom-ts'\nimport * as XPath from 'xpath-ts'\nimport { Roster as Roster2018 } from './types/KillTeam2018';\nimport { Roster as Roster2021 } from './types/KillTeam2021';\n\n// useNamespaces is NOT a React hook, so:\n// eslint-disable-next-line\nconst xpSelect = XPath.useNamespaces({ bs: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst unzip = async (file: string) : Promise<string> => {\n  if (file.charAt(0) !== 'P') {\n    return file\n  } else {\n    const jszip = new JSZip()\n    const zip = await jszip.loadAsync(file)\n    return zip.file(/[^/]+\\.ros/)[0].async('string') // Get roster files that are in the root\n  }\n}\n\nconst parseFile = (file: string) : Roster2018 | Roster2021 => {\n  const doc = new DOMParserImpl().parseFromString(file)\n  const gameSystemId = (xpSelect('/bs:roster/@gameSystemId', doc, true) as Node).nodeValue\n  switch (gameSystemId) {\n    case 'a467-5f42-d24c-6e5b':\n      return parseKillTeam2018(doc) as Roster2018\n    case '3b7e-7dab-f79f-2e74':\n      return parseKillTeam2021(doc)\n    default:\n      throw new Error('Unsupported game system!')\n  }\n}\n\nexport const loadFile = async (file: File) : Promise<Roster2018 | Roster2021> => {\n  const reader = new FileReader()\n  return new Promise((resolve, reject) => {\n    reader.onerror = () => {\n      reader.abort()\n      reject(new DOMException('Problem parsing input file.'))\n    }\n    reader.onloadend = async () => {\n      const content = reader.result as string\n      const file = await unzip(content)\n      resolve(parseFile(file))\n    }\n    reader.readAsBinaryString(file)\n  })\n}\n\nexport const loadFiles = (files: File[]) : Promise<Roster2018 | Roster2021> => {\n  return loadFile(files[0])\n}\n","import React, { useState } from 'react'\nimport Homepage from './components/Homepage'\nimport { Roster as RosterView2018 } from './components/KillTeam2018/Roster'\nimport { Roster as RosterView2021 } from './components/KillTeam2021/Roster'\nimport { Container } from 'react-bootstrap'\nimport { loadFiles } from './FileLoader'\nimport { Roster as Roster2018 } from './types/KillTeam2018'\nimport { Roster as Roster2021 } from './types/KillTeam2021'\n\nexport function App() {\n\n  const [roster, setRoster] = useState<Roster2018|Roster2021|null>(null)\n\n  const handleUpload = async (acceptedFiles: File[]) => {\n    const r = await loadFiles(acceptedFiles);\n    setRoster(r)\n  }\n\n  const handleClose = () => {\n    setRoster(null)\n  }\n\n  const handleSelectionChanged = (uuid: string, selectedCount: number) => {\n    if (roster && isRosterKT18(roster)) {\n      setRoster(Object.assign({models: roster.models.map((model) => (\n        model.uuid !== uuid\n          ? model\n          : Object.assign(\n              model,\n              { selected: selectedCount }\n            )\n      ))}, roster))\n    }\n  }\n\n  const isRosterKT18 = (roster: any): roster is Roster2018 => (roster.system === \"KillTeam2018\")\n  const isRosterKT21 = (roster: any): roster is Roster2021 => (roster.system === \"KillTeam2021\")\n\n  return (\n    <Container fluid='lg'>\n      {roster === null ? <Homepage onUpload={handleUpload} /> : <></>}\n      {roster && isRosterKT18(roster) ? <RosterView2018 name={roster.name} models={roster.models} onClose={handleClose} forceRules={roster.forceRules} onSelectionChanged={handleSelectionChanged} /> : <></>}\n      {roster && isRosterKT21(roster) ? <RosterView2021 name={roster.name} operatives={roster.operatives} psychicPowers={roster.psychicPowers} faction={roster.faction} onClose={handleClose} /> : <></>}\n    </Container>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport * as Sentry from \"@sentry/react\";\n// import { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: \"https://6fe3e632b45a44c086068e13f3b1a783@o464596.ingest.sentry.io/5473956\",\n  // integrations: [\n  //   new Integrations.BrowserTracing(),\n  // ],\n  // tracesSampleRate: 0.0,\n});\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// Enable offline use with a service worker\n// See https://create-react-app.dev/docs/making-a-progressive-web-app/\nserviceWorker.unregister()\n"],"sourceRoot":""}