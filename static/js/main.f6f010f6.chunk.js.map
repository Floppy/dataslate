{"version":3,"sources":["components/Intro.tsx","components/SettingsDialog.tsx","components/Homepage.tsx","components/KillTeam2018/Phase.tsx","components/KillTeam2018/AbilityList.tsx","components/KillTeam2018/StatsTable.tsx","components/KillTeam2018/SpecialistIcon.tsx","components/KillTeam2018/CategoryIcon.tsx","components/ModelTitle.tsx","components/KeywordList.tsx","components/KillTeam2018/NoPhaseDetails.tsx","components/StatBadge.tsx","components/KillTeam2018/MovementPhaseDetails.tsx","components/KillTeam2018/ScoutingPhaseDetails.tsx","components/KillTeam2018/DeploymentPhaseDetails.tsx","components/KillTeam2018/InitiativePhaseDetails.tsx","components/KillTeam2018/PsychicPowerList.tsx","components/KillTeam2018/PsychicPhaseDetails.tsx","components/KillTeam2018/WeaponList.tsx","components/KillTeam2018/ShootingPhaseDetails.tsx","components/KillTeam2018/FightPhaseDetails.tsx","components/KillTeam2018/MoralePhaseDetails.tsx","components/CloseButton.tsx","components/KillTeam2018/Roster.tsx","components/KillTeam2021/HighlightedText.tsx","components/KillTeam2021/WeaponList.tsx","components/KillTeam2021/EquipmentList.tsx","components/KillTeam2021/ActionList.tsx","components/KillTeam2021/WoundTracks.tsx","components/KillTeam2021/AbilityList.tsx","components/KillTeam2021/Datasheet.tsx","components/KillTeam2021/RuleList.tsx","components/KillTeam2021/PowerList.tsx","types/KillTeam2021.ts","components/KillTeam2021/PloysColumn.tsx","components/KillTeam2021/TacOpsList.tsx","components/KillTeam2021/data/broodCoven.ts","components/KillTeam2021/data/index.ts","components/KillTeam2021/data/cadreMercenary.ts","components/KillTeam2021/data/chaosDaemons.ts","components/KillTeam2021/data/commorrite.ts","components/KillTeam2021/data/craftworld.ts","components/KillTeam2021/data/deathGuard.ts","components/KillTeam2021/data/ecclesiarchy.ts","components/KillTeam2021/data/forgeWorld.ts","components/KillTeam2021/data/greenskin.ts","components/KillTeam2021/data/greyKnights.ts","components/KillTeam2021/data/hiveFleet.ts","components/KillTeam2021/data/hunterCadre.ts","components/KillTeam2021/data/hunterClade.ts","components/KillTeam2021/data/imperialGuard.ts","components/KillTeam2021/data/kommando.ts","components/KillTeam2021/data/spaceMarine.ts","components/KillTeam2021/data/talonsOfTheEmporer.ts","components/KillTeam2021/data/thousandSons.ts","components/KillTeam2021/data/traitorSpaceMarine.ts","components/KillTeam2021/data/troupe.ts","components/KillTeam2021/data/veteranGuardsmen.ts","components/KillTeam2021/ArchetypeBadge.tsx","components/KillTeam2021/FactionSpecificData.tsx","components/KillTeam2021/Roster.tsx","parsers/KillTeam2018/Abilities.ts","parsers/KillTeam2018/BattlescribeParser.js","parsers/KillTeam2021/BattlescribeParser.ts","FileLoader.ts","components/KillTeam2021/DataDevPage.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Intro","Jumbotron","className","SettingsDialog","props","Modal","show","onHide","setShowSettings","dialogClassname","Header","closeButton","Title","id","Body","Col","Row","Form","Check","type","label","onChange","event","showWoundTrack","target","checked","newSettings","settings","setSettings","fileDropZone","onDrop","onUpload","accept","getRootProps","getInputProps","Alert","variant","style","textAlign","Homepage","useState","showSettings","Card","as","minHeight","Text","href","Button","onClick","process","Phase","pageBreakAfter","background","color","padding","width","display","name","flexGrow","note","children","AbilityList","abilities","phase","filter","x","phases","includes","length","highlight","Table","striped","bordered","size","_","sortBy","map","description","StatsTable","movement","weapon_skill","isNaN","ballistic_skill","strength","toughness","wounds","attacks","additional_attacks","leadership","save","invulnerable_save","points","SpecialistIcon","specialism","height","marginRight","alt","src","toLowerCase","CategoryIcon","category","ModelTitle","titleComponents","without","undefined","justifyContent","selected","join","slice","showSelector","value","slideStop","onSelectionChanged","uuid","step","max","count","min","KeywordList","faction","Badge","pill","textTransform","keywords","keyword","NoPhaseDetails","model","weapons","w","concat","wargear","stats","StatBadge","secondaryValue","MovementPhaseDetails","sm","ScoutingPhaseDetails","hasScoutingPhase","DeploymentPhaseDetails","hasDeploymentPhase","InitiativePhaseDetails","hasInitiativePhase","PsychicPowerList","powers","charge","PsychicPhaseDetails","psychicPowers","hasPsychicPhase","WeaponList","whiteSpace","range","shots","armourPiercing","damage","ShootingPhaseDetails","hasRangedWeapons","userStrength","FightPhaseDetails","MoralePhaseDetails","CloseButton","onClose","Roster","sortedModels","models","selectedModels","sumBy","forceRules","some","HighlightedText","output","reactStringReplace","el","hit","criticalDamage","specialRules","criticalRules","EquipmentList","equipment","border","bg","cost","ActionList","actions","WoundTracks","names","repeat","Datasheet","datacard","operativeNames","uuidv4","leader","groupActivation","defence","actionPointLimit","RuleList","rules","PowerList","xs","md","weapon","Archetype","PloysColumn","ploys","options","line","postOptionText","action","TacOpsList","tacOps","revealTime","data","strategicPloys","tacticalPloys","archetypes","SECURITY","RECON","INFILTRATION","SEEK_AND_DESTROY","melee","getFactionSpecificData","factionName","find","factionData","ArchetypeBadge","archetype","FactionSpecificData","headingStyle","factionSpecificData","fireteams","flatMap","fireteam","Boolean","item","index","self","indexOf","flexDirection","marginLeft","datacards","operatives","groupedOperatives","groupBy","o","hash","ops","c","sort","groupByDatacard","orderBy","breakBefore","uniqBy","flatten","m","phasePatterns","scouting","deployment","initiative","psychic","shooting","fight","morale","genericPatterns","antiPatterns","calculatePhases","minDesc","replace","forIn","patterns","re","test","push","remove","p","invulnerableSave","saves","a","pattern","match","parseInt","xpath","XPath","roster","stat","nodes","childNodes","nodeValue","weaponStat","numeric","costNode","getAttribute","parseForceRule","rule","parseAbility","ability","parseWargear","parsePsychicPower","power","warpChargeDescription","additionalAttacks","descriptions","d","sum","parseAdditionalAttacks","parseModel","specialismSelection","closeCombatWeapon","exec","weaponType","split","parseWeapon","details","xpSelect","bs","node","toString","startsWith","weap","parseAction","parseEquipment","parseRule","factionKeywords","parseOperative","allKeywords","textContent","intersection","pop","k","toUpperCase","unzip","file","charAt","jszip","JSZip","loadAsync","zip","async","parseFile","doc","DOMParserImpl","parseFromString","categoryId","uniqueModels","system","parseKillTeam2018","romanNumerals","counts","parseKillTeam2021","Error","loadFile","reader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onloadend","content","result","readAsBinaryString","loadFiles","files","factionNames","DataDevPage","setFaction","Content","factionArchetypesMap","factionFireteams","Object","keys","marginBottom","e","App","setRoster","useEffect","loadSettingsFromLocalStorage","saveSettingsToLocalStorage","localStorage","setItem","JSON","stringify","parse","getItem","handleUpload","acceptedFiles","r","handleClose","isRosterKT18","path","Container","fluid","selectedCount","assign","isRosterKT21","window","location","hostname","Sentry","dsn","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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AAN,CAAa2B,MAAK,eAAO6L,GAAgBvL,GAAG,KAA5C,4BACA,cAACD,EAAA,EAAK5B,KAAN,UACE,cAACsL,GAAD,CAAWrD,OAAQ3I,EAAM8I,qBAI7B,cAAC,GAAD,CAAqB3B,QAASnH,EAAMmH,QAAS6G,UAAWhO,EAAMgO,e,sBC/D9DyB,GAAgB,CACpBC,SAAU,CACR,cAEFC,WAAY,CACV,kCACA,WACA,iBAEFC,WAAY,CACV,+BACA,mCACA,0CAEFjL,SAAU,CACR,mBACA,YACA,gBACA,cACA,aACA,gBACA,YACA,cACA,cACA,QACA,iCACA,mBACA,oBACA,kBAEFkL,QAAS,CACP,YACA,mBACA,uBACA,cAEFC,SAAU,CACR,mBACA,WACA,oBACA,WACA,yBACA,eACA,eACA,gBACA,cACA,YACA,aACA,cACA,WACA,aACA,YACA,eACA,qBACA,sBACA,wBACA,wBACA,cACA,kBACA,WACA,kBACA,gCAEFC,MAAO,CACL,gBACA,YACA,iBACA,6BACA,8BACA,cACA,kBACA,UACA,iBACA,+BACA,wBACA,sBACA,kBACA,wBACA,2CACA,iFACA,gCAEFC,OAAQ,CACN,UACA,iBAIEC,GAAkB,CACtB,WACA,eACA,mBACA,WACA,mBACA,kBACA,iBACA,mBACA,sBACA,sCACA,6BACA,4BACA,wBACA,eACA,yBAGIC,GAAe,CACnBP,WAAY,CACV,kBAEFhL,SAAU,CACR,4BACA,6BACA,8BACA,oCACA,4CACA,yCACA,+CACA,uBACA,qCACA,YACA,uBACA,4CACA,uBAEFkL,QAAS,CACP,2DAEFC,SAAU,CACR,yCACA,iEACA,sCACA,4BACA,wCACA,aAEFC,MAAO,CACL,yCACA,8CACA,YACA,0CACA,sBACA,6BAEFC,OAAQ,CACN,8BACA,kDACA,qCAISG,GAAkB,SAAC1L,GAC9B,IAAM2L,EAAU,IAAM3L,EAAYqB,cAAcuK,QAAQ,UAAW,IAAM,IACnEvM,EAAmB,GAmBzB,OAlBAQ,IAAEgM,MAAMb,IAAe,SAACc,EAAU5M,GAC5BW,IAAE6F,KAAKoG,GAAU,SAACC,GAAD,OAASA,EAAGC,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","file":"static/js/main.f6f010f6.chunk.js","sourcesContent":["import React from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\nfunction Intro () {\n  return (\n    <Jumbotron>\n      <h1>\n        Dataslate\n      </h1>\n      <p className='lead'>\n        Printable datasheets for Warhammer 40,000: Kill Team\n      </p>\n      <ul>\n        <li>All the info you need, when you need it</li>\n        <li>No wasted space for identical models</li>\n        <li>Designed for print or screen</li>\n        <li>Clear, uncluttered layout for easy reference</li>\n        <li>Stats and abilities organised by phase (KT 2018)</li>\n      </ul>\n    </Jumbotron>\n  )\n}\n\nexport default Intro\n","import React from 'react'\nimport { Form, Modal, Col, Row } from 'react-bootstrap'\nimport { Settings } from '../types/Settings'\n\ninterface Props {\n  setShowSettings: (showSettings: boolean) => void\n  show: boolean\n  settings: Settings\n  setSettings: (settings: Settings) => void\n}\n\nfunction SettingsDialog (props: Props) {\n  const handleWoundTrackChange = (event: any) => {\n    const target = event.target\n    const showWoundTrack: boolean = target.checked\n    const newSettings = {\n      ...props.settings,\n      showWoundTrack: showWoundTrack\n    }\n    props.setSettings(newSettings)\n  }\n\n  return (\n    <Modal\n      show={props.show}\n      onHide={() => props.setShowSettings(false)}\n      dialogClassname='modal-90w'\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id='settings-dialog-title'>\n          Dataslate Settings\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Col>\n          <Row>KT 2021 Settings</Row>\n          <Row>\n            <Form>\n              <Form.Check\n                type='checkbox'\n                id='showWoundTrack'\n                label='Show Wound Track'\n                onChange={handleWoundTrackChange}\n                checked={props.settings.showWoundTrack}\n              />\n            </Form>\n          </Row>\n        </Col>\n      </Modal.Body>\n    </Modal>\n  )\n}\n\nexport default SettingsDialog\n","import React, { useState } from 'react'\nimport Dropzone from 'react-dropzone'\nimport type { DropzoneOptions } from 'react-dropzone'\nimport Intro from './Intro'\nimport { Row, Col, Alert, Card, Button } from 'react-bootstrap'\n\nimport SettingsDialog from './SettingsDialog'\nimport { Settings } from '../types/Settings'\n\ninterface Props {\n  onUpload: DropzoneOptions['onDrop']\n  settings: Settings\n  setSettings: (settings: Settings) => void\n}\n\nfunction fileDropZone (props: Props) {\n  return (\n    <Dropzone onDrop={props.onUpload} accept='.ros,.rosz'>\n      {({ getRootProps, getInputProps }) => (\n        <Alert variant='primary' {...getRootProps()} style={{ textAlign: 'center' }}>\n          <input {...getInputProps()} />\n          <p>Drop your roster file here, or click to select one.</p>\n          <p><em>(*.rosz and *.ros accepted)</em></p>\n        </Alert>\n      )}\n    </Dropzone>\n  )\n}\n\nfunction Homepage (props: Props) {\n  const [showSettings, setShowSettings] = useState(false)\n\n  return (\n    <>\n      <Intro />\n      <Row>\n        <Col>\n          <Card>\n            <Card.Header as='h3'>Step 1</Card.Header>\n            <Card.Body style={{ minHeight: '12em' }}>\n              <Card.Text>\n                Build your force in{' '}\n                <a href='https://battlescribe.net/'>Battlescribe</a>.\n              </Card.Text>\n              <Card.Text>\n                Supported systems:\n                <ul>\n                  <li>Kill Team 2018</li>\n                  <li>Kill Team 2021</li>\n                </ul>\n              </Card.Text>\n              <Card.Text>\n                <Button variant=\"outline-secondary\" onClick={() => setShowSettings(true)}>Edit Display Settings</Button>\n                <SettingsDialog\n                    show={showSettings} setShowSettings={setShowSettings}\n                    settings={props.settings} setSettings={props.setSettings}\n                />\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col>\n          <Card>\n            <Card.Header as='h3'>Step 2</Card.Header>\n            <Card.Body style={{ minHeight: '12em' }}>\n\n              <Card.Text>\n                {fileDropZone(props)}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col>\n          <Card>\n            <Card.Header as='h3'>Step 3</Card.Header>\n            <Card.Body style={{ minHeight: '12em' }}>\n              <Card.Text>\n                Print your datasheets out, and never forget an ability again!\n              </Card.Text>\n              <Card.Text>\n                Prepare to dominate your foes!\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <footer>\n        Built with <a href='https://reactjs.org/'>React</a> and <a href='https://getbootstrap.com'>Bootstrap</a>.\n        Icons courtesy of <a href='https://killteam.app/'>Companion for Kill Team</a>.\n        Released as <a href='https://github.com/floppy/dataslate'>Open Source</a>,\n        report problems <a href='https://github.com/floppy/dataslate/issues/new'>on GitHub</a>.\n        Version: <em><a {...{ href: `https://github.com/floppy/dataslate/tree/${process.env.REACT_APP_GIT_SHA}` }}>{process.env.REACT_APP_GIT_SHA}</a></em>\n      </footer>\n    </>\n  )\n}\n\nexport default Homepage\n","import React from 'react'\nimport { Col } from 'react-bootstrap'\n\ninterface Props {\n  name: string\n  note?: string\n  children: React.ReactNode\n}\n\nfunction Phase (props: Props) {\n  return (\n    <div style={{\n      pageBreakAfter: 'always'\n    }}\n    >\n      <h2 style={{\n        background: '#FF6F2D',\n        color: 'white',\n        padding: '10px',\n        width: '100%',\n        display: 'flex'\n      }}\n      >\n        <Col>\n          {props.name} Phase\n        </Col>\n        <Col style={{ flexGrow: 0, textAlign: 'right' }}>\n          {props.note && (\n            <small>{props.note}</small>\n          )}\n        </Col>\n      </h2>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Phase\n","import React from 'react'\nimport { Ability } from '../../types/Ability'\nimport { Table } from 'react-bootstrap'\nimport _ from 'lodash'\n\ninterface Props {\n  abilities: Ability[]\n  phase: string\n  highlight?: boolean\n}\n\nfunction AbilityList (props: Props) {\n  const abilities = props.phase\n    ? props.abilities.filter((x) => ((x.phases != null) && x.phases.includes(props.phase)))\n    : props.abilities.filter((x) => ((x.phases != null) && x.phases.length === 0))\n  const variant = props.highlight ? 'primary' : ''\n\n  return abilities.length === 0 ? <></> : (\n    <Table striped bordered size='sm' variant={variant}>\n      <thead>\n        <tr>\n          <th>Ability</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(abilities, ['name']).map((x: Ability) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default AbilityList\n","import React from 'react'\nimport { Table } from 'react-bootstrap'\n\ninterface Props {\n  movement: number\n  weapon_skill: number\n  ballistic_skill: number\n  strength: number\n  toughness: number\n  wounds: number\n  attacks: number\n  additional_attacks: number\n  leadership: number\n  save: number\n  invulnerable_save: number\n  points: number\n}\n\nfunction StatsTable (props: Props) {\n  return (\n    <Table striped bordered size='sm'>\n      <thead>\n        <tr>\n          <th>M</th>\n          <th>WS</th>\n          <th>BS</th>\n          <th>S</th>\n          <th>T</th>\n          <th>W</th>\n          <th>A</th>\n          <th>Ld</th>\n          <th>Sv</th>\n          <th>Points</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{props.movement}&quot;</td>\n          <td>{props.weapon_skill}+</td>\n          <td>{isNaN(props.ballistic_skill) ? '-' : props.ballistic_skill + '+'}</td>\n          <td>{props.strength}</td>\n          <td>{props.toughness}</td>\n          <td>{props.wounds}</td>\n          <td>{props.attacks}\n            {props.additional_attacks ? <strong>{' +'}{props.additional_attacks}</strong> : null}\n          </td>\n          <td>{props.leadership}</td>\n          <td>{props.save}+\n            {props.invulnerable_save ? <>{' / '}<strong>{props.invulnerable_save}++</strong></> : null}\n          </td>\n          <td>{props.points}</td>\n        </tr>\n      </tbody>\n    </Table>\n  )\n}\n\nexport default StatsTable\n","import React from 'react'\n\ninterface Props {\n  specialism: string\n}\n\nexport function SpecialistIcon (props: Props) {\n  return (props.specialism\n    ? <img className='specialism' style={{ height: '1em', marginRight: '10px' }} alt={props.specialism} src={`/icons/${props.specialism.toLowerCase()}.svg`} />\n    : <></>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  category: string\n}\n\nexport function CategoryIcon (props: Props) {\n  return (props.category && props.category.toLowerCase() !== 'specialist' && props.category.toLowerCase() !== 'specialist retainer'\n    ? <img className='category' style={{ height: '1em', marginRight: '10px' }} alt={props.category} src={`/icons/${props.category.toLowerCase()}.svg`} />\n    : <></>\n  )\n}\n","import React from 'react'\nimport { SpecialistIcon } from './KillTeam2018/SpecialistIcon'\nimport { CategoryIcon } from './KillTeam2018/CategoryIcon'\nimport { Col } from 'react-bootstrap'\nimport ReactBootstrapSlider from 'react-bootstrap-slider'\nimport _ from 'lodash'\n\ninterface Props {\n  showSelector?: boolean\n  onSelectionChanged?: (uuid: string, value: number) => void,\n  selected: number\n  count: number\n  uuid: string\n  name: string\n  type: string\n  category?: string\n  specialism?: string\n}\n\nexport function ModelTitle (props: Props) {\n  const headingStyle = {\n    background: 'black',\n    color: 'white',\n    padding: '5px',\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-between'\n  }\n  const titleComponents = _.without([\n    props.type,\n    (props.category === 'Specialist' || props.category === 'Specialist Retainer'\n      ? props.specialism\n      : props.category)\n  ], null, undefined, '')\n  return (\n    <h3 style={headingStyle}>\n      <Col>\n        {props.category && props.specialism && (props.category === 'Specialist' || props.category === 'Specialist Retainer') && <SpecialistIcon specialism={props.specialism} />}\n        {props.category && <CategoryIcon category={props.category} />}\n        {props.selected > 1 && (\n          <small>{props.selected} × </small>\n        )}\n        <strong>{titleComponents[0]} </strong>\n        <small>{_.join(_.slice(titleComponents, 1), ', ')}</small>\n      </Col>\n      {props.showSelector && (\n        <Col style={{ flexGrow: 0 }}>\n          <ReactBootstrapSlider\n            value={props.selected}\n            slideStop={(x: any) => (props.onSelectionChanged != null) && props.onSelectionChanged(props.uuid, x.target.value)}\n            step={1}\n            max={props.count}\n            min={0}\n          />\n        </Col>\n      )}\n    </h3>\n  )\n}\n","import React from 'react'\nimport { Badge } from 'react-bootstrap'\n\ninterface Props {\n  faction: string | null\n  keywords: string[]\n}\n\nexport function KeywordList (props: Props) {\n  return (\n    <div style={{ background: 'rgba(0, 0, 0, 0.125)', padding: '5px 10px 0px 10px' }}>\n      {props.faction\n        ? <Badge\n            pill variant='primary' className='mb-2' style={{\n            textTransform: 'uppercase',\n            marginRight: '10px'\n          }}\n          >\n          {props.faction}\n        </Badge> : <></>}\n      {props.keywords.map((keyword: string) => (\n        <Badge\n          pill variant='secondary' className='mb-2' style={{\n            textTransform: 'uppercase',\n            marginRight: '10px'\n          }}\n        >\n          {keyword}\n        </Badge>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\nimport StatsTable from './StatsTable'\nimport AbilityList from './AbilityList'\nimport { Card } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle'\nimport { KeywordList } from '../KeywordList'\nimport { Model } from '../../types/KillTeam2018'\n\ninterface Props {\n  model: Model\n  onSelectionChanged: (uuid: string, value: number) => void,\n}\n\nexport function NoPhaseDetails (props: Props) {\n  return (\n    <Card className={props.model.selected > 0 ? 'included' : 'excluded'}>\n      <ModelTitle {...props.model} showSelector onSelectionChanged={props.onSelectionChanged} />\n      <Card.Body>\n        {props.model.category === 'Commander' && <div>Commander specialism: <strong>{props.model.specialism}</strong></div>}\n        <p>{props.model.weapons.map((w) => (w.name)).concat(props.model.wargear.map((w) => (w.name))).join(', ')}</p>\n        <StatsTable {...props.model.stats} points={props.model.points} />\n        <AbilityList abilities={props.model.abilities} phase='' />\n      </Card.Body>\n      <KeywordList faction={props.model.faction} keywords={props.model.keywords} />\n    </Card>\n  )\n}\n","import React from 'react'\nimport { Badge } from 'react-bootstrap'\n\ninterface Props {\n  name: string\n  value: string\n  secondaryValue?: string | null\n}\n\nexport function StatBadge (props: Props) {\n  return (\n    <Badge pill variant='dark' className='w-100 mb-2 px-0'>\n      <div className='text-light'>{props.name}</div>\n      <div className='h1'>\n        {props.value}\n        {props.secondaryValue\n          ? <small>{props.secondaryValue}</small>\n          : <></>}\n      </div>\n    </Badge>\n  )\n}\n","import React from 'react'\nimport AbilityList from './AbilityList'\nimport { StatBadge } from '../StatBadge'\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle'\n\nimport { Model } from '../../types/KillTeam2018'\n\ninterface Props {\n  model: Model\n}\n\nexport function MovementPhaseDetails (props: Props) {\n  return (\n    <Row>\n      <Col sm='11'>\n        <ModelTitle {...props.model} />\n        <AbilityList abilities={props.model.abilities} phase='movement' />\n      </Col>\n      <Col sm='1' className='px-1'>\n        <StatBadge name='M' value={`${props.model.stats.movement}`} />\n      </Col>\n    </Row>\n  )\n}\n","import React from 'react'\nimport AbilityList from './AbilityList'\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle'\nimport { Model } from '../../types/KillTeam2018'\n\ninterface Props {\n  model: Model\n}\n\nexport function ScoutingPhaseDetails (props: Props) {\n  return (\n    <Row>\n      <Col>\n        <ModelTitle {...props.model} />\n        <AbilityList abilities={props.model.abilities} phase='scouting' />\n      </Col>\n    </Row>\n  )\n}\n\nexport function hasScoutingPhase (model: Model) {\n  return ((model.abilities.filter((x) => ((x.phases != null) && x.phases.includes('scouting')))).length > 0)\n}\n","import React from 'react'\nimport AbilityList from './AbilityList'\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle'\nimport { Model } from '../../types/KillTeam2018'\n\ninterface Props {\n  model: Model\n}\n\nexport function DeploymentPhaseDetails (props: Props) {\n  return (\n    <Row>\n      <Col>\n        <ModelTitle {...props.model} />\n        <AbilityList abilities={props.model.abilities} phase='deployment' />\n      </Col>\n    </Row>\n  )\n}\n\nexport function hasDeploymentPhase (model: Model) {\n  return ((model.abilities.filter((x) => ((x.phases != null) && x.phases.includes('deployment')))).length > 0)\n}\n","import React from 'react'\nimport AbilityList from './AbilityList'\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle'\nimport { Model } from '../../types/KillTeam2018'\n\ninterface Props {\n  model: Model\n}\n\nexport function InitiativePhaseDetails (props: Props) {\n  return (\n    <Row>\n      <Col>\n        <ModelTitle {...props.model} />\n        <AbilityList abilities={props.model.abilities} phase='initiative' />\n      </Col>\n    </Row>\n  )\n}\n\nexport function hasInitiativePhase (model: Model) {\n  return ((model.abilities.filter((x) => ((x.phases != null) && x.phases.includes('initiative')))).length > 0)\n}\n","import React from 'react'\nimport { PsychicPower } from '../../types/KillTeam2018'\nimport { Table } from 'react-bootstrap'\nimport _ from 'lodash'\n\ninterface Props {\n  powers: PsychicPower[]\n}\n\nfunction PsychicPowerList (props: Props) {\n  return props.powers.length === 0 ? <></> : (\n    <Table striped bordered size='sm'>\n      <thead>\n        <tr>\n          <th>Power</th>\n          <th>Warp Charge</th>\n          <th>Description</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(props.powers, ['name']).map((x: PsychicPower) => (\n          <tr>\n            <td>{x.name}</td>\n            <td>{x.charge}</td>\n            <td>{x.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default PsychicPowerList\n","import React from 'react'\nimport AbilityList from './AbilityList'\nimport PsychicPowerList from './PsychicPowerList'\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle'\nimport { Model } from '../../types/KillTeam2018'\n\ninterface Props {\n  model: Model\n}\n\nexport function PsychicPhaseDetails (props: Props) {\n  return (\n    <Row>\n      <Col>\n        <ModelTitle {...props.model} />\n        <PsychicPowerList powers={props.model.psychicPowers} />\n        <AbilityList abilities={props.model.abilities} phase='psychic' />\n      </Col>\n    </Row>\n  )\n}\n\nexport function hasPsychicPhase (model: Model) {\n  return (model.psychicPowers.length > 0 || (model.abilities.filter((x) => ((x.phases != null) && x.phases.includes('psychic')))).length > 0)\n}\n","import React from 'react'\nimport { Weapon } from '../../types/KillTeam2018'\nimport { Table } from 'react-bootstrap'\nimport _ from 'lodash'\n\ninterface Props {\n  weapons: Weapon[]\n  phase: string\n  userStrength: number\n}\n\nfunction WeaponList (props: Props) {\n  const weapons = props.phase === 'shooting'\n    ? props.weapons.filter((x) => (x.type !== 'Melee'))\n    : props.weapons.filter((x) => (x.type === 'Melee'))\n\n  return weapons.length === 0 ? <></> : (\n    <Table striped bordered size='sm'>\n      <thead>\n        <tr>\n          <th>Weapon</th>\n          {props.phase === 'shooting' && <th>Range</th>}\n          {props.phase === 'shooting' && <th>Type</th>}\n          {props.phase === 'shooting' && <th>Shots</th>}\n          <th>S</th>\n          <th>AP</th>\n          <th>D</th>\n          <th>Abilities</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.sortBy(weapons, ['name']).map((x: Weapon) => (\n          <tr>\n            <td style={{ whiteSpace: 'nowrap' }}>{x.name}</td>\n            {props.phase === 'shooting' && <td>{x.range}&quot;</td>}\n            {props.phase === 'shooting' && <td style={{ whiteSpace: 'nowrap' }}>{x.type}</td>}\n            {props.phase === 'shooting' && <td style={{ whiteSpace: 'nowrap' }}>{x.shots}</td>}\n            <td>{x.strength}</td>\n            <td>{x.armourPiercing}</td>\n            <td>{x.damage}</td>\n            <td>{x.abilities}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default WeaponList\n","import React from 'react'\nimport { StatBadge } from '../StatBadge'\nimport AbilityList from './AbilityList'\nimport WeaponList from './WeaponList'\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle'\n\nimport { Model } from '../../types/KillTeam2018'\n\ninterface Props {\n  model: Model\n}\n\nexport function ShootingPhaseDetails (props: Props) {\n  return (\n    <Row>\n      <Col sm='10'>\n        <ModelTitle {...props.model} />\n        {hasRangedWeapons(props.model) && <WeaponList weapons={props.model.weapons} phase='shooting' userStrength={props.model.stats.strength} />}\n        <AbilityList abilities={props.model.abilities} phase='shooting' />\n      </Col>\n      <Col sm='1' className='px-1'>\n        {hasRangedWeapons(props.model) && <StatBadge name='BS' value={`${props.model.stats.ballistic_skill}`} secondaryValue='+' />}\n        <StatBadge name='T' value={`${props.model.stats.toughness}`} />\n      </Col>\n      <Col sm='1' className='px-1'>\n        <StatBadge name='Sv' value={`${props.model.stats.save}`} secondaryValue='+' />\n        {props.model.stats.invulnerable_save\n          ? <StatBadge name='Inv' value={`${props.model.stats.invulnerable_save}`} secondaryValue='+' />\n          : <></>}\n      </Col>\n    </Row>\n  )\n}\n\nexport function hasRangedWeapons (model: Model) {\n  return !isNaN(model.stats.ballistic_skill) && (model.weapons.filter((x) => (x.type !== 'Melee')).length > 0)\n}\n","import React from 'react'\nimport { StatBadge } from '../StatBadge'\nimport AbilityList from './AbilityList'\nimport WeaponList from './WeaponList'\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle'\n\nimport { Model } from '../../types/KillTeam2018'\n\ninterface Props {\n  model: Model\n}\n\nexport function FightPhaseDetails (props: Props) {\n  return (\n    <Row>\n      <Col sm='10'>\n        <ModelTitle {...props.model} />\n        <WeaponList weapons={props.model.weapons} phase='fight' userStrength={props.model.stats.strength} />\n        <AbilityList abilities={props.model.abilities} phase='fight' />\n      </Col>\n      <Col sm='1' className='px-1'>\n        <StatBadge name='A' value={`${props.model.stats.attacks}`} secondaryValue={props.model.stats.additional_attacks ? `+${props.model.stats.additional_attacks}` : null} />\n        <StatBadge name='T' value={`${props.model.stats.toughness}`} />\n      </Col>\n      <Col sm='1' className='px-1'>\n        <StatBadge name='WS' value={`${props.model.stats.weapon_skill}`} secondaryValue='+' />\n        <StatBadge name='Sv' value={`${props.model.stats.save}`} secondaryValue='+' />\n        {props.model.stats.invulnerable_save\n          ? <StatBadge name='Inv' value={`${props.model.stats.invulnerable_save}`} secondaryValue='+' />\n          : <></>}\n      </Col>\n    </Row>\n  )\n}\n","import React from 'react'\nimport { StatBadge } from '../StatBadge'\nimport AbilityList from './AbilityList'\nimport { Row, Col } from 'react-bootstrap'\nimport { ModelTitle } from '../ModelTitle'\n\nimport { Model } from '../../types/KillTeam2018'\n\ninterface Props {\n  model: Model\n}\n\nexport function MoralePhaseDetails (props: Props) {\n  return (\n    <Row>\n      <Col sm='11'>\n        <ModelTitle {...props.model} />\n        <AbilityList abilities={props.model.abilities} phase='morale' />\n      </Col>\n      <Col sm='1' className='px-1'>\n        <StatBadge name='Ld' value={`${props.model.stats.leadership}`} />\n      </Col>\n    </Row>\n  )\n}\n","import React, { MouseEvent } from 'react'\nimport { Button } from 'react-bootstrap'\n\ninterface Props {\n  onClose: (event: MouseEvent<HTMLButtonElement>) => void\n}\n\nexport function CloseButton (props: Props) {\n  return (<Button variant='dark' className='d-print-none' onClick={props.onClose}>Close</Button>)\n}\n","import React, { MouseEvent } from 'react'\nimport { Col } from 'react-bootstrap'\nimport { Model } from '../../types/KillTeam2018'\nimport { Ability } from '../../types/Ability'\nimport Phase from './Phase'\nimport AbilityList from './AbilityList'\nimport { NoPhaseDetails } from './NoPhaseDetails'\nimport { MovementPhaseDetails } from './MovementPhaseDetails'\nimport { ScoutingPhaseDetails, hasScoutingPhase } from './ScoutingPhaseDetails'\nimport { DeploymentPhaseDetails, hasDeploymentPhase } from './DeploymentPhaseDetails'\nimport { InitiativePhaseDetails, hasInitiativePhase } from './InitiativePhaseDetails'\nimport { PsychicPhaseDetails, hasPsychicPhase } from './PsychicPhaseDetails'\nimport { ShootingPhaseDetails } from './ShootingPhaseDetails'\nimport { FightPhaseDetails } from './FightPhaseDetails'\nimport { MoralePhaseDetails } from './MoralePhaseDetails'\nimport { CloseButton } from '../CloseButton'\nimport _ from 'lodash'\n\ninterface Props {\n  name: string\n  models: Model[]\n  forceRules: Ability[]\n  onClose: (event: MouseEvent<HTMLButtonElement>) => void\n  onSelectionChanged: (uuid: string, value: number) => void,\n}\n\nexport function Roster (props: Props) {\n  // Display models sorted by category and type\n  const sortedModels = _.sortBy(props.models, (x: Model) => ([x.category == null, x.category, x.type]))\n  // Work out which models are actually selected\n  const selectedModels = _.filter(sortedModels, (x: Model) => (x.selected > 0))\n  return (\n    <>\n      <h1 style={{\n        background: '#FF6F2D',\n        color: 'white',\n        padding: '10px',\n        width: '100%',\n        display: 'flex'\n      }}\n      >\n        <Col>\n          {props.name}\n        </Col>\n        <Col style={{ flexGrow: 0, textAlign: 'right' }}>\n          <small>{_.sumBy(props.models, (model: Model) => (model.selected * model.points))}pts</small>\n        </Col>\n        <Col style={{ flexGrow: 0, textAlign: 'right' }}>\n          <CloseButton onClose={props.onClose} />\n        </Col>\n      </h1>\n      <>\n        <AbilityList abilities={props.forceRules} phase='' highlight />\n        {sortedModels.map((model: Model) => (\n          <NoPhaseDetails model={model} onSelectionChanged={props.onSelectionChanged} />\n        ))}\n      </>\n      {_.some(selectedModels, hasScoutingPhase) &&\n        <Phase name='scouting'>\n          <>\n            <AbilityList abilities={props.forceRules} phase='scouting' highlight />\n            {selectedModels.map((model: Model) => (\n              hasScoutingPhase(model) &&\n                <ScoutingPhaseDetails model={model} />\n            ))}\n          </>\n        </Phase>}\n      {_.some(selectedModels, hasDeploymentPhase) &&\n        <Phase name='deployment'>\n          <>\n            <AbilityList abilities={props.forceRules} phase='deployment' highlight />\n            {selectedModels.map((model: Model) => (\n              hasDeploymentPhase(model) &&\n                <DeploymentPhaseDetails model={model} />\n            ))}\n          </>\n        </Phase>}\n      {_.some(selectedModels, hasInitiativePhase) &&\n        <Phase name='initiative'>\n          <>\n            <AbilityList abilities={props.forceRules} phase='initiative' highlight />\n            {selectedModels.map((model: Model) => (\n              hasInitiativePhase(model) &&\n                <InitiativePhaseDetails model={model} />\n            ))}\n          </>\n        </Phase>}\n      <Phase name='movement'>\n        <>\n          <AbilityList abilities={props.forceRules} phase='movement' highlight />\n          {selectedModels.map((model: Model) => (\n            <MovementPhaseDetails model={model} />\n          ))}\n        </>\n      </Phase>\n      {_.some(selectedModels, hasPsychicPhase) &&\n        <Phase name='psychic'>\n          <>\n            <AbilityList abilities={props.forceRules} phase='psychic' highlight />\n            {selectedModels.map((model: Model) => (\n              hasPsychicPhase(model) &&\n                <PsychicPhaseDetails model={model} />\n            ))}\n          </>\n        </Phase>}\n      <Phase name='shooting'>\n        <>\n          <AbilityList abilities={props.forceRules} phase='shooting' highlight />\n          {selectedModels.map((model: Model) => (\n            <ShootingPhaseDetails model={model} />\n          ))}\n        </>\n      </Phase>\n      <Phase name='fight'>\n        <>\n          <AbilityList abilities={props.forceRules} phase='fight' highlight />\n          {selectedModels.map((model: Model) => (\n            <FightPhaseDetails model={model} />\n          ))}\n        </>\n      </Phase>\n      <Phase name='morale'>\n        <>\n          <AbilityList abilities={props.forceRules} phase='morale' highlight />\n          {selectedModels.map((model: Model) => (\n            <MoralePhaseDetails model={model} />\n          ))}\n        </>\n      </Phase>\n    </>\n  )\n}\n","import React from 'react'\nimport reactStringReplace from 'react-string-replace'\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport function HighlightedText (props: Props) {\n  let output = [props.children]\n  output = reactStringReplace(output, '▲', () => <span className='triangle'>▲</span>)\n  output = reactStringReplace(output, '●', () => <span className='circle'>●</span>)\n  output = reactStringReplace(output, '○', () => <span className='circle'>●</span>)\n  output = reactStringReplace(output, '⬤', () => <span className='circle'>●</span>)\n  output = reactStringReplace(output, '⬛', () => <span className='square'>■</span>)\n  output = reactStringReplace(output, '■', () => <span className='square'>■</span>)\n  output = reactStringReplace(output, '⬟', () => <span className='pentagon'>⬟</span>)\n  output = output.filter(el => el !== '')\n\n  return <>{output}</>\n}\n","import React from 'react'\nimport { Weapon } from '../../types/KillTeam2021'\nimport { Table } from 'react-bootstrap'\nimport { HighlightedText } from './HighlightedText'\n\ninterface Props {\n  weapons: Weapon[]\n}\n\nexport function WeaponList (props: Props) {\n  return (\n    <>\n      <Table striped bordered size='sm'>\n        <thead>\n          <tr>\n            <th>Weapon</th>\n            <th>Attacks</th>\n            <th>Hit</th>\n            <th>Damage</th>\n            <th>Rules</th>\n            <th>Critical</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.weapons.map((x: Weapon) => (\n            <tr>\n              <td>{x.name}</td>\n              <td>{x.attacks}</td>\n              <td>{x.hit}+</td>\n              <td>{x.damage} / {x.criticalDamage}</td>\n              <td><HighlightedText>{x.specialRules}</HighlightedText></td>\n              <td><HighlightedText>{x.criticalRules}</HighlightedText></td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </>\n  )\n}\n","import React from 'react'\nimport { Equipment } from '../../types/KillTeam2021'\nimport { Card } from 'react-bootstrap'\nimport { HighlightedText } from './HighlightedText'\n\ninterface Props {\n  equipment: Equipment[]\n}\n\nexport function EquipmentList (props: Props) {\n  return props.equipment.length === 0 ? <></> : (\n    <Card border='secondary' bg='light'>\n      <Card.Header style={{ background: 'rgba(0, 0, 0, 0.05)' }} as='h4'>\n        Equipment\n      </Card.Header>\n      <Card.Body>\n        {props.equipment.map((x: Equipment) => (\n          <p>\n            <strong>{x.name} ({x.cost} EP)</strong>\n            {x.description\n              ? <><strong>: </strong><HighlightedText>{x.description}</HighlightedText></>\n              : <></>}\n          </p>\n        ))}\n      </Card.Body>\n    </Card>\n  )\n}\n","import React from 'react'\nimport { Action } from '../../types/KillTeam2021'\nimport { Card } from 'react-bootstrap'\nimport _ from 'lodash'\nimport { HighlightedText } from './HighlightedText'\n\ninterface Props {\n  actions: Action[]\n}\n\nexport function ActionList (props: Props) {\n  return (\n    <>\n      {_.sortBy(props.actions, ['name']).map((x: Action) => (\n        <Card border='primary' bg='light'>\n          <Card.Header style={{ background: '#FF6F2D', color: 'white' }} as='h4'>\n            {x.name}\n          </Card.Header>\n          <Card.Body>\n            <HighlightedText>{x.description}</HighlightedText>\n          </Card.Body>\n        </Card>\n      ))}\n    </>\n  )\n}\n","import React from 'react'\nimport { Table } from 'react-bootstrap'\n\ninterface Props {\n  wounds: number\n  names: string[]\n}\n\nexport function WoundTracks (props: Props) {\n  return (\n    <Table striped bordered size='sm'>\n      <thead>\n        <tr>\n          <th>Operative</th>\n          <th>Wound Track</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.names.map((name) => (\n          <tr>\n            <td>{name}</td>\n            <td>{'□ '.repeat(props.wounds)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  )\n}\n","import React from 'react'\nimport { Ability } from '../../types/Ability'\nimport { Card } from 'react-bootstrap'\nimport _ from 'lodash'\nimport { HighlightedText } from './HighlightedText'\n\ninterface Props {\n  abilities: Ability[]\n}\n\nfunction AbilityList (props: Props) {\n  return props.abilities.length === 0 ? <></> : (\n    <Card border='secondary' bg='light'>\n      <Card.Header style={{ background: 'rgba(0, 0, 0, 0.05)' }} as='h4'>\n        Abilities\n      </Card.Header>\n      <Card.Body>\n        {_.sortBy(props.abilities, ['name']).map((x: Ability) => (\n          <p>\n            <strong>{x.name}: </strong>\n            <HighlightedText>{x.description}</HighlightedText>\n          </p>\n        ))}\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default AbilityList\n","import React from 'react'\nimport { Card, Row, Col } from 'react-bootstrap'\nimport { Datacard } from '../../types/KillTeam2021'\nimport { ModelTitle } from '../ModelTitle'\nimport { WeaponList } from './WeaponList'\nimport { StatBadge } from '../StatBadge'\nimport { EquipmentList } from './EquipmentList'\nimport { ActionList } from './ActionList'\nimport { KeywordList } from '../KeywordList'\nimport { WoundTracks } from './WoundTracks'\nimport AbilityList from './AbilityList'\nimport { v4 as uuidv4 } from 'uuid'\n\ninterface Props {\n  datacard: Datacard\n  showWoundTrack: boolean\n}\n\nexport function Datasheet (props: Props) {\n  return (\n    <Card className={props.datacard.operativeNames.length > 0 ? 'included' : 'excluded'}>\n      <ModelTitle\n        name=''\n        type={props.datacard.name}\n        selected={props.datacard.operativeNames.length}\n        count={props.datacard.operativeNames.length}\n        uuid={uuidv4()}\n        category={props.datacard.leader ? 'Specialist' : ''}\n        specialism={props.datacard.leader ? 'Leader' : ''}\n      />\n      <Card.Body>\n        <Row>\n          <Col sm='10'>\n            {props.showWoundTrack && <WoundTracks wounds={props.datacard.stats.wounds} names={props.datacard.operativeNames} />}\n            <WeaponList weapons={props.datacard.weapons} />\n            <Row>\n              <Col>\n                <AbilityList abilities={props.datacard.abilities} />\n                {props.datacard.actions.length === 0\n                  ? <></>\n                  : <EquipmentList equipment={props.datacard.equipment} />}\n              </Col>\n              <Col>\n                {props.datacard.actions.length === 0\n                  ? <EquipmentList equipment={props.datacard.equipment} />\n                  : <ActionList actions={props.datacard.actions} />}\n              </Col>\n            </Row>\n          </Col>\n          <Col sm='1' className='px-1'>\n            <StatBadge name='M' value={`${props.datacard.stats.movement}●`} />\n            <StatBadge name='GA' value={`${props.datacard.stats.groupActivation}`} />\n            <StatBadge name='DF' value={`${props.datacard.stats.defence}`} />\n          </Col>\n          <Col sm='1' className='px-1'>\n            <StatBadge name='W' value={`${props.datacard.stats.wounds}`} />\n            <StatBadge name='APL' value={`${props.datacard.stats.actionPointLimit}`} />\n            <StatBadge name='Sv' value={`${props.datacard.stats.save}+`} />\n          </Col>\n        </Row>\n      </Card.Body>\n      <KeywordList faction={props.datacard.faction ? `${props.datacard.faction} 💀` : null} keywords={props.datacard.keywords} />\n    </Card>\n  )\n}\n","import React from 'react'\nimport { Ability } from '../../types/Ability'\nimport { Table } from 'react-bootstrap'\nimport _ from 'lodash'\nimport { HighlightedText } from './HighlightedText'\n\ninterface Props {\n  rules: Ability[]\n}\n\nexport function RuleList (props: Props) {\n  return props.rules.length === 0 ? <></> : (\n    <Table striped bordered>\n      <tbody>\n        {_.sortBy(props.rules, ['name']).map((x: Ability) => (\n          <tr>\n            <td><strong>{x.name}</strong></td>\n            <td><HighlightedText>{x.description}</HighlightedText></td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  )\n}\n","import React from 'react'\nimport { PsychicPower } from '../../types/KillTeam2021'\nimport { Card, Row, Col, Table } from 'react-bootstrap'\nimport _ from 'lodash'\nimport { HighlightedText } from './HighlightedText'\n\ninterface Props {\n  powers: PsychicPower[]\n}\n\nexport function PowerList (props: Props) {\n  return (\n    <Row xs={1} sm={2} md={3} className='g-4'>\n      {_.sortBy(props.powers, ['name']).map((x: PsychicPower) => (\n        <Col>\n          <Card border='info' bg='light'>\n            <Card.Header style={{ background: '#17a2b8', color: 'white' }} as='h4'>\n              {x.name}\n            </Card.Header>\n            <Card.Body>\n              <p>\n                <HighlightedText>{x.description}</HighlightedText>\n              </p>\n              {(x.weapon != null)\n                ? <Table striped bordered size='sm'>\n                  <thead>\n                    <tr>\n                      <th>A</th>\n                      <th>WS</th>\n                      <th>D</th>\n                      <th>SR</th>\n                      <th>!</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>{x.weapon.attacks}</td>\n                      <td>{x.weapon.hit}+</td>\n                      <td>{x.weapon.damage}/{x.weapon.criticalDamage}</td>\n                      <td><HighlightedText>{x.weapon.specialRules}</HighlightedText></td>\n                      <td><HighlightedText>{x.weapon.criticalRules}</HighlightedText></td>\n                    </tr>\n                  </tbody>\n                  </Table>\n                : <></>}\n            </Card.Body>\n          </Card>\n        </Col>\n      ))}\n    </Row>\n  )\n}\n","import { Ability } from './Ability'\n\nexport interface Action {\n  name: string\n  cost: number\n  description: string\n}\n\nexport interface Stats {\n  movement: number\n  actionPointLimit: number\n  groupActivation: number\n  defence: number\n  save: number\n  invulnerable_save: number | null\n  wounds: number\n}\n\nexport interface Weapon {\n  name: string\n  melee: boolean\n  attacks: number\n  hit: number\n  damage: number\n  specialRules: string\n  criticalDamage: number\n  criticalRules: string\n}\n\nexport interface PsychicPower {\n  name: string\n  description: string\n  weapon: Weapon | null\n}\n\nexport interface Ploy {\n  name: string\n  cost: number\n  description: any\n  weapon?: Weapon\n  options?: string[]\n  postOptionText?: string\n  action?: Action\n}\n\nexport interface TacOp {\n  id: number\n  name: string\n  revealTime: string\n  description: string[]\n  action?: Action\n}\n\nexport interface Equipment {\n  name: string\n  cost: number\n  description: string | null\n}\n\nexport interface Operative {\n  datacard: string\n  name: string\n  stats: Stats\n  weapons: Weapon[]\n  equipment: Equipment[]\n  abilities: Ability[]\n  actions: Action[]\n  rules: Ability[]\n  leader: boolean\n  keywords: string[]\n  faction: string | null\n}\n\n// Datacards are a collection of grouped Operatives\nexport interface Datacard {\n  name: string\n  operativeNames: string[]\n  stats: Stats\n  weapons: Weapon[]\n  equipment: Equipment[]\n  abilities: Ability[]\n  actions: Action[]\n  rules: Ability[]\n  leader: boolean\n  keywords: string[]\n  faction: string | null\n}\n\nexport interface Roster {\n  system: string\n  name: string\n  faction: string\n  operatives: Operative[]\n  psychicPowers: PsychicPower[]\n  fireteams: string[]\n}\n\nexport enum Archetype {\n  SEEK_AND_DESTROY = 'SEEK AND DESTROY',\n  SECURITY = 'SECURITY',\n  INFILTRATION = 'INFILTRATION',\n  RECON = 'RECON'\n}\n\nexport interface FireteamArchetypes {\n  [key: string]: Archetype[]\n}\n","import React from 'react'\nimport { Ploy } from '../../types/KillTeam2021'\nimport { Card, Col, Table } from 'react-bootstrap'\nimport { HighlightedText } from './HighlightedText'\n\ninterface Props {\n  ploys: Ploy[]\n}\n\nexport function PloysColumn (props: Props) {\n  return (\n    <Col>\n      {props.ploys.map((x: Ploy) => (\n        <Card border='info' bg='light'>\n          <Card.Header style={{ background: '#17a2b8', color: 'white', display: 'flex', justifyContent: 'space-between' }} as='h4'>\n            <span>{x.name}</span>\n            <span>{x.cost}CP</span>\n          </Card.Header>\n          <Card.Body>\n            <p>\n              <HighlightedText>{x.description}</HighlightedText>\n            </p>\n            {(x.weapon != null)\n              ? <Table striped bordered size='sm'>\n                <thead>\n                  <tr>\n                    <th>A</th>\n                    <th>WS</th>\n                    <th>D</th>\n                    <th>SR</th>\n                    <th>!</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{x.weapon.attacks}</td>\n                    <td>{x.weapon.hit}+</td>\n                    <td>{x.weapon.damage}/{x.weapon.criticalDamage}</td>\n                    <td><HighlightedText>{x.weapon.specialRules}</HighlightedText></td>\n                    <td><HighlightedText>{x.weapon.criticalRules}</HighlightedText></td>\n                  </tr>\n                </tbody>\n                </Table>\n              : <></>}\n            {\n              (x.options != null) &&\n                <ul>\n                  {x.options.map(line => <li><HighlightedText>{line}</HighlightedText></li>)}\n                </ul>\n            }\n            {\n              x.postOptionText &&\n                <p>\n                  <HighlightedText>{x.postOptionText}</HighlightedText>\n                </p>\n            }\n            {\n              (x.action != null) &&\n                <p>\n                  <Card border='primary' bg='light'>\n                    <Card.Header style={{ background: '#FF6F2D', color: 'white', display: 'flex', justifyContent: 'space-between' }} as='h4'>\n                      <span>{x.action.name}</span>\n                      <span>{x.action.cost}AP</span>\n                    </Card.Header>\n                    <Card.Body>\n                      <HighlightedText>{x.action.description}</HighlightedText>\n                    </Card.Body>\n                  </Card>\n                </p>\n            }\n          </Card.Body>\n        </Card>\n      ))}\n    </Col>\n  )\n}\n","import React from 'react'\nimport { TacOp } from '../../types/KillTeam2021'\nimport { Card, Row, Col } from 'react-bootstrap'\nimport { HighlightedText } from './HighlightedText'\n\ninterface Props {\n  tacOps: TacOp[]\n}\n\nexport function TacOpsList (props: Props) {\n  return (\n    <Row xs={1} sm={2} md={3} className='g-4'>\n      {props.tacOps.map((x: TacOp) => (\n        <Col>\n          <Card border='info' bg='light'>\n            <Card.Header style={{ background: '#17a2b8', color: 'white', display: 'flex', justifyContent: 'space-between' }} as='h4'>\n              <span>Tac Op {x.id}</span>\n              <span>{x.name}</span>\n            </Card.Header>\n            <Card.Body>\n              <p>\n                {x.revealTime}\n              </p>\n              <p>\n                <ul>\n                  {x.description.map(line => <li><HighlightedText>{line}</HighlightedText></li>)}\n                </ul>\n              </p>\n              {\n                (x.action != null) &&\n                  <>\n                    <p>\n                      Friendly operatives an perform the following mission action:\n                    </p>\n                    <p>\n                      <Card border='primary' bg='light'>\n                        <Card.Header style={{ background: '#FF6F2D', color: 'white', display: 'flex', justifyContent: 'space-between' }} as='h4'>\n                          <span>{x.action.name}</span>\n                          <span>{x.action.cost}AP</span>\n                        </Card.Header>\n                        <Card.Body>\n                          <HighlightedText>{x.action.description}</HighlightedText>\n                        </Card.Body>\n                      </Card>\n                    </p>\n                  </>\n              }\n            </Card.Body>\n          </Card>\n        </Col>\n      ))}\n    </Row>\n  )\n}\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Neophyte Hybrid Fire Team': [Archetype.SECURITY, Archetype.RECON, Archetype.INFILTRATION],\n  'Acolyte Hybrid Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION],\n  'Hybrid Metamorph Fire Team': [Archetype.SEEK_AND_DESTROY]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Cult Ambush',\n    cost: 1,\n    description: 'Use this Strategic Ploy in the first Turning Point. Until the end of the Turning Point, each time a friendly BROOD COVEN💀 operative is activated, you can change its order.'\n  }, {\n    name: 'Lurk in the shadows',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly BROOD COVEN💀 operative, in the Roll Defence Dice step of that shooting attack,\n                  before rolling your defence dice, if it is in Cover and either has a Conceal order or is ready, you can do one of the following:`,\n    options: [\n      'One additional dice can be retained as a successful normal save as a result of Cover.',\n      'Retain one dice as a successful critical save as a result of Cover instead of a normal save.'\n    ]\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Underground',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Set Up Operatives step of the mission sequence. Select one friendly BROOD COVEN💀 operative. That operative can be set up with a Conceal order\n                  anywhere on the killzone that is within ▲. of Heavy terrain and more than ⬟ from enemy operatives and the enemy drop zone.`\n  }, {\n    name: 'Into the shadows',\n    cost: 1,\n    description: 'Use this Tactical Ploy at the end of a friendly BROOD COVEN💀 operative\\'s activation. If that operative has an Engage order, change it to a Conceal order.'\n  }, {\n    name: 'Crossfire',\n    cost: 1,\n    description: `Use this Tactical Ploy after making a shooting attack against an enemy operative. Until the end of the Turning Point, each time another friendly BROOD COVEN💀 operative makes a\n                  shooting attack against that enemy operative, in the Roll Attack Dice step of that shooting attack, you can re-roll one of your Attack dice.`\n  }, {\n    name: 'Lying in the wait',\n    cost: 1,\n    description: `Use this Tactical Ploy when you activate a friendly BROOD COVEN💀 operative that has a Conceal order and is more than ■ from enemy operatives. Select one other ready\n                  friendly BROOD COVEN💀 operative that has a Conceal order, is more than ■ from enemy operatives, and is Visible to and within ■ of this operative. Ignore those operatives' Group\n                  Activation characteristics. Instead, after activating the first operative, you can activate the other before your opponent activates any operatives.`\n  }\n]\n\nconst data = {\n  name: 'Brood Coven' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import broodCoven from './broodCoven'\nimport cadreMercenary from './cadreMercenary'\nimport chaosDaemon from './chaosDaemons'\nimport commorite from './commorrite'\nimport craftworld from './craftworld'\nimport deathGuard from './deathGuard'\nimport ecclesiarchy from './ecclesiarchy'\nimport forgeWorld from './forgeWorld'\nimport greenskin from './greenskin'\nimport greyKnights from './greyKnights'\nimport hiveFleet from './hiveFleet'\nimport hunterCadre from './hunterCadre'\nimport hunterClade from './hunterClade'\nimport imperialGuard from './imperialGuard'\nimport kommando from './kommando'\nimport spaceMarine from './spaceMarine'\nimport talonsOfTheEmporer from './talonsOfTheEmporer'\nimport thousandSons from './thousandSons'\nimport traitorSpaceMarine from './traitorSpaceMarine'\nimport troupe from './troupe'\nimport veteranGuardsmen from './veteranGuardsmen'\n\nconst data = [\n  broodCoven,\n  cadreMercenary,\n  chaosDaemon,\n  commorite,\n  craftworld,\n  deathGuard,\n  ecclesiarchy,\n  forgeWorld,\n  greenskin,\n  greyKnights,\n  hiveFleet,\n  hunterCadre,\n  hunterClade,\n  imperialGuard,\n  kommando,\n  spaceMarine,\n  talonsOfTheEmporer,\n  thousandSons,\n  traitorSpaceMarine,\n  troupe,\n  veteranGuardsmen\n]\n\nconst getFactionSpecificData = (factionName: string) => data.find(factionData => factionData.name === factionName)\n\nexport default getFactionSpecificData\nexport { data }\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Cadre Mercenary Kill Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Hunting call',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly CADRE MERCENARY💀 operative performs a Fight action, in the Roll Attack Dice step of that combat, you can re-roll one of your attack dice.'\n  }, {\n    name: 'Patient stalkers',\n    cost: 1,\n    description: 'Until the end of the Turning Point, friendly CADRE MERCENARY💀 operatives can perform a Charge action while they have a Conceal order.'\n  }, {\n    name: 'Fieldcraft',\n    cost: 1,\n    description: 'Until the end of the Turning Point, friendly KROOT CARNIVORE operatives can perform the following action:',\n    action: {\n      name: 'Fieldcraft',\n      cost: 1,\n      description: 'Change this operative\\'s order.'\n    }\n  }, {\n    name: 'Perfect Ambush',\n    cost: 1,\n    description: 'Use this Strategic Ploy in the first Turning Point. Until the end of the Turning Point, each time a friendly CADRE MERCENARY💀 operative is activated, you can change its order.'\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'A gory feast',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly CADRE MERCENARY💀 operative incapacitates an enemy operative in combat. Add 1 to that friendly operative\\'s APL and it regains up to D6 lost wounds.'\n  }, {\n    name: 'Brute Strength',\n    cost: 1,\n    description: 'Use this Tactical Ploy in the Firefight phase, when a friendly KROOTOX operative performs a Normal Move, Dash, Fall Back or Charge action. Until the end of that activation:',\n    options: [\n      'That operative can move through Light parts of a terrain feature as if they were not there.',\n      `That operative can move around, across and over other operatives (and their bases) as if they were not there,\n       but must finish the move following all requirements specified by that move, and cannot finish its move on top of other operatives (or their bases).`\n    ]\n  }\n]\n\nconst data = {\n  name: 'Cadre Mercenary' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021';\n\nconst archetypes: FireteamArchetypes = {\n  'Bloodletter Fire Team': [Archetype.SEEK_AND_DESTROY],\n  'Daemonette Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.RECON],\n  'Plaguebearer Fire Team': [Archetype.SECURITY],\n  'Pink Horror Fire Team': [Archetype.SECURITY],\n  'Blue Horror Fire Team': [Archetype.SECURITY, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Unstoppable Ferocity',\n    cost: 1,\n    description: 'Until the end of the Turning Point, add 1 to the Attacks characteristic of melee weapons friendly KHORNE operatives are equipped with.'\n  }, {\n    name: 'Quicksilver Swiftness',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly SLAANESH operative is activated, it can perform a free Dash action during that activation.'\n  }, {\n    name: 'Glistening Barrage',\n    cost: 1,\n    description: 'Until the end of the Turning Point, ranged weapons friendly TZEENTCH operatives are equipped with gain the Ceaseless special rule.'\n  }, {\n    name: 'Contagion',\n    cost: 1,\n    description: `Until the end of the Turning Point, while an enemy operative is Visible to and within ⬤ of a friendly NURGLE operative, that enemy operative is treated as being injured\n                  (only subtract ⬤ from its Movement characteristic as a result of being injured if it is activated within ⬤ of a friendly NURGLE operative).`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Warp Surge',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly CHAOS DAEMON💀 operative is selected as the target of a ranged attack. Until the end of the Turning Point, each time a shooting attack is\n                  made against that friendly operative, in the Roll Defence Dice step of that shooting attack, you can re-roll any or all of your defence dice.`\n  }, {\n    name: 'Ephemeral Regeneration',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly CHAOS DAEMON💀 operative is activated. That friendly operative regains 2D3 lost wounds.'\n  }, {\n    name: 'Split',\n    cost: 0,\n    description: `Use this Tactical Ploy when a friendly PINK HORROR operative is incapacitated for 2CP, or when a friendly BLUE HORROR operative is incapacitated for 1CP.`,\n    options: [\n      'Before that PINK HORROR operative is removed from the killzone, set up two BLUE HORROR operatives as close as possible to that operative and not within Engagement Range of enemy operatives',\n      `Before that BLUE HORROR operative is removed from the killzone, set up one BRIMESTONE HORRORS operative as close as possible to that operative and not within Engagement Range of enemy\n       operatives.`\n    ],\n    postOptionText: `In either case, set up those operatives with the same order as the previous operative (including if it was ready or activated). In narrative play, any operatives set up as a\n                      result of this Tactical Ploy are no longer part of your kill team after the game.`\n  }\n]\n\nconst data = {\n  name: 'Chaos Daemons' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Kabalite Fire Team': [Archetype.SECURITY, Archetype.RECON],\n  'Wych Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Fleet',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly COMMORRITE💀 operative performs a Fall Back or Normal Move action, it can perform a free Dash action with that action.'\n  }, {\n    name: 'Agile Gladiators',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly WYCH operative fights in combat, in the Resolve Successful Hits step of that combat, each time your opponent strikes\n                  with a normal hit, you can roll one D6: on a 4+, treat that strike as a parry instead. In addition, each time a friendly WYCH operative performs any kind of move:`,\n    options: [\n      `It can move around, across and over other operatives (and their bases) as if they were not there, but must finish the move following all requirements specified by that move, and\n        cannot finish its move on top of other operatives (or their bases).`,\n      'It can ignore the first ⬤ distance it travels when climbing, traversing and dropping.',\n      'It automatically passes jump tests.'\n    ]\n  }, {\n    name: 'Prey On The Weak',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly COMMORRITE💀 operative fights in combat or makes a shooting attack, in the Roll Attack Dice step of that combat or\n                  shooting attack, if the target has half or fewer of its wounds remaining, you can re-roll up to two of your attack dice.`\n  }, {\n    name: 'Inured to Suffering',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly COMMORRITE💀 operative would lose a wound, roll one D6: on a 6+, that wound is not lost. You can only use this\n                  Strategic Ploy if one or more operatives have been incapacitated.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Power From Pain',\n    cost: 1,\n    description: `Use this Tactical Ploy when an enemy operative is incapacitated. Before it is removed from the killzone, select on ready friendly COMMORRITE💀 operative that enemy operative\n                  is within ⬟ of and Visible to. After the current activation:`,\n    options: [\n      'You can activate that ready friendly operative.',\n      'Add 1 to its APL',\n      'During its next activation, it can perform Shoot or Fight actions twice, instead of once.'\n    ]\n  }, {\n    name: 'No Escape',\n    cost: 1,\n    description: `Use this Tactical Ploy when a Fall Back action is declared for an enemy operative within Engagement Range of a friendly WYCH operative. Roll one D6, subtracting 1 if that enemy\n                  operative has a higher Wounds characteristic than that WYCH operative, and adding 1 if that enemy operative is injured. On a 3+, that enemy operative cannot Fall Back, but the\n                  action points subtracted are not refunded.`\n  }\n]\n\nconst data = {\n  name: 'Commorrite' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Guardian Defender Fire Team': [Archetype.SECURITY, Archetype.RECON],\n  'Storm Guardian Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.RECON],\n  'Ranger Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY, Archetype.RECON],\n  'Dire Avenger Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Fleet',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly CRAFTWORLD💀 operative performs a Fall Back or Normal Move action, it can perform a free Dash action with that action.'\n  }, {\n    name: 'Forewarned',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a ready friendly CRAFTWORLD💀 operative,in the Roll Defence Dice step of that shooting attack,\n                  you can re-roll one of your defence dice.`\n  }, {\n    name: 'Supreme Disdain',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly CRAFTWORLD💀 operative fights in combat, in the Roll Attack Dice step of that combat, if your opponent discards more\n                  attack dice as failed hits than you do, you can change one of your retained normal hits to a critical hit.`\n  }, {\n    name: 'Hidden Paths',\n    cost: 1,\n    description: `Each friendly RANGER operative that has a Conceal order, is within ▲ of Light or Heavy terrain and is more than ⬟ from enemy operatives can immediately perform a free Dash\n                  action, but must finish that move within ▲ of Light or Heavy terrain.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Matchless Agility',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly CRAFTWORLD💀 operative is activated. Until the end of that operative\\'s activation:',\n    options: [\n      'It cannot perform a Shoot or Fight action.',\n      'If it performs a Dash action, it can move an additional ⬤ for that action.'\n    ]\n  }, {\n    name: 'First of the Aspects',\n    cost: 1,\n    description: 'Use this Tactical Ploy during a friendly DIRE AVENGER operative\\'s activation. Add 1 to its APL.'\n  }\n]\n\nconst data = {\n  name: 'Craftworld' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Plague Marine Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Poxwalker Fire Team': [Archetype.INFILTRATION, Archetype.SECURITY]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Malicious Volleys',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly BUBONIC ASTARTES operative is activated, if it does not perform a Fight action during that activation, it\n                  can perform two Shoot actions during that activation if a bolt weapon is selected for each of those shooting attacks. A bolt weapon is a ranged weapon that includes\n                  'bolt' in its name, e.g. boltgun, bolt pistol etc.`\n  }, {\n    name: 'Hateful Assault',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly BUBONIC ASTARTES operative is activated, if it does not perform a Shoot action during that activation, it can\n                  perform two Fight actions during that activation.`\n  }, {\n    name: 'Contagion',\n    cost: 1,\n    description: `Until the end of the Turning Point, while an enemy operative is Visible to and within ⬤ of a friendly DEATH GUARD💀 operative, that enemy operative is treated as being\n                injured (only subtract ⬤ from its Movement characteristic as a result of being injured if it is activated within ⬤ of a friendly DEATH GUARD💀 operative).`\n\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Effluent Demise',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly BUBONIC ASTARTES operative is incapacitated. Inflict D3 mortal wounds on each enemy operative Visible to and within ⬤ of\n                  that operative.`\n  }, {\n    name: 'Revolting Durability',\n    cost: 1,\n    description: `Use this Tactical Ploy in either the Resolve Successful Hits or Resolve Successful Saves step of a combat or shooting attack made against a friendly BUBONIC ASTARTES\n                  operative. You can change one of your opponent's critical hits into a normal hit.`\n  }, {\n    name: 'Dig In',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly BUBONIC ASTARTES operative is activated. Until the end of that operative\\'s activation, it can perform the following action:',\n    action: {\n      name: 'Dig In',\n      cost: 1,\n      description: 'Until the end of the Turning Point, add 1 to this operative\\'s Defence characteristic.'\n    }\n  }\n]\n\nconst data = {\n  name: 'Death Guard' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Battle Sister Fire Team': [Archetype.SECURITY],\n  'Repentia Fire Team': [Archetype.SEEK_AND_DESTROY],\n  'Arco-Flagellant Fire Team': [Archetype.SEEK_AND_DESTROY]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Emporer\\'s Guidance',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly ADEPTA SORORITAS operative fights in combat or makes a shooting attack, in the Roll Attack Dice step of that\n                  combat or shooting attack, if you retain any critical hits, you can re-roll one of your attack dice.`\n  }, {\n    name: 'Divine Shield',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly ADEPTA SORORITAS operative, in the Roll Defence Dice step of that shooting\n                  attack, if you retain any critical saves, you can re-roll one of your failed saves.`\n  }, {\n    name: 'Extremis Trigger Word',\n    cost: 1,\n    description: 'Until the end of the Turning Point:',\n    options: [\n      'Each time a friendly ARCO-FLAGELLANT operative performs a Dash or Charge action, it can move an additional ▲ for that action',\n      'Arco-flails that friendly ARCO-FLAGELLANT operatives are equipped with gain the Lethal 5+ special rule.'\n    ],\n    postOptionText: 'You can use this Strategic Ploy once'\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Penance Through Death',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly SISTER REPENTIA or ARCO-FLAGELLANT operative is incapacitated in combat by an enemy operative. Before that friendly operative is\n                  removed from the killzone, select one melee weapon it is equipped with and roll one attack dice as if it is fighting in combat. If the result is a successful hit, you\n                  can immediately strike an enemy operative within Engagement Range of it. Then remove that friendly operative from the killzone as normal.`\n  }, {\n    name: 'Storm of Retribution',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly BATTLE SISTER GUNNER or friendly BATTLE SISTER HEAVY GUNNER operative is activated. Until the end of that operative's activation,\n                  ranged weapons it is equipped with lose the Heavy special rule (if they have it) and gain the No Cover special rule.`\n  }, {\n    name: 'Divine Intervention',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Resolve Successful Hits step of a combat or shooting attack, when an attack dice would inflict damage on a friendly ADEPTA SORORITAS\n                  operative. Ignore the damage inflicted from that attack dice.`\n  }\n]\n\nconst data = {\n  name: 'Ecclesiarchy' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Skitarii Ranger Fire Team': [Archetype.RECON, Archetype.SECURITY],\n  'Skitarii Vanguard Fire Team': [Archetype.SECURITY],\n  'Sicarian Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Protector Imperative',\n    cost: 1,\n    description: 'Until the end of the Turning Point:',\n    options: [\n      'Each time a friendly FORGE WORLD💀 operative makes a shooting attack, in the Roll Attack Dice step of that shooting attack, you can re-roll one of your attack dice.',\n      'Each time a friendly FORGE WORLD💀 operative fights in combat, in the Roll Attack Dice step of that combat, you must re-roll one of your successful hits.'\n    ],\n    postOptionText: 'You can only use this Strategic Ploy once.'\n  }, {\n    name: 'Conqueror Imperative',\n    cost: 1,\n    description: 'Until the end of the Turning Point:',\n    options: [\n      'Each time a friendly FORGE WORLD💀 operative fights in combat, in the Roll Attack Dice step of that combat, you can re-roll one of your attack dice.',\n      'Each time a friendly FORGE WORLD💀 operative makes a shooting attack, in the Roll Attack Dice step of that shooting attack, you must re-roll one of your successful hits.'\n    ],\n    postOptionText: 'You can only use this Strategic Ploy once.'\n  }, {\n    name: 'Bulwark Imperative',\n    cost: 1,\n    description: 'Until the end of the Turning Point:',\n    options: [\n      'Each time a shooting attack is made against a friendly FORGE WORLD💀 operative, in the Roll Defence Dice step of that shooting attack, you can re-roll one of your defence dice.',\n      'Subtract ⬤ from the Movement characteristic of friendly FORGE WORLD💀 operatives.'\n    ],\n    postOptionText: 'You can only use this Strategic Ploy once.'\n  }, {\n    name: 'Aggressor Imperative',\n    cost: 1,\n    description: 'Until the end of the Turning Point:',\n    options: [\n      'Each time a friendly FORGE WORLD💀 operative performs a Normal Move or Charge action, it can move an additional ▲.',\n      'Each time a shooting attack is made against a friendly FORGE WORLD💀 operative, in the Roll Defence DIce step of that shooting attack, you must re-roll one of your successful saves.'\n    ],\n    postOptionText: 'You can only use this Strategic Ploy once.'\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Neurostatic Interference',\n    cost: 1,\n    description: `Use this Tactical Ploy at the start of the Firefight phase. Select one enemy operative Visible to and within ⬟ of a friendly FORGE WORLD💀 operative. Until the end\n                  of the Turning Point, that enemy operative cannot be activated until another enemy operative has been activated (unless it is the only remaining enemy operative).`\n  }, {\n    name: 'Control Edict',\n    cost: 1,\n    description: `Use this Tactical Ploy when you activate a friendly FORGE WORLD💀 LEADER operative. Select one other ready friendly FORGE WORLD💀 operative Visible to and within\n                  ■ of that LEADER operative. At the end of that LEADER operative's activation, you can activate that other ready friendly operative.`\n  }\n\n]\n\nconst data = {\n  name: 'Forge World' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Boy Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Clan Kommando Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION],\n  'Speshulist Fire Team': [Archetype.SEEK_AND_DESTROY]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Dakka! Dakka! Dakka!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly GREENSKIN💀 operative makes a shooting attack, in the Roll Attack Dice step of that shooting attack,\n                  if you retain any critical hits, you can select one of your failed hits to be retained as a successfull normal hit.`\n  }, {\n    name: 'Waaagh!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly GREENSKIN💀 operative fights in combat, in a Roll Attack Dice step of that combat,\n                  when you would retain two or more normal hits, you can select one of those hits to be retained as a critical hit instead.`\n  }, {\n    name: 'Get stuck in!',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly BOY operative performs a Fight action, in the Roll Attack Dice step of that combat, you can re-roll one of your attack dice.'\n  }, {\n    name: 'Skulk about',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly CLAN COMMANDO operative, before rolling defence dice for that shooting attack,\n                  if it has a Conceal order, you can retain one as a successfull normal save without rolling it.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Just a scratch',\n    cost: 1,\n    description: `Use this tactical Ploy in the Resolve Successfull Hits step of a shooting attack or combat, when damage would beinflicked on a friendly GREENSKIN💀 operative,\n                  (excluding KOMMANDO GROT operatives), from an attack dice. Ignore the damage inflicted from that attack dice.`\n  }, {\n    name: 'More Dakka',\n    cost: 1,\n    description: 'Use this Tactical Ploy after making a shooting attack with a friendly GREENSKINI operative in which the target did not lose any wounds. Repeat that shooting attack.'\n  }\n]\n\nconst data = {\n  name: 'Greenskin' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Grey Knight Kill Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Bolter Discipline',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly GREY KNIGHT💀 operative is activated, if it does not perform a Fight action during that activation, it\n                  can perform two Shoot actions during that activation if a storm bolter is selected for each of those shooting attacks`\n  }, {\n    name: 'Shock Assault',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly GREY KNIGHT💀 operative is activated, if it does not perform a Shoot action during that activation, it\n                  can perform two Fight actions during that activation`\n  }, {\n    name: 'Tide of Shadows',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time an enemy operative on a Vantage Point makes a shooting attack, each friendly GREY KNIGHT💀 operative that has a Conceal\n                  order, is in Cover provided by Light terrain and is more than ⬟ from that enemy operative cannot be treated as being on an Engage order for that shooting attack as\n                  a result of that Vantage Point.`\n  }, {\n    name: 'Tide of Celerity',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly GREY KNIGHT💀 operative performs a Charge action, it can move an additional ▲ for that action.'\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Only in death does duty end',\n    cost: 1,\n    description: `Use this Tactical Ploy when a ready friendly GREY KNIGHT💀 operative is incapacitated. That operative is not removed from the killzone until the end of your next\n                  activation and does not count as being injured.`\n  }, {\n    name: 'And they shall know no fear',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly GREY KNIGHT💀 operative is activated. Until the end of that operative's activation, you can ignore any or all modifiers to\n                its APL characteristic and it is not injured.`\n  }\n\n]\n\nconst data = {\n  name: 'Grey Knight' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Tyranid Warrior Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Genestealer Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION],\n  'Tyranid Swarm Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Stalk',\n    cost: 1,\n    description: 'One friendly HIVE FLEET💀 operative that has a Conceal order and is more than ■ from enemy operatives can perform a free Normal Move action.'\n  }, {\n    name: 'Lurk',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly HIVE FLEET💀 operative, in the Roll Defence Dice step of that shooting attack, before\n                  rolling your defence dice, if it is in Cover and either has a Conceal order or is ready, one additional dice can be retained as a successful normal save as a result of Cover.`\n  }, {\n    name: 'Feed',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly HIVE FLEET💀 operative fights in combat, the first time you strike with a critical hit in that combat, inflict one additional damage.'\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Unseen hunter',\n    cost: 1,\n    description: 'Use this Tactical Ploy at the start or end of any activation. Select one friendly HIVE FLEET💀 operative that has not performed a shooting attack during this Turning Point. You can change its order.'\n  }, {\n    name: 'Will of the hive mind',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly HIVE FLEET💀 operative within ⬟ of a friendly HIVE FLEET💀 SYNAPSE operative is activated. Add 1 to the activated operative\\'s APL.'\n  }, {\n    name: 'Aggresive biostrain',\n    cost: 1,\n    description: 'Use this Tactical Ploy after making a shooting attack with a friendly HIVE FLEET💀 operative in which the target did not lose any wounds. Repeat that shooting attack.'\n  }\n]\n\nconst data = {\n  name: 'Hive Fleet' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Fire Warrior Fire Team': [Archetype.SECURITY],\n  'Pathfinder Fire Team': [Archetype.RECON],\n  'Stealth Battlesuit Fire Team': [Archetype.INFILTRATION, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Aimed Pulse Volley',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly FIRE WARRIOR operative makes a shooting attack with a pulse rifle as a result of a Shoot action, in the\n                  Roll Attack Dice step of that shooting attack, if it has not moved during that activation, you can re-roll one of your attack dice.`\n  }, {\n    name: 'Breach and Clear',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly FIRE WARRIOR operative makes a shooting attack with a pulse blaster as a result of a Shoot action:',\n    options: [\n      'For that shooting attack, enemy operatives within ■ of it are not in Cover.',\n      'In the Roll Attack Dice step of that shooting attack, if the target is within ■ of it, you can re-roll one of your attack dice.'\n    ]\n  }, {\n    name: 'Camouflage Field Engagement',\n    cost: 1,\n    description: 'Until the end of the Turning Point, friendly STEALTH BATTLESUIT operatives can perform the following action:',\n    action: {\n      name: 'Camouflage Field Engagement',\n      cost: 1,\n      description: 'Change this operative\\'s order.'\n    }\n  }, {\n    name: 'Recon Sweep',\n    cost: 1,\n    description: `Friendly PATHFINDER operatives that are wholly within ⬟ of any killzone edge can immediately perform a free Dash action, but only if they can finish that move\n                  wholly within ⬟ of a killzone edge that is not your own killzone edge.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Supporting Fire',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Firefight phase, when a Shoot action is declared for a friendly HUNTER CADRE💀 operative.In the Select Valid Target step of that\n                  shooting attack, you must select an enemy operative that is within Engagement Range of one or more other friendly operatives and within ⬟ of the active operative,\n                  and that enemy operative cannot be in Cover as a result of friendly operative's bases. Note, however that in the Roll Defence Dice step of that shooting attack,\n                  the enemy operative can be in Cover as a result of friendly operatives' bases.`\n  }, {\n    name: 'Stand and Fire',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly HUNTER CADRE💀 operative (excluding a DRONE operative) is selected as the target for combat. For that combat:',\n    options: [\n      'Select a ranged weapon to fight with.',\n      'Treat that weapon\\'s Ballistic Skill characteristic as a Weapon Skill characteristic.',\n      'Ignore any special rules that weapon has.'\n    ]\n  }\n]\n\nconst data = {\n  name: 'Hunter Cadre' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy, TacOp } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  // 05/09/2021 - BattleScribe data currently has Fire Team, where it should probably be Kill Team - have submitted PR to BSData but also coding around it for now below\n  'Hunter Clade Kill Team': [Archetype.RECON, Archetype.SEEK_AND_DESTROY],\n  'Hunter Clade Fire Team': [Archetype.RECON, Archetype.SEEK_AND_DESTROY]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Martial Protocol',\n    cost: 1,\n    description: 'Until the end of the Turning Point:',\n    options: [\n      `Each time a friendly HUNTER CLADE💀 VANGUARD operative that is within ⬤ of an objective marker or within ⬟ of your opponent's drop zone make a shooting attack,\n        in the Roll Attack Dice step of that shooting attack, you can re-roll one of your attack dice.`,\n      `Each time a friendly HUNTER CLADE💀 RANGER operative that has not moved during the Turning Point makes a shooting attack, in the Roll Attack Dice step of that shooting\n        attack, you can re-roll one of your attack dice.`\n    ]\n  }, {\n    name: 'Accelerant Agents',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly HUNTER CLADE💀 RUSTSTALKER operative is activated:',\n    options: [\n      'It can perform a free Fight action during that activation',\n      'It can perform two Fight actions during that activation'\n    ]\n  }, {\n    name: 'Neurostatic Interference',\n    cost: 1,\n    description: `Until the end of the Turning Point, while an enemy operative is within ⬟ of a friendly HUNTER CLADE💀 INFILTRATOR operative, each time that enemy operative\n                  fights in combat or makes a shooting attack, in the Roll Attack Dice step of that combat or shooting attack, your opponent cannot re-roll their attack dice.`\n  }, {\n    name: 'Calculated Approach',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly HUNTER CLADE💀 operative that is more than ⬟ from enemy operatives,\n                  in the Roll Defence Dice step of that shooting attack, if you retain any critical saves, you can select one of your failed saves to be retained as a successful\n                  normal save.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Pursuers',\n    cost: 1,\n    description: 'Use this Tactical Ploy in the Scouting step of the mission sequence, when you resolve your scouting option.',\n    options: [\n      'If you selected the Recon option, you can also perform a free Dash action with up to two friendly HUNTER CLADE💀 RANGER operatives that are wholly within your drop zone',\n      `If you selected the Infiltrate option, during the first Turning Point, you can also change the order of up to two ready friendly HUNTER CLADE💀 RANGER operatives when\n         each of them are activated`\n    ]\n  }, {\n    name: 'Command Override',\n    cost: 1,\n    description: `Use this Tactical Ploy when a ready friendly HUNTER CLADE💀 operative is activated. Select one Doctrina Imperative that is not active for your kill team. Until\n                  the end of the Turning Point, that Imperative is treated as being active for that operative instead of the current active Imperative`\n  }, {\n    name: 'Concealed Position',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Set Up Operatives step of the mission sequence. Select one friendly HUNTER CLADE💀 INFILTRATOR operative. That operative can be\n                  set up with a Conceal order anywhere in the killzone that is within ▲ of Heavy terrain and more than ⬟ from enemy operatives and the enemy drop zone. That\n                  operative cannot have its order changed during the first Turning Point as a result of the Infiltrate option in the Scouting step. You can only use this Tactical\n                  Ploy once.`\n  }, {\n    name: 'Motive Force Vitality',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a ready friendly HUNTER CLADE💀 operative is activated. That operative regains D3 lost wounds.'\n  }\n]\n\nconst tacOps: TacOp[] = [\n  {\n    id: 1,\n    name: 'Relentless Pursuit',\n    revealTime: 'You can reveal this Tac Op in the Target Reveal step of any Turning Point.',\n    description: [\n      'At the end of any Turning Point, if there are no enemy operatives in the killzone more than ⬟ from friendly operatives, you score 1VP.',\n      'If you achieve the first condition in any subsequent Turning Points, you score 1VP.'\n    ]\n  }, {\n    id: 2,\n    name: 'Calculated Eradication',\n    revealTime: 'Reveal this TacOp when a Doctrina Imperative first becomes active for your kill team.',\n    description: [\n      `At the end of any Turning Point, if an Imperative is active for your kill team, and the total wounds lost by enemy operatives during that Turning Point is greater than\n      that lost by friendly operatives, you score 1VP`,\n      `At the end of any Turning Point, if a different Imperative is active for your kill team, and the total wounds lost by enemy operatives during that Turning Point is\n      greater than that lost by friendly operatives, you score 1VP`\n    ]\n  }, {\n    id: 3,\n    name: 'Assassination Order',\n    revealTime: 'Reveal this Tac Op in the Target Reveal step of the first Turning Point. Your opponent selects one of their operatives.',\n    description: [\n      'If that enemy operative is incapacitated before the fourth Turning Point, you score 1VP.',\n      'If the first condition is achieved by a friendly HUNTER CLADE💀 operative within ■ of that enemy operative, you score 1VP.'\n    ]\n  }\n]\n\nconst data = {\n  name: 'Hunter Clade' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes,\n  tacOps\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Guardsman Fire Team': [Archetype.SECURITY],\n  'Tempestus Scion Fire Team': [Archetype.SECURITY, Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Take Aim!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly operative that was issued this Guardsman Order makes a shooting attack, in the Roll Attack Dice step of that\n                  shooting attack, you can re-roll any or all of your attack dice results of 1.`\n  }, {\n    name: 'Take Cover!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly operative that was issued this Guardsman Order, in the Roll Defence Dice\n                  step of that shooting attack, if it is in Cover, you can re-roll any or all of your defence dice results of 1.`\n  }, {\n    name: 'Fix Bayonets!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly operative that was issued this Guardsman Order fights in combat, in the Roll Attack Dice step of that combat,\n                  you can re-roll any or all of your attack dice results of 1.`\n  }, {\n    name: 'Move! Move! Move!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly operative that was issued this Guardsman Order is activated, until the end of that activation, add ▲ to its\n                  Movement characteristic.`\n  }, {\n    name: 'Special Forces',\n    cost: 1,\n    description: `Select the Pick Up action or one mission action friendly TEMPESTUS SCION operatives can perform. Until the end of the Turning Point, each time a friendly TEMPESTUS SCION\n                  operative is activated, it can perform that action for one less AP (to a minimum of 0AP).`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Bring It Down!',\n    cost: 1,\n    description: `Use this Tactical Ploy after a friendly IMPERIAL GUARD💀 operative makes a shooting attack. Until the end of the Turning Point, each time another friendly IMPERIAL GUARD💀\n                  operative makes a shooting attack against the target of that shooting attack, in the Roll Attack Dice step of that subsequent shooting attack, you can re-roll any or all\n                  of your attack dice.`\n  }\n\n]\n\nconst data = {\n  name: 'Imperial Guard' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy, TacOp } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Kommando Kill Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Sssshhhh!',\n    cost: 1,\n    description: `Friendly KOMMANDO💀 operatives that are not within Line of Sight of enemy operatives, or have a Conceal order and are more than ⬟ from enemy operatives,\n                  can immediately perform a free Dash action. You can only use this strategic ploy once.`\n  }, {\n    name: 'Dakka! Dakka! Dakka!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly KOMMANDO💀 operative makes a shooting attack, in the Roll Attack Dice step of that shooting attack,\n                  if you retain any critical hits, you can select one of your failed hits to be retained as a successfull normal hit.`\n  }, {\n    name: 'Waaagh!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly KOMMANDO💀 operative fights in combat, in a Roll Attack Dice step of that combat,\n                  when you would retain two or more normal hits, you can select one of those hits to be retained as a critical hit instead.`\n  }, {\n    name: 'Skulk about',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a shooting attack is made against a friendly KOMMANDO💀 operative, before rolling defence dice for that shooting attack,\n                  if it has a Conceal order, you can retain one as a successfull normal save without rolling it.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Just a scratch',\n    cost: 1,\n    description: `Use this tactical Ploy in the Resolve Successfull Hits step of a shooting attack or combat, when damage would beinflicked on a friendly KOMMANDO💀 operative,\n                  (excluding KOMMANDO GROT operatives), from an attack dice. Ignore the damage inflicted from that attack dice.`\n  }, {\n    name: 'Krump \\'em!',\n    cost: 1,\n    description: 'Use this Tactical Ploy at the end of a Firefights phase. Select one friendly KOMMANDO💀 operative. It can perform a free Fight action.'\n  }, {\n    name: 'Sneaky git',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Set Up Operatives step of the mission sequence. Select one friendly KOMMANDO💀 operative (excluding BOMB SQUIG operatives).\n                  That operative can be set up with a Conceal order anywhere on the battlefield that is within ▲ of Heavy terrain and more than ⬟ from enemy operatives and the enemy drop zone.`\n  }\n]\n\nconst tacOps: TacOp[] = [\n  {\n    id: 1,\n    name: 'Blow it up!',\n    revealTime: `You can reveal this Tac Op in the Target Reveal step of the first Turning Point.\n                 Your opponent selects one terrain feature that includes any parts with the Heavy trait to be their bulwark.`,\n    description: ['If a friendly operative performs the \\'Blow it up!\\' action, you score 2VPs'],\n    action: {\n      name: 'Blow it up!',\n      cost: 2,\n      description: `An operative can perform this action while within ▲ of your opponent's bulwark. An operative cannot perform this action while within ⬤ of enemy operatives.\n                    Other than a Dash action, an operative cannot perform any other action during an activation in which it would perform this action.`\n    }\n  }, {\n    id: 2,\n    name: 'Shokk taktiks',\n    revealTime: 'Reveal this TacOp at the end of the first Turning Point',\n    description: [\n      'If any enemy operatives were incapacitated during the first Turning Point, you score 1 VP.',\n      'At the end of the second Turning Point, if friendly operatives control more objective markers than enemy operatives control, you score 1 VP'\n    ]\n  }, {\n    id: 3,\n    name: 'Get stick in!',\n    revealTime: 'You can reveal this Tac Op in the Reveal Tac Ops step of any turning Point',\n    description: [\n      'At the end of any turning Point (excluding the fourth), if three or more friendly operatives are within ⬟ of your opponents drop zone, you score 1 VP.',\n      'If you achieve the first condition at the end of any subsequent Turning Points (excluding the fourth), you score 1 VP.'\n    ]\n  }\n]\n\nconst data = {\n  name: 'Kommando' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes,\n  tacOps\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Intercessor Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Assault Intercessor Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Incursor Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION, Archetype.RECON],\n  'Infiltrator Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION, Archetype.RECON],\n  'Reiver Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION, Archetype.RECON],\n  'Heavy Intercessor Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Tactical Marine Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Scout Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION, Archetype.RECON],\n  'Death Watch Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Bolter Discipline',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly SPACE MARINE💀 operative (excluding a SCOUT operative) is activated, if it does not perform a Fight action\n                  during that activation, it can perform two Shoot actions during that activation if a bolt weapon is selected for each of those shooting attacks. A bolt weapon is a\n                  ranged weapon that includes 'bolt' in its name, e.g. boltgun, heavy bolter etc. In the case of the infernus heavy bolter, it must be the heavy bolter profile that\n                  is selected.`\n  }, {\n    name: 'Shock Assault',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly SPACE MARINE💀 operative (excluding a SCOUT operative) is activated, if it does not perform a Shoot action\n                  during that activation, it can perform two Fight actions during that activation.`\n  }, {\n    name: 'Tactical Precision',\n    cost: 1,\n    description: `Until the end of the Turning Point, while a friendly SPACE MARINE💀 operative is within ■ of and Visible to a friendly LEADER operative, each time it fights in combat\n                  or makes a shooting attack, in the Roll Attack Dice step of that combat or shooting attack, you can re-roll one of your attack dice.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Transhuman Physiology',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Roll Defence Dice step of a shooting attack, after rolling defence dice for a friendly PRIMARIS operative. You can change one of your\n                  retained normal saves to a critical save.`\n  }, {\n    name: 'Only in death does duty end',\n    cost: 1,\n    description: `Use this Tactical Ploy when a ready friendly SPACE MARINE💀 operative is incapacitated. That operative is not removed from the killzone until the end of your next \n                activation or the end of the battle (whichever comes first) and does not count as being injured.`\n  }, {\n    name: 'And they shall know no fear',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly SPACE MARINE💀 operative is activated. Until the end of that operative's activation, you can ignore any or all modifiers to\n                its APL characteristic and it is not injured.`\n  }, {\n    name: 'Omni-Scrambler',\n    cost: 1,\n    description: `Use this Tactical Ploy at the start of the Firefight phase. Select one enemy operative Visible to and within ⬟ of a friendly INFILTRATOR operative. Until the end\n                  of the Turning Point that enemy operative cannot be activated until another enemy operative has been activated (unless it is the only remaining enemy operative).`\n  }, {\n    name: 'Multi-Spectrum Array',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly INCURSOR operative performs a Shoot action. For that action\\'s shooting attack, enemy operatives are not Obscured.'\n  }, {\n    name: 'Terror Troop',\n    cost: 1,\n    description: 'Use this Tactical Ploy during a friendly REIVER operative\\'s activation. Until the start of the next Turning Point:',\n    options: [\n      `Each time an enemy operative would perform a mission action or the Pick Up action, if this friendly REIVER operative is within SQUARE of that enemy operative, one additional\n        action point must be subtracted to perform that action.`,\n      'When determining control of an objective marker that friendly REIVER operative is within range of, treat enemy operatives\\' total APL as being 1 less. Note that this is not a modifier.'\n    ]\n  }\n\n]\n\nconst data = {\n  name: 'Space Marine' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Custodian Guard Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Sister of Silence Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Aegis of the Emperor',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time Critical Damage would be inflicted upon a friendly TALONS OF THE EMPEROR💀 operative from an attack dice, you can choose\n                  for that attack dice to inflict Normal Damage instead.`\n  }, {\n    name: 'Creeping Dread',\n    cost: 1,\n    description: `Until the end of the Turning Point, while an enemy operative is within ■ of a friendly ANATHEMA PSYKANA operative, worsen the Ballistic Skill and Weapon Skill\n                  characteristics of ranged and melee weapons respectively that enemy operative is equipped with as if it is injured.`\n  }, {\n    name: 'Peerless Warriors',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly ADEPTUS CUSTODES operative is activated, it can perform up to two Shoot and Fight actions during that activation.'\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Arcane Genetic Alchemy',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Roll Defence Dice step of a shooting attack, after rolling defence dice for a friendly ADEPTUS CUSTODES operative. You can change one of\n                  your retained normal saves to a critical save.`\n  }, {\n    name: 'Brotherhood of Demigods',\n    cost: 1,\n    description: `Use this Tactical Ploy at the end of the Firefight phase. Select one friendly ADEPTUS CUSTODES operative to perform one free Fight or Overwatch action (this does not \n                  count as an activation).`\n  }, {\n    name: 'Talons',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly TALONS OF THE EMPEROR💀 operative within ⬟ of enemy operatives or within ⬤ of the centre of an objective marker is activated:',\n    options: [\n      'If that operative is an ANATHEMA PSYKANA operative, select one ready friendly ADEPTUS CUSTODES operative Visible to and within ■ of it',\n      'If that operative is an ADEPTUS CUSTODES operative, select one ready friendly ANATHEMA PSYKANA operative Visible to and within ■ of it'\n    ],\n    postOptionText: 'Both operatives are activated at the same time and you can perform their actions in any order.'\n  }\n]\n\nconst data = {\n  name: 'Talons of the Emperor' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  // 05/09/2021 - BattleScribe data currently has Kill Team, where it should probably be Fire Team - have submitted PR to BSData but also coding around it for now below\n  'Rubric Marine Kill Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Rubric Marine Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.SECURITY],\n  'Tzaangor Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Malicious Volleys',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly ARCANA ASTARTES operative is activated, if it does not perform a Fight action during that activation, it\n                  can perform two Shoot actions during that activation if a bolt weapon is selected for each of those shooting attacks. A bolt weapon is a ranged weapon that includes \n                  'bolt' in its name (excluding Doombolt), e.g. inferno boltgun.`\n  }, {\n    name: 'Sorcerous Automata',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly ARCANA ASTARTES operative (excluding an ASPIRING SORCERER operative) is activated while Visible to and within\n                  ■ of a ready friendly ARCANA ASTARTES ASPIRING SORCERER operative, add 1 to its APL.`\n  }, {\n    name: 'Inhuman Savagery',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly TZAANGOR operative fights in combat, if it performed a Charge action during that activation, in the Roll Attack\n                  Dice step of that combat, if you retain two or more successful hits, you can retain one failed hit as a successful normal hit.`\n\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Treasure Hunter',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly TAZAANGOR operative is activated. During that activation, that operative can perform a mission action or the Pick Up action\n                  for one less AP (to a minimum of 0AP).`\n  }, {\n    name: 'Sorcerous Focus',\n    cost: 1,\n    description: `Use this Tactical Ploy after rolling one D6 to resolve a second psychic power with a friendly ASPIRING SORCERER operative that is not within Engagement Range of\n                  enemy operatives. Treat the result of that D6 as a 6.`\n  }, {\n    name: 'Infernal Fusillade',\n    cost: 1,\n    description: `Use this Tactical Ploy after making a shooting attack with a friendly ARCANA ASTARTES operative (excluding an ASPIRING SORCERER operative) in which the target did\n                  not lose any wounds. Repeat that shooting attack.`\n  }\n]\n\nconst data = {\n  name: 'Thousand Sons' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Chaos Space Marine Fire Team': [Archetype.SEEK_AND_DESTROY, Archetype.RECON, Archetype.INFILTRATION, Archetype.SECURITY],\n  'Chaos Cultist Fire Team': [Archetype.RECON, Archetype.INFILTRATION]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Malicious Volleys',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly HERETIC ASTARTES operative is activated, if it does not perform a Fight action during that activation, it\n                  can perform two Shoot actions during that activation if a bolt weapon is selected for each of those shooting attacks. A bolt weapon is a ranged weapon that includes\n                  'bolt' in its name, e.g. boltgun, heavy bolter etc.`\n  }, {\n    name: 'Hateful Assault',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly HERETIC ASTARTES operative is activated, if it does not perform a Shoot action during that activation, it can\n                  perform two Fight actions during that activation.`\n  }, {\n    name: 'Let the Galaxy Burn!',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly HERETIC ASTARTES operative is activated, once during that activation, in the Roll Attack Dice step of a combat\n                  or shooting attack, if it is targeting the closest valid target, you can retain one of your attack dice results of 5+ that is a successful hit as a critical hit (if you\n                  could already retain one of your results of 5+, you can retain one of your results of 4+ instead).`\n\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Veteran of the Long War',\n    cost: 1,\n    description: `Use this Tactical Ploy in a friendly HERETIC ASTARTES operative's activation, after it fights in combat or makes a shooting attack. If the target did not lose any\n                  wounds as a result of that combat or shooting attack, repeat that combat or shooting attack.`\n  }, {\n    name: 'Strike from Within',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Set Up Operatives step of the mission sequence. Select one friendly CHAOS CULTIST operative. That operative can be set up with a Conceal\n                  order anywhere in the killzone that is within ▲ of Heavy terrain and more than ⬟ from enemy operatives and the enemy drop zone.`\n  }, {\n    name: 'Warp Infused',\n    cost: 1,\n    description: `Use this Tactical Ploy when a friendly HERETIC ASTARTES operative is activated. Until the end of that operative's activation, you can ignore any or all modifiers to\n                  its APL characteristic and it is not injured.`\n  }\n]\n\nconst data = {\n  name: 'Traitor Space Marine' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Troupe Kill Team': [Archetype.SEEK_AND_DESTROY, Archetype.INFILTRATION, Archetype.RECON]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Rising Crescendo',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly TROUPE💀 operative is activated:',\n    options: [\n      'It can perform Dash and Charge actions while within Engagement Range of enemy operatives.',\n      'Each time it performs a Normal Move, Fall Back, Dash or Charge action during that activation, it can move an additional ▲'\n    ]\n  }, {\n    name: 'Domino field',\n    cost: 1,\n    description: `Until the end of the Turning Point, while a friendly TROUPE💀 operative that has not made a shooting attack during the Turning Point is within ▲ of a terrain feature that provides Cover,\n                  enemy operatives always treat it as having a Conceal order, regardless of any other rules (e.g. Vantage Point).`\n  }, {\n    name: 'Prismatic Blur',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a friendly TROUPE💀 operative performs a Normal Move, Fall Back or Charge action, it is a prismatic blur. While it is a prismatic blur:',\n    options: [\n      'Each time a shooting attack is made against that operative, in the Roll Defence Dice step of that shooting attack, you can re-roll one of your defence dice.',\n      'Each time that operative fights in combat, in the Resolve Successful Hits step of that combat, each time your opponent strikes with a normal hit, you can roll one D6: on a 4+, treat that strike as a parry instead.'\n    ]\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Murderous entrance',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Resolve Successful Hits step of a combat, after a friendly TROUPE💀 operative that performed a Charge action during this activation strikes with a critical hit.\n                  You can immediately select one of your remaining attack dice and strike with it.`\n  }, {\n    name: 'The curtain falls',\n    cost: 1,\n    description: `Use this Tactical Ploy in the Resolve Successful Hits step of a combat, after an active friendly TROUPE💀 operative strikes. Immediately end that combat and that friendly operative can\n                  perform a Fall Back action for 1 AP even if it has performed an action during that activation that prevents it from performing a Fall Back action (e.g. a Charge action).`\n  }, {\n    name: 'Hero\\'s Path',\n    cost: 1,\n    description: 'Use this Tactical Ploy when a friendly TROUPEI operative is activated. Until the end of its activation, it can perform the following action:',\n    action: {\n      name: 'Hero\\'s path',\n      cost: 3,\n      description: 'Move this operative anywhere in the killzone that is more than ⬟ from enemy operatives.'\n    }\n  }\n]\n\nconst data = {\n  name: 'Troupe' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes\n}\n\nexport default data\n","import { Archetype, FireteamArchetypes, Ploy, TacOp } from '../../../types/KillTeam2021'\n\nconst archetypes: FireteamArchetypes = {\n  'Veteran Guardsman Kill Team': [Archetype.SECURITY]\n}\n\nconst strategicPloys: Ploy[] = [\n  {\n    name: 'Overcharge lasguns',\n    cost: 1,\n    description: 'Until the end of the Turning Point, change the profile of lasguns that friendly VETERAN GUARDSMAN💀 operatives are equipped with to include the following:',\n    weapon: {\n      name: 'Overcharged lasgun',\n      melee: false,\n      attacks: 4,\n      hit: 4,\n      damage: 2,\n      criticalDamage: 3,\n      specialRules: 'AP1, Hot',\n      criticalRules: ''\n    }\n  }, {\n    name: 'Take cover',\n    cost: 1,\n    description: 'Until the end of the Turning Point, each time a shooting attack is made against a friendly VETERAN GUARDSMAN💀 operative, if it is in Cover, improve it\\'s Save characteristic by 1 for that shooting attack.'\n  }, {\n    name: 'Into the breach',\n    cost: 1,\n    description: 'Each friendly VETERAN GUARDSMAN💀 operative within your drop zone can perform a free Dash action, but must finish that move closer to the enemy\\'s drop zone.'\n  }, {\n    name: 'Clear the line',\n    cost: 1,\n    description: `Until the end of the Turning Point, each time a friendly VETERAN GUARDSMAN💀 operative fights in combat,\n                  before rolling your attack dice for that combat, you can retain one as a successfull normal hit withour rolling it.`\n  }\n]\n\nconst tacticalPloys: Ploy[] = [\n  {\n    name: 'Inspirational leadership',\n    cost: 1,\n    description: `Use this Tactical Ploy during a VETERAN GUARDSMAN💀 LEADER operative's operation. That operative issues a\n                  Guardsman Order to all friendly VETERAN GUARDSMAN💀 operatives within ⬟ of and visible to it.`\n  }, {\n    name: 'In death, atonement',\n    cost: 1,\n    description: `Use this Tactical Ploy when a ready friendly VETERAN GUARDSMAN💀 operative is incapacitated. That operative is not removed from the killzone until the end of\n                  your next activation or the end of the battle (whichever comes first) and does not count as being injured.`\n  }, {\n    name: 'Combined arms',\n    cost: 1,\n    description: `Use this Tactical Ploy after rolling your attack dice for a shooting attack made by a friendly VETERAN GUARDSMAN💀 operative.\n                  If the target of that attack is an enemy operative that was targeted by another friendly VETERAN GUARDSMAN💀 operative with a\n                  shooting attack during that Turning point, you can re-roll any or all of your attack dice for that shooting attack.`\n  }\n]\n\nconst tacOps: TacOp[] = [{\n  id: 1,\n  name: 'Boots on the ground',\n  revealTime: 'You can reveal this Tac Op at the end of any Turning Point',\n  description: [\n    `At the end of that Turning Point, if there are more friendly operatives than enemy operatives within ⬟ of your drop zone, and there are more friendly\n     operatives than enemy operatives within ⬟ of your opponent's drop zone, you score 1VP.`,\n    'If you achieve the first condition at the end of any subsequent Turning Points, you score 1VP.'\n  ]\n}, {\n  id: 2,\n  name: 'Stand fast',\n  revealTime: 'You can reveal this Tac Op in the Reveal Tac Ops step of any Turning Point',\n  description: [\n    'At the end of any Turning Point, if friendly operatives control two or more objective markers, and frierndly operatives control more objective markers than enemy operatives, you score 1VP.',\n    'If you achieve the first condition at the end of any subsequent Turning Point, you score an additional 1VP.'\n  ]\n}, {\n  id: 3,\n  name: 'Glory in death',\n  revealTime: 'Reveal this Tac Op at the end of the battle',\n  description: [\n    'If more friendly operatives were incapacitated than enemy operatives, but you scored more victory points from the mission objective, you score 2 VPs.'\n  ]\n}]\n\nconst data = {\n  name: 'Veteran Guardsmen' as const,\n  strategicPloys,\n  tacticalPloys,\n  archetypes,\n  tacOps\n}\n\nexport default data\n","import React from 'react'\nimport { Badge } from 'react-bootstrap'\nimport { Archetype } from '../../types/KillTeam2021'\n\ninterface Props {\n  archetype: Archetype\n}\n\nexport function ArchetypeBadge (props: Props) {\n  return (\n    <Badge\n      pill variant='secondary' className='mb-2' style={{\n        textTransform: 'uppercase',\n        marginRight: '10px'\n      }}\n    >\n      {props.archetype}\n    </Badge>\n  )\n}\n","import React, { FC } from 'react'\nimport { Card } from 'react-bootstrap'\nimport { Archetype } from '../../types/KillTeam2021'\nimport { PloysColumn } from './PloysColumn'\nimport { TacOpsList } from './TacOpsList'\nimport getFactionSpecificData from './data'\nimport { ArchetypeBadge } from './ArchetypeBadge'\n\ninterface Props {\n  faction: string\n  fireteams: string[]\n}\n\nexport const FactionSpecificData: FC<Props> = (props) => {\n  const headingStyle = {\n    background: '#FF6F2D',\n    color: 'black',\n    padding: '10px',\n    width: '100%',\n    display: 'flex'\n  }\n\n  const factionSpecificData = getFactionSpecificData(props.faction)\n\n  const archetypes: Archetype[] = props.fireteams\n    .flatMap(fireteam => factionSpecificData?.archetypes[fireteam] as unknown as Archetype)\n    .filter(Boolean)\n    .filter((item, index, self) => self.indexOf(item) === index)\n\n  // @ts-expect-error\n  const tacOps = factionSpecificData?.tacOps\n\n  return (\n    <>\n      {(factionSpecificData != null) &&\n        <div>\n          <div style={{ display: 'flex', justifyContent: 'space-between', flexDirection: 'row' }}>\n            <Card style={{ width: '100%', marginRight: '5px' }}>\n              <Card.Header style={{ ...headingStyle }} as='h2'>Strategic Ploys</Card.Header>\n              <Card.Body>\n                <PloysColumn ploys={factionSpecificData.strategicPloys} />\n              </Card.Body>\n            </Card>\n            <Card style={{ width: '100%', marginLeft: '5px' }}>\n              <Card.Header style={{ ...headingStyle }} as='h2'>Tactical Ploys</Card.Header>\n              <Card.Body>\n                <PloysColumn ploys={factionSpecificData.tacticalPloys} />\n              </Card.Body>\n            </Card>\n          </div>\n          <div>\n            <Card>\n              <Card.Header style={{ ...headingStyle }} as='h2'>Tac Ops</Card.Header>\n              <Card.Body>\n                <Card.Title>ARCHETYPES - {archetypes.map((archetype, index) => { return <ArchetypeBadge key={index} archetype={archetype} /> })}</Card.Title>\n\n                {tacOps !== undefined && <TacOpsList tacOps={tacOps} />}\n              </Card.Body>\n            </Card>\n          </div>\n        </div>}\n    </>\n  )\n}\n","import React, { MouseEvent } from 'react'\nimport { Col, Card } from 'react-bootstrap'\nimport { CloseButton } from '../CloseButton'\nimport { Operative, Datacard, PsychicPower } from '../../types/KillTeam2021'\nimport { Datasheet } from './Datasheet'\nimport { RuleList } from './RuleList'\nimport { PowerList } from './PowerList'\nimport hash from 'node-object-hash'\nimport _ from 'lodash'\nimport { FactionSpecificData } from './FactionSpecificData'\n\ninterface Props {\n  name: string\n  faction: string\n  operatives: Operative[]\n  psychicPowers: PsychicPower[]\n  fireteams: string[]\n  onClose: (event: MouseEvent<HTMLButtonElement>) => void\n  showWoundTrack: boolean\n}\n\nconst groupByDatacard = (operatives: Operative[]): Datacard[] => {\n  const groupedOperatives = _.groupBy(operatives, (o) => (hash().hash({ datacard: o.datacard, weapons: o.weapons, equipment: o.equipment })))\n  return _.map(groupedOperatives, (ops, hash) => ({\n    ...ops[0],\n    name: ops[0].datacard,\n    operativeNames: ops.map((c) => (c.name)).sort()\n  }))\n}\n\nexport function Roster (props: Props) {\n  const headingStyle = {\n    background: '#FF6F2D',\n    color: 'black',\n    padding: '10px',\n    width: '100%',\n    display: 'flex'\n  }\n  const datacards = groupByDatacard(props.operatives)\n\n  return (\n    <>\n      <h1 style={headingStyle}>\n        <Col>\n          {props.name}\n        </Col>\n        <Col style={{ flexGrow: 0, textAlign: 'right' }}>\n          <CloseButton onClose={props.onClose} />\n        </Col>\n      </h1>\n      {_.orderBy(datacards, ['leader', 'name'], ['desc', 'asc']).map((datacard: Datacard) => (\n        <Datasheet datacard={datacard} showWoundTrack={props.showWoundTrack} />\n      ))}\n      <Card>\n        <Card.Header style={{ ...headingStyle, breakBefore: 'always' }} as='h2'>Rules</Card.Header>\n        <Card.Body>\n          <RuleList rules={_.uniqBy(_.flatten(datacards.map((m) => (m.rules))), 'name')} />\n        </Card.Body>\n      </Card>\n      {props.psychicPowers.length > 0 && <Card>\n        <Card.Header style={{ ...headingStyle }} as='h2'>Psychic Powers</Card.Header>\n        <Card.Body>\n          <PowerList powers={props.psychicPowers} />\n        </Card.Body>\n      </Card>}\n\n      <FactionSpecificData faction={props.faction} fireteams={props.fireteams} />\n    </>\n  )\n}\n","import _ from 'lodash'\nimport { Ability } from '../../types/Ability'\n\nconst phasePatterns = {\n  scouting: [\n    / scouting /\n  ],\n  deployment: [\n    / before the first battle round /,\n    / set up /,\n    / cult ambush /\n  ],\n  initiative: [\n    / start of each battle round /,\n    / beginning of each battle round /,\n    / at the beginning of the battle round /\n  ],\n  movement: [\n    / movement phase /,\n    / climbs? /,\n    / normal move /,\n    / advances? /,\n    / charges? /,\n    / falls? back /,\n    / reacts? /,\n    / overwatch /,\n    / retreats? /,\n    / fly /,\n    / after this model has charged /,\n    / from reserves? /,\n    / can move across /,\n    / setup within /\n  ],\n  psychic: [\n    / psychic /,\n    / deny the witch /,\n    / perils of the warp /,\n    / psychich / // handle typo\n  ],\n  shooting: [\n    / shooting phase /,\n    / shots? /,\n    / ballistic skill /,\n    / ranged /,\n    / range characteristic /,\n    / half range /,\n    / long range /,\n    / short range /,\n    / grenades? /,\n    / shoots? /,\n    / shooting /,\n    / fire[sd]+ /,\n    / firing /,\n    / obscured /,\n    / obcured /, // handle typo\n    / order(ed)? /,\n    / voice of command /,\n    / invulnerable save /,\n    / demolition charges? /,\n    / liberator autostubs /,\n    / obscurred /, // handle typo\n    / look out sir! /,\n    / pistol /,\n    / heavy weapons?/,\n    / add [0-9] to saving throws /\n  ],\n  fight: [\n    / fight phase /,\n    / fights? /,\n    / weapon skill /,\n    / attacks characteristics? /,\n    / strength characteristics? /,\n    / piles? in /,\n    / consolidates? /,\n    / melee /,\n    / close combat /,\n    / death to the false emperor /,\n    / additional attacks? /,\n    / invulnerable save /,\n    / look out sir! /,\n    / intervening terrain /,\n    / terrain that is between the two models /,\n    / damage characteristic is [0-9] in a battle round in which this model charged /,\n    / add [0-9] to saving throws /\n  ],\n  morale: [\n    / nerve /,\n    / leadership /\n  ]\n}\n\nconst genericPatterns = [\n  / weapon /,\n  / hit rolls? /,\n  / attack(s|ing)? /,\n  / saves? /,\n  / saving throws? /,\n  / injury rolls? /,\n  / wound rolls? /,\n  / loses? a wound /,\n  / fall(ing)? damage /,\n  / the bearer is taken out of action /,\n  / toughness characteristic /,\n  / suffers? a mortal wound /,\n  / taken out of action /,\n  / this weapon/,\n  / reduced to 0 wounds /\n]\n\nconst antiPatterns = {\n  deployment: [\n    / from reserve /\n  ],\n  movement: [\n    / previous movement phase /,\n    / preceding movement phase /,\n    / if the firing model moved /,\n    / moved during the movement phase /,\n    / round in which it charges or is charged /,\n    / in which it made a successful charge /,\n    / even if it fell back in the movement phase /,\n    / model that can fly /,\n    / as if it were the movement phase /,\n    / stunned /,\n    / penalty for moving /,\n    / as if the model had remained stationary /,\n    / demolition charge /\n  ],\n  psychic: [\n    / after all of this weapon's attacks have been resolved /\n  ],\n  shooting: [\n    / when (it|this model) fires overwatch /,\n    / invulnerable save (against attacks made )?in the fight phase /,\n    / as if it were your shooting phase /,\n    / tactical support turret /,\n    / out of action in the shooting phase /,\n    / mordian /\n  ],\n  fight: [\n    / the ordered model immediately fights /,\n    / shots equal to its attacks characteristic /,\n    / stunned /,\n    / target enemies at [0-9]{1,2}\" or less /,\n    / within half range /,\n    / tactical support turret /\n  ],\n  morale: [\n    / target model's leadership /,\n    / weapon against a model which has a leadership /,\n    / subtract 1 from its leadership / // phantasm grenade effect\n  ]\n}\n\nexport const calculatePhases = (description: string) => {\n  const minDesc = ' ' + description.toLowerCase().replace(/[.,)(]/g, '') + ' '\n  const phases: string[] = []\n  _.forIn(phasePatterns, (patterns, phase) => {\n    if (_.some(patterns, (re) => (re.test(minDesc)))) {\n      phases.push(phase)\n    }\n  })\n  // If there's no fight or shoot yet, test some generic patterns that could be either\n  if (!phases.includes('fight') && !phases.includes('shooting')) {\n    if (_.some(genericPatterns, (re) => (re.test(minDesc)))) {\n      phases.push('fight', 'shooting')\n    }\n  }\n  // Remove phases for some patterns that get picked up incorrectly\n  _.forIn(antiPatterns, (patterns, phase) => {\n    if (_.some(patterns, (re) => (re.test(minDesc)))) {\n      _.remove(phases, (p) => (p === phase))\n    }\n  })\n  // OK, done\n  return phases\n}\n\nexport const parseAdditionalAttacks = (description: string) => {\n  const patterns = [\n    /Add ([1-9]{1}) to this model's Attacks characteristic/,\n    / ([1-9]|an|one|two) additional attack/,\n    /(one) \\(and only one\\) attack with this weapon./\n  ]\n  const antiPatterns = [\n    /if a model/,\n    /if the bearer/,\n    /unless/\n  ]\n  return _.sum(_.map(patterns, (pattern) => {\n    const match = description.match(pattern)\n    if (match != null) {\n      if (_.some(antiPatterns, (re) => (re.test(description)))) {\n        return 0\n      }\n      if (match[1] === 'an' || match[1] === 'one') return 1\n      if (match[1] === 'two') return 2\n      return parseInt(match[1] || match[2])\n    }\n    return 0\n  }))\n}\n\nexport const invulnerableSave = (abilities: Ability[]) => {\n  const patterns = [\n    /models with this ability have a ([1-6]{1})\\+ invulnerable save/,\n    /has a ([1-6]{1})\\+ invulnerable save($|\\.|,| and| instead of)/,\n    /has an invulnerable save of ([1-6]{1})\\+/\n  ]\n  const saves = _.map(abilities, (a) => {\n    return _.min(_.map(patterns, (pattern) => {\n      const match = a.description.match(pattern)\n      if (match != null) {\n        return parseInt(match[1])\n      }\n      return null\n    }))\n  })\n  return _.min(saves)\n}\n","import { v4 as uuidv4 } from 'uuid'\nimport _ from 'lodash'\nimport hash from 'node-object-hash'\nimport * as XPath from 'xpath-ts'\nimport { parseAdditionalAttacks, calculatePhases, invulnerableSave } from './Abilities'\n\n// useNamespaces is NOT a React hook, so:\n// eslint-disable-next-line\nconst xpath = XPath.useNamespaces({ roster: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst stat = (name, model) => {\n  const nodes = xpath(`roster:profiles/roster:profile[@typeName='Model']//roster:characteristic[@name='${name}']`, model)\n  if (nodes.length > 0) {\n    return parseInt(nodes[0].childNodes[0].nodeValue)\n  } else { return '' }\n}\n\nconst weaponStat = (name, weapon, numeric) => {\n  const nodes = xpath(`roster:characteristics/roster:characteristic[@name='${name}']`, weapon)\n  if (nodes.length > 0) {\n    return numeric ? parseInt(nodes[0].childNodes[0].nodeValue) : nodes[0].childNodes[0].nodeValue\n  } else { return '' }\n}\n\nconst points = (model) => {\n  const costNode = xpath('.//roster:costs/roster:cost[@name=\\'pts\\']', model)\n  return _.sumBy(costNode, (x) => parseInt(x.getAttribute('value')))\n}\n\nconst parseForceRule = (rule) => {\n  const description = xpath('roster:description', rule)[0].childNodes[0].nodeValue\n  return {\n    name: rule.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parseAbility = (ability) => {\n  const description = xpath(\".//roster:characteristic[@name='Description']\", ability)[0].childNodes[0].nodeValue\n  return {\n    name: ability.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parseWeapon = (weapon, userStrength) => {\n  let strength = weaponStat('S', weapon, false)\n  if (strength === 'User') {\n    strength = userStrength\n  }\n  let match = /x([0-9]+)/i.exec(strength)\n  if (match) {\n    strength = userStrength * parseInt(match[1])\n  }\n  match = /\\+([0-9]+)/i.exec(strength)\n  if (match) {\n    strength = userStrength + parseInt(match[1])\n  }\n  let weaponType = weaponStat('Type', weapon, false)\n  if (weaponType !== 'Melee') { weaponType = weaponType.split(' ').slice(0, -1).join(' ') }\n  return {\n    name: weapon.getAttribute('name'),\n    range: weaponStat('Range', weapon, true),\n    type: weaponType,\n    shots: weaponStat('Type', weapon, false).split(' ').slice(-1)[0],\n    strength,\n    armourPiercing: weaponStat('AP', weapon, true),\n    damage: weaponStat('D', weapon, false),\n    abilities: weaponStat('Abilities', weapon, false)\n  }\n}\n\nconst parseWargear = (wargear) => {\n  const description = xpath(\".//roster:characteristic[@name='Ability']\", wargear)[0].childNodes[0].nodeValue\n  return {\n    name: wargear.getAttribute('name'),\n    description,\n    phases: calculatePhases(description)\n  }\n}\n\nconst parsePsychicPower = (power) => {\n  let description = xpath(\".//roster:characteristic[@name='Psychic Power']\", power)[0].childNodes[0].nodeValue\n  const warpChargeDescription = description.match(/warp charge value of ([0-9]+)\\.(.*)/)\n  let charge = null\n  if (warpChargeDescription.length > 2) {\n    charge = parseInt(warpChargeDescription[1])\n    description = warpChargeDescription[2]\n  }\n  return {\n    name: power.getAttribute('name'),\n    charge,\n    description\n  }\n}\n\nexport const additionalAttacks = (weapons, abilities) => {\n  const descriptions = _.map(weapons, (w) => w.abilities).concat(_.map(abilities, (a) => a.description))\n  const attacks = _.map(descriptions, (d) => parseAdditionalAttacks(d))\n  return _.sum(attacks)\n}\n\nconst parseModel = (model) => {\n  const wargear = xpath(\".//roster:profile[@typeName='Wargear']\", model).map(parseWargear)\n  const specialismSelection = xpath(\"roster:selections/roster:selection[roster:selections/roster:selection/roster:profiles/roster:profile/@typeName='Ability']\", model)\n  const abilities = xpath(\".//roster:profile[@typeName='Ability']\", model).map(parseAbility).concat(wargear)\n  const stats = {\n    movement: stat('M', model),\n    weapon_skill: stat('WS', model),\n    ballistic_skill: stat('BS', model),\n    strength: stat('S', model),\n    toughness: stat('T', model),\n    wounds: stat('W', model),\n    attacks: stat('A', model),\n    leadership: stat('Ld', model),\n    save: stat('Sv', model),\n    invulnerable_save: invulnerableSave(abilities)\n  }\n  const closeCombatWeapon = {\n    name: 'Bare fists',\n    range: '-',\n    type: 'Melee',\n    strength: stats.strength,\n    armourPiercing: 0,\n    damage: 1,\n    abilities: 'Default close combat weapon available to all models'\n  }\n  const weapons = xpath(\".//roster:profile[@typeName='Weapon']\", model).map((x) => (parseWeapon(x, stats.strength))).concat([closeCombatWeapon])\n  stats.additional_attacks = additionalAttacks(weapons, abilities)\n  const psychicPowers = xpath(\"roster:selections/roster:selection/roster:profiles/roster:profile[@typeName='Psychic Power']\", model).map(parsePsychicPower)\n  const category = xpath(\"roster:categories/roster:category[@primary='true']\", model)[0].getAttribute('name')\n  const faction = xpath(\"roster:categories/roster:category[@primary='false' and starts-with(@name,'Faction: ')]\", model)\n  const keywords = xpath(\"roster:categories/roster:category[@primary='false' and not(starts-with(@name,'Faction: '))]\", model).map((x) => x.getAttribute('name'))\n  _.remove(keywords, (x) => (x === 'Model'))\n  const details = {\n    name: model.getAttribute('customName'),\n    type: model.getAttribute('name'),\n    category: category === 'Non-specialist' ? null : category,\n    stats,\n    abilities,\n    weapons,\n    wargear,\n    psychicPowers,\n    specialism: specialismSelection.length > 0 ? specialismSelection[0].getAttribute('name') : null,\n    faction: faction.length > 0 ? faction[0].getAttribute('name').split(': ', 2)[1] : null,\n    keywords,\n    points: points(model)\n  }\n  return { ...details, hash: hash([]).hash(details) }\n}\n\nexport const parseBattlescribeXML = (doc) => {\n  const models = []\n  const name = xpath('/roster:roster', doc)[0].getAttribute('name')\n  const forceRules = xpath('//roster:force/roster:rules/roster:rule', doc).map(parseForceRule)\n  for (const category of xpath('//roster:force/roster:categories/roster:category', doc)) {\n    const categoryId = category.getAttribute('entryId')\n    for (const model of xpath(`//roster:selection[@type='model' and roster:categories/roster:category/@entryId='${categoryId}']`, doc)) {\n      models.push(parseModel(model))\n    }\n  }\n  const uniqueModels = _.groupBy(models, (m) => m.hash)\n  return {\n    system: 'KillTeam2018',\n    name,\n    forceRules,\n    models: _.map(uniqueModels, (model) => ({\n      ...model[0],\n      uuid: uuidv4(),\n      count: model.length,\n      selected: model.length\n    }))\n  }\n}\n","import _ from 'lodash'\nimport * as XPath from 'xpath-ts'\nimport { Roster, Operative, Weapon, Equipment, Action, PsychicPower } from '../../types/KillTeam2021'\nimport { Ability } from '../../types/Ability'\n\n// useNamespaces is NOT a React hook, so:\n// eslint-disable-next-line\nconst xpSelect = XPath.useNamespaces({ bs: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst stat = (name: string, model: Element): number => {\n  const node = xpSelect(`bs:profiles/bs:profile[@typeName='Operative']//bs:characteristic[@name='${name}']/text()`, model, true)\n  if (node) {\n    return parseInt(node.toString())\n  } else { return 0 }\n}\n\nconst parseWeapon = (weapon: Node): Weapon => {\n  return {\n    name: xpSelect('string(@name)', weapon, true).toString(),\n    melee: xpSelect('string(@name)', weapon, true).toString().startsWith('⚔'),\n    attacks: parseInt(xpSelect(\".//bs:characteristic[@name='A']/text()\", weapon, true).toString()),\n    hit: parseInt(xpSelect(\".//bs:characteristic[@name='WS/BS']/text()\", weapon, true).toString()),\n    damage: parseInt(xpSelect(\".//bs:characteristic[@name='D']/text()\", weapon, true).toString().split('/')[0]),\n    specialRules: (xpSelect(\".//bs:characteristic[@name='SR']/text()\", weapon, true) || '-').toString(),\n    criticalDamage: parseInt(xpSelect(\".//bs:characteristic[@name='D']/text()\", weapon, true).toString().split('/')[1]),\n    criticalRules: (xpSelect(\".//bs:characteristic[@name='!']/text()\", weapon, true) || '-').toString()\n  }\n}\n\nconst parseAbility = (ability: Node): Ability => {\n  return {\n    name: xpSelect('string(@name)', ability, true).toString(),\n    description: (xpSelect(\".//bs:characteristic[@name='Ability']/text()\", ability, true) || '-').toString(),\n    phases: []\n  }\n}\n\nconst parsePsychicPower = (power: Node): PsychicPower => {\n  const name = xpSelect('string(@name)', power, true).toString()\n  const weap = xpSelect(\"..//bs:profile[@typeName='Weapons']\", power, true) as Node\n  return {\n    name,\n    description: (xpSelect(\".//bs:characteristic[@name='Effect']/text()\", power, true) || '-').toString(),\n    weapon: weap ? parseWeapon(weap) : null\n  }\n}\n\nconst parseAction = (action: Node): Action => {\n  return {\n    name: xpSelect('string(@name)', action, true).toString(),\n    description: (xpSelect(\".//bs:characteristic[@name='Unique Action']/text()\", action, true) || '-').toString(),\n    cost: 1\n  }\n}\n\nconst parseEquipment = (equipment: Node): Equipment => {\n  const description = xpSelect(\".//bs:characteristic[@name='Equipment']/text()\", equipment, true)\n  return {\n    name: xpSelect('string(@name)', equipment, true).toString(),\n    cost: parseInt(xpSelect('string(.//bs:cost/@value)', equipment, true).toString()),\n    description: description ? description.toString() : null\n  }\n}\n\nconst parseRule = (rule: Node): Ability => {\n  return {\n    name: xpSelect('string(@name)', rule, true).toString(),\n    description: (xpSelect('.//bs:description/text()', rule, true) || '-').toString(),\n    phases: []\n  }\n}\n\nconst factionKeywords = [\n  'Brood Coven',\n  'Cadre Mercenary',\n  'Chaos Daemons',\n  'Commorrite',\n  'Craftworld',\n  'Death Guard',\n  'Ecclesiarchy',\n  'Forge World',\n  'Greenskin',\n  'Grey Knight',\n  'Hive Fleet',\n  'Hunter Cadre',\n  'Imperial Guard',\n  'Kommando',\n  'Space Marine',\n  'Talons of the Emperor',\n  'Thousand Sons',\n  'Tomb World',\n  'Traitor Space Marine',\n  'Troupe',\n  'Veteran Guardsman'\n]\n\nconst parseOperative = (model: Element): Operative => {\n  const allKeywords = (xpSelect(\".//bs:categories/bs:category[@primary='false']/@name\", model) as Node[]).map((x) => (x.textContent || '').replace('💀', ''))\n  const faction = _.intersection(allKeywords, factionKeywords).pop() || allKeywords.find((k) => (k === k.toUpperCase())) || null\n  const keywords = _.remove(allKeywords, (x) => (x !== faction))\n  const details = {\n    datacard: xpSelect('string(@name)', model, true).toString(),\n    name: xpSelect('string(@customName)', model, true).toString(),\n    stats: {\n      movement: stat('M', model),\n      actionPointLimit: stat('APL', model),\n      groupActivation: stat('GA', model),\n      defence: stat('DF', model),\n      save: stat('SV', model),\n      invulnerable_save: null,\n      wounds: stat('W', model)\n    },\n    weapons: (xpSelect(\".//bs:profile[@typeName='Weapons']\", model) as Node[]).map(parseWeapon),\n    equipment: (xpSelect(\".//bs:selection[(@type='upgrade') and (.//bs:cost/@value!=\\\"0.0\\\")]\", model) as Node[]).map(parseEquipment),\n    abilities: (xpSelect(\".//bs:profile[@typeName='Abilities']\", model) as Node[]).map(parseAbility),\n    actions: (xpSelect(\".//bs:profile[@typeName='Unique Actions']\", model) as Node[]).map(parseAction),\n    rules: (xpSelect('.//bs:rules/bs:rule', model) as Node[]).map(parseRule),\n    leader: (xpSelect(\"string(.//bs:categories/bs:category[@primary='true']/@name)\", model, true).toString() === 'Leader'),\n    keywords,\n    faction\n  }\n  return details\n}\n\nexport const parseBattlescribeXML = (doc: Document): Roster => {\n  const operatives = []\n  const name = xpSelect('string(/bs:roster/@name)', doc, true).toString()\n  const faction = xpSelect('string(//bs:force/@catalogueName)', doc, true).toString()\n  for (const model of xpSelect('//bs:selection[@type=\\'model\\']', doc) as Element[]) {\n    operatives.push(parseOperative(model))\n  }\n\n  const fireteams = (xpSelect('//bs:force/@name', doc) as Node[]).map((node) => { return node.nodeValue }) as string[]\n\n  const psychicPowers = (xpSelect(\".//bs:profile[@typeName='Psychic Power']\", doc) as Node[]).map(parsePsychicPower)\n  // Assign unique operative names if they don't have them\n  const romanNumerals = [\n    '', 'Ⅱ', 'Ⅲ', 'Ⅳ', 'Ⅴ',\n    'Ⅵ', 'Ⅶ', 'Ⅷ', 'Ⅸ', 'Ⅹ',\n    'ⅩⅠ', 'ⅩⅡ', 'ⅩⅢ', 'ⅩⅣ', 'ⅩⅤ',\n    'ⅩⅥ', 'ⅩⅦ', 'ⅩⅧ', 'ⅩⅨ', 'ⅩⅩ'\n  ]\n  const counts: { [key: string]: number } = {}\n  for (const o of operatives) {\n    if (o.name === '') {\n      if (!counts[o.datacard]) {\n        counts[o.datacard] = 0\n      }\n      o.name = o.datacard + ' ' + romanNumerals[counts[o.datacard]++]\n    }\n  }\n  return {\n    system: 'KillTeam2021',\n    name,\n    faction,\n    operatives,\n    psychicPowers,\n    fireteams\n  }\n}\n","import { parseBattlescribeXML as parseKillTeam2018 } from './parsers/KillTeam2018/BattlescribeParser'\nimport { parseBattlescribeXML as parseKillTeam2021 } from './parsers/KillTeam2021/BattlescribeParser'\nimport JSZip from 'jszip'\nimport { DOMParserImpl } from 'xmldom-ts'\nimport * as XPath from 'xpath-ts'\nimport { Roster as Roster2018 } from './types/KillTeam2018'\nimport { Roster as Roster2021 } from './types/KillTeam2021'\n\n// useNamespaces is NOT a React hook, so:\n// eslint-disable-next-line\nconst xpSelect = XPath.useNamespaces({ bs: 'http://www.battlescribe.net/schema/rosterSchema' })\n\nconst unzip = async (file: string): Promise<string> => {\n  if (file.charAt(0) !== 'P') {\n    return file\n  } else {\n    const jszip = new JSZip()\n    const zip = await jszip.loadAsync(file)\n    return await zip.file(/[^/]+\\.ros/)[0].async('string') // Get roster files that are in the root\n  }\n}\n\nconst parseFile = (file: string): Roster2018 | Roster2021 => {\n  const doc = new DOMParserImpl().parseFromString(file)\n  const gameSystemId = (xpSelect('/bs:roster/@gameSystemId', doc, true) as Node).nodeValue\n  switch (gameSystemId) {\n    case 'a467-5f42-d24c-6e5b':\n      return parseKillTeam2018(doc) as Roster2018\n    case '3b7e-7dab-f79f-2e74':\n      return parseKillTeam2021(doc)\n    default:\n      throw new Error('Unsupported game system!')\n  }\n}\n\nexport const loadFile = async (file: File): Promise<Roster2018 | Roster2021> => {\n  const reader = new FileReader()\n  return await new Promise((resolve, reject) => {\n    reader.onerror = () => {\n      reader.abort()\n      reject(new DOMException('Problem parsing input file.'))\n    }\n    reader.onloadend = async () => {\n      const content = reader.result as string\n      const file = await unzip(content)\n      resolve(parseFile(file))\n    }\n    reader.readAsBinaryString(file)\n  })\n}\n\nexport const loadFiles = async (files: File[]): Promise<Roster2018 | Roster2021> => {\n  return await loadFile(files[0])\n}\n","import React, { FC, useState } from 'react'\nimport getFactionSpecificData from './data'\nimport { FactionSpecificData } from './FactionSpecificData'\n\nimport { data } from './data/index'\n\nconst factionNames = data.map(faction => faction.name)\n\nexport const DataDevPage: FC = () => {\n  const [faction, setFaction] = useState<string | null>(null)\n\n  const Content: FC = () => {\n    if (faction === null) {\n      return <></>\n    }\n\n    const factionArchetypesMap = getFactionSpecificData(faction)?.archetypes\n\n    if (factionArchetypesMap === undefined) {\n      return <></>\n    }\n\n    const factionFireteams = Object.keys(factionArchetypesMap)\n\n    return <FactionSpecificData faction={faction} fireteams={factionFireteams} />\n  }\n\n  return (\n    <>\n      <h1>\n        DEV PAGE\n      </h1>\n      <div style={{ marginBottom: '10px' }}>\n        <select onChange={e => setFaction(e.target.value)}>\n          <option />\n          {factionNames.map((faction, index) => <option value={faction} key={index}>{faction}</option>)}\n        </select>\n      </div>\n      <div>\n        <Content />\n      </div>\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Container } from 'react-bootstrap'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport Homepage from './components/Homepage'\nimport { Roster as RosterView2018 } from './components/KillTeam2018/Roster'\nimport { Roster as RosterView2021 } from './components/KillTeam2021/Roster'\nimport { loadFiles } from './FileLoader'\nimport { Roster as Roster2018 } from './types/KillTeam2018'\nimport { Roster as Roster2021 } from './types/KillTeam2021'\nimport { DataDevPage } from './components/KillTeam2021/DataDevPage'\nimport { Settings } from './types/Settings'\n\nexport function App () {\n  const [roster, setRoster] = useState<Roster2018|Roster2021|null>(null)\n\n  const [settings, setSettings] = useState({ showWoundTrack: true })\n\n  useEffect(() => {\n    setSettings(loadSettingsFromLocalStorage())\n  }, [])\n\n  const setAndSaveSettings = (settings: Settings) => {\n    setSettings(settings)\n    saveSettingsToLocalStorage(settings)\n  }\n\n  const saveSettingsToLocalStorage = (settings: Settings) => {\n    localStorage.setItem('settings', JSON.stringify(settings))\n  }\n\n  const loadSettingsFromLocalStorage = (): Settings => {\n    try {\n      return JSON.parse(localStorage.getItem('settings') ?? '{ showWoundTrack: true, touchscreenMode: false, dropboxSelector: false }')\n    } catch (e) {\n      return { showWoundTrack: false }\n    }\n  }\n\n  const handleUpload = async (acceptedFiles: File[]) => {\n    const r = await loadFiles(acceptedFiles)\n    setRoster(r)\n  }\n\n  const handleClose = () => {\n    setRoster(null)\n  }\n\n  const handleSelectionChanged = (uuid: string, selectedCount: number) => {\n    if ((roster != null) && isRosterKT18(roster)) {\n      setRoster(Object.assign({\n        models: roster.models.map((model) => (\n          model.uuid !== uuid\n            ? model\n            : Object.assign(\n              model,\n              { selected: selectedCount }\n            )\n        ))\n      }, roster))\n    }\n  }\n\n  const isRosterKT18 = (roster: any): roster is Roster2018 => (roster.system === 'KillTeam2018')\n  const isRosterKT21 = (roster: any): roster is Roster2021 => (roster.system === 'KillTeam2021')\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/kill_team_21/dev'>\n          <Container fluid='lg'>\n            <DataDevPage />\n          </Container>\n        </Route>\n        <Route path='/'>\n          <Container fluid='lg'>\n            {roster === null ? <Homepage onUpload={handleUpload} settings={settings} setSettings={setAndSaveSettings} /> : <></>}\n            {(roster != null) && isRosterKT18(roster) ? <RosterView2018 name={roster.name} models={roster.models} onClose={handleClose} forceRules={roster.forceRules} onSelectionChanged={handleSelectionChanged} /> : <></>}\n            {(roster != null) && isRosterKT21(roster) ? <RosterView2021 name={roster.name} operatives={roster.operatives} psychicPowers={roster.psychicPowers} faction={roster.faction} fireteams={roster.fireteams} onClose={handleClose} showWoundTrack={settings.showWoundTrack} /> : <></>}\n          </Container>\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport * as Sentry from '@sentry/react'\n// import { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: 'https://6fe3e632b45a44c086068e13f3b1a783@o464596.ingest.sentry.io/5473956'\n  // integrations: [\n  //   new Integrations.BrowserTracing(),\n  // ],\n  // tracesSampleRate: 0.0,\n})\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// Enable offline use with a service worker\n// See https://create-react-app.dev/docs/making-a-progressive-web-app/\nserviceWorker.unregister()\n"],"sourceRoot":""}